% Script File: 04 Area HOS.bscr
% Decoded from: 47F0B0 to 48D1A0 (04 Area HOS)

#new:Function $Function_80218000
    0:  ADDIU     V0, R0, 1
    4:  SAB       V0, 8010F2A2
    C:  JR        RA
   10:  ADDIU     V0, R0, 2

PADDING: 80218014 to 80218020 (0047F0C4 to 0047F0D0)
00000000 00000000 00000000 

#new:Function $Function_80218020
    0:  ADDIU     SP, SP, FFD8
    4:  SW        S2, 20 (SP)
    8:  DADDU     S2, A0, R0
    C:  SW        RA, 24 (SP)
   10:  SW        S1, 1C (SP)
   14:  SW        S0, 18 (SP)
   18:  LW        A0, 148 (S2)
   1C:  JAL       {Func:GetActor}
   20:  DADDU     S0, A1, R0
   24:  BEQ       S0, R0, .oDC
   28:  DADDU     S1, V0, R0
   2C:  LWC1      F2, 18 (S1)
   30:  LWC1      F0, 144 (S1)
   34:  SUB.S     F2, F2, F0
   38:  MUL.S     F2, F2, F2
   3C:  NOP
   40:  LWC1      F6, 1C (S1)
   44:  LWC1      F0, 148 (S1)
   48:  SUB.S     F6, F6, F0
   4C:  MUL.S     F6, F6, F6
   50:  NOP
   54:  LWC1      F4, 14C (S1)
   58:  LWC1      F0, 20 (S1)
   5C:  SUB.S     F0, F0, F4
   60:  MUL.S     F0, F0, F0
   64:  NOP
   68:  ADD.S     F2, F2, F6
   6C:  ADD.S     F12, F2, F0
   70:  SQRT.S    F4, F12
   74:  C.EQ.S    F4, F4
   78:  NOP
   7C:  BC1T      .o90
   80:  NOP
   84:  JAL       80061EF0
   88:  NOP
   8C:  MOV.S     F4, F0
        .o90
   90:  LWC1      F0, 4C (S1)
   94:  LIF       F2, 0.5
   9C:  DIV.S     F0, F4, F0
   A0:  MUL.S     F0, F0, F2
   A4:  NOP
   A8:  LIF       F2, 1.0
   B0:  NOP
   B4:  ADD.S     F0, F0, F2
   B8:  TRUNC.W.S F8, F0
   BC:  SWC1      F8, 70 (S2)
   C0:  LWC1      F0, 14C (S1)
   C4:  ADDIU     A0, R0, 359
   C8:  SWC1      F0, 10 (SP)
   CC:  LW        A2, 144 (S1)
   D0:  LW        A3, 148 (S1)
   D4:  JAL       80149D5C
   D8:  DADDU     A1, R0, R0
        .oDC
   DC:  LW        V0, 70 (S2)
   E0:  DADDU     V1, V0, R0
   E4:  ADDIU     V0, V0, FFFF
   E8:  BGTZ      V1, .o114
   EC:  SW        V0, 70 (S2)
   F0:  LWC1      F0, 14C (S1)
   F4:  ADDIU     A0, R0, 759
   F8:  SWC1      F0, 10 (SP)
   FC:  LW        A2, 144 (S1)
  100:  LW        A3, 148 (S1)
  104:  JAL       80149D5C
  108:  DADDU     A1, R0, R0
  10C:  BEQ       R0, R0, .o118
  110:  ADDIU     V0, R0, 2
        .o114
  114:  DADDU     V0, R0, R0
        .o118
  118:  LW        RA, 24 (SP)
  11C:  LW        S2, 20 (SP)
  120:  LW        S1, 1C (SP)
  124:  LW        S0, 18 (SP)
  128:  JR        RA
  12C:  ADDIU     SP, SP, 28

#new:Function $Function_80218150
    0:  ADDIU     SP, SP, FFA0
    4:  SW        S1, 24 (SP)
    8:  DADDU     S1, A0, R0
    C:  SW        RA, 28 (SP)
   10:  SW        S0, 20 (SP)
   14:  SDC1      F30, 58 (SP)
   18:  SDC1      F28, 50 (SP)
   1C:  SDC1      F26, 48 (SP)
   20:  SDC1      F24, 40 (SP)
   24:  SDC1      F22, 38 (SP)
   28:  SDC1      F20, 30 (SP)
   2C:  LW        S0, C (S1)
   30:  LW        A1, 0 (S0)
   34:  JAL       {Func:GetFloatVariable}
   38:  ADDIU     S0, S0, 4
   3C:  LW        A1, 0 (S0)
   40:  ADDIU     S0, S0, 4
   44:  DADDU     A0, S1, R0
   48:  JAL       {Func:GetFloatVariable}
   4C:  MOV.S     F30, F0
   50:  LW        A1, 0 (S0)
   54:  ADDIU     S0, S0, 4
   58:  DADDU     A0, S1, R0
   5C:  JAL       {Func:GetFloatVariable}
   60:  MOV.S     F20, F0
   64:  LW        A1, 0 (S0)
   68:  ADDIU     S0, S0, 4
   6C:  DADDU     A0, S1, R0
   70:  JAL       {Func:GetFloatVariable}
   74:  MOV.S     F28, F0
   78:  LW        A1, 0 (S0)
   7C:  ADDIU     S0, S0, 4
   80:  DADDU     A0, S1, R0
   84:  JAL       {Func:GetFloatVariable}
   88:  MOV.S     F26, F0
   8C:  LW        A1, 0 (S0)
   90:  ADDIU     S0, S0, 4
   94:  DADDU     A0, S1, R0
   98:  JAL       {Func:GetFloatVariable}
   9C:  MOV.S     F24, F0
   A0:  DADDU     A0, S1, R0
   A4:  LW        A1, 0 (S0)
   A8:  JAL       {Func:GetVariable}
   AC:  MOV.S     F22, F0
   B0:  LW        A0, 148 (S1)
   B4:  JAL       {Func:GetActor}
   B8:  DADDU     S0, V0, R0
   BC:  CVT.D.S   F20, F20
   C0:  MFC1      A1, F30
   C4:  LIF       F1, 2.3125
   CC:  MTC1      R0, F0
   D0:  MFC1      A3, F28
   D4:  ADD.D     F20, F20, F0
   D8:  DADDU     A0, R0, R0
   DC:  SW        S0, 1C (SP)
   E0:  CVT.S.D   F20, F20
   E4:  MFC1      A2, F20
   E8:  DADDU     S0, V0, R0
   EC:  SWC1      F26, 10 (SP)
   F0:  SWC1      F24, 14 (SP)
   F4:  JAL       8006FF50
   F8:  SWC1      F22, 18 (SP)
   FC:  DADDU     A0, V0, R0
  100:  LB        V1, 210 (S0)
  104:  ADDIU     V0, R0, A
  108:  BNE       V1, V0, .o128
  10C:  NOP
  110:  LW        V0, C (A0)
  114:  LIO       AT, 3ECCCCCD
  11C:  MTC1      AT, F0
  120:  NOP
  124:  SWC1      F0, 28 (V0)
        .o128
  128:  LW        RA, 28 (SP)
  12C:  LW        S1, 24 (SP)
  130:  LW        S0, 20 (SP)
  134:  LDC1      F30, 58 (SP)
  138:  LDC1      F28, 50 (SP)
  13C:  LDC1      F26, 48 (SP)
  140:  LDC1      F24, 40 (SP)
  144:  LDC1      F22, 38 (SP)
  148:  LDC1      F20, 30 (SP)
  14C:  ADDIU     V0, R0, 2
  150:  JR        RA
  154:  ADDIU     SP, SP, 60

#new:Function $Function_802182A8
    0:  ADDIU     SP, SP, FFE8
    4:  SW        RA, 10 (SP)
    8:  LW        V0, C (A0)
    C:  LAH       A2, 800DC1EC
   14:  JAL       {Func:SetVariable}
   18:  LW        A1, 0 (V0)
   1C:  LW        RA, 10 (SP)
   20:  ADDIU     V0, R0, 2
   24:  JR        RA
   28:  ADDIU     SP, SP, 18

#new:Function $Function_802182D4
    0:  ADDIU     SP, SP, FFD8
    4:  SW        S1, 14 (SP)
    8:  DADDU     S1, A0, R0
    C:  SW        RA, 20 (SP)
   10:  SW        S3, 1C (SP)
   14:  SW        S2, 18 (SP)
   18:  SW        S0, 10 (SP)
   1C:  LW        S0, C (S1)
   20:  LW        A1, 0 (S0)
   24:  JAL       {Func:GetVariable}
   28:  ADDIU     S0, S0, 4
   2C:  LW        A1, 0 (S0)
   30:  ADDIU     S0, S0, 4
   34:  DADDU     A0, S1, R0
   38:  JAL       {Func:GetVariable}
   3C:  DADDU     S3, V0, R0
   40:  LW        A1, 0 (S0)
   44:  ADDIU     S0, S0, 4
   48:  DADDU     A0, S1, R0
   4C:  JAL       {Func:GetVariable}
   50:  DADDU     S2, V0, R0
   54:  DADDU     A0, S1, R0
   58:  LW        A1, 0 (S0)
   5C:  JAL       {Func:GetVariable}
   60:  DADDU     S0, V0, R0
   64:  LW        A0, 148 (S1)
   68:  JAL       {Func:GetActor}
   6C:  DADDU     S1, V0, R0
   70:  DADDU     V1, V0, R0
   74:  LW        V0, 8 (V1)
   78:  LBU       V0, 24 (V0)
   7C:  LW        A0, 8 (V1)
   80:  SUBU      S3, S3, V0
   84:  SB        S3, 194 (V1)
   88:  LBU       V0, 25 (A0)
   8C:  SUBU      S2, S2, V0
   90:  SB        S2, 195 (V1)
   94:  LBU       V0, 26 (A0)
   98:  SUBU      S0, S0, V0
   9C:  SB        S0, 196 (V1)
   A0:  LBU       A0, 27 (A0)
   A4:  SUBU      S1, S1, A0
   A8:  SB        S1, 197 (V1)
   AC:  LW        RA, 20 (SP)
   B0:  LW        S3, 1C (SP)
   B4:  LW        S2, 18 (SP)
   B8:  LW        S1, 14 (SP)
   BC:  LW        S0, 10 (SP)
   C0:  ADDIU     V0, R0, 2
   C4:  JR        RA
   C8:  ADDIU     SP, SP, 28

#new:Function $Function_802183A0
    0:  ADDIU     SP, SP, FFE0
    4:  SW        S1, 14 (SP)
    8:  DADDU     S1, A0, R0
    C:  SW        RA, 18 (SP)
   10:  SW        S0, 10 (SP)
   14:  LW        S0, C (S1)
   18:  LW        A1, 0 (S0)
   1C:  JAL       {Func:GetVariable}
   20:  ADDIU     S0, S0, 4
   24:  DADDU     A0, S1, R0
   28:  LW        A1, 0 (S0)
   2C:  JAL       {Func:GetVariable}
   30:  DADDU     S0, V0, R0
   34:  DADDU     A0, S0, R0
   38:  JAL       80028F08
   3C:  DADDU     A1, V0, R0
   40:  LW        RA, 18 (SP)
   44:  LW        S1, 14 (SP)
   48:  LW        S0, 10 (SP)
   4C:  ADDIU     V0, R0, 2
   50:  JR        RA
   54:  ADDIU     SP, SP, 20

#new:Function $Function_802183F8
    0:  ADDIU     SP, SP, FFE0
    4:  SW        S1, 14 (SP)
    8:  DADDU     S1, A0, R0
    C:  SW        RA, 18 (SP)
   10:  SW        S0, 10 (SP)
   14:  LW        S0, C (S1)
   18:  LW        A1, 0 (S0)
   1C:  JAL       {Func:GetVariable}
   20:  ADDIU     S0, S0, 4
   24:  DADDU     A0, V0, R0
   28:  ADDIU     V0, R0, FF81
   2C:  BNE       A0, V0, .o38
   30:  NOP
   34:  LW        A0, 148 (S1)
        .o38
   38:  JAL       {Func:GetActor}
   3C:  NOP
   40:  DADDU     A0, V0, R0
   44:  LBU       V1, 136 (A0)
   48:  ADDIU     V0, R0, 47
   4C:  BEQ       V1, V0, .o7C
   50:  SLT       V0, V1, V0
   54:  BNEL      V0, R0, .o9C
   58:  DADDU     A0, S1, R0
   5C:  SLTI      V0, V1, 65
   60:  BEQ       V0, R0, .o98
   64:  SLTI      V0, V1, 4D
   68:  BNE       V0, R0, .o9C
   6C:  DADDU     A0, S1, R0
   70:  LW        A1, 0 (S0)
   74:  BEQ       R0, R0, .oA4
   78:  ADDIU     A2, R0, FFFF
        .o7C
   7C:  LW        V1, A8 (A0)
   80:  ADDIU     V0, R0, 1
   84:  BNE       V1, V0, .o9C
   88:  DADDU     A0, S1, R0
   8C:  LW        A1, 0 (S0)
   90:  BEQ       R0, R0, .oA4
   94:  ADDIU     A2, R0, FFFF
        .o98
   98:  DADDU     A0, S1, R0
        .o9C
   9C:  LW        A1, 0 (S0)
   A0:  DADDU     A2, R0, R0
        .oA4
   A4:  JAL       {Func:SetVariable}
   A8:  NOP
   AC:  LW        RA, 18 (SP)
   B0:  LW        S1, 14 (SP)
   B4:  LW        S0, 10 (SP)
   B8:  ADDIU     V0, R0, 2
   BC:  JR        RA
   C0:  ADDIU     SP, SP, 20

PADDING: 802184BC to 802184C0 (0047F56C to 0047F570)
00000000 

% Origin: HEURISTIC
#new:Function $Function_802184C0
    0:  ADDIU     SP, SP, FFC0
    4:  SW        S3, 2C (SP)
    8:  ADDIU     S3, A0, FFFF
    C:  DADDU     A0, S3, R0
   10:  ADDIU     A1, SP, 10
   14:  ADDIU     A2, SP, 14
   18:  ADDIU     A3, SP, 18
   1C:  SW        RA, 3C (SP)
   20:  SW        S6, 38 (SP)
   24:  SW        S5, 34 (SP)
   28:  SW        S4, 30 (SP)
   2C:  SW        S2, 28 (SP)
   30:  SW        S1, 24 (SP)
   34:  JAL       8011C2B0
   38:  SW        S0, 20 (SP)
   3C:  LW        V0, 18 (SP)
   40:  BLEZ      V0, .o188
   44:  DADDU     S0, R0, R0
   48:  LIA       V1, $???_80224BB0
   50:  SLL       V0, S3, 1
   54:  ADDU      S5, V0, V1
   58:  LIO       S4, 55555556
   60:  ORI       S6, R0, 8000
   64:  MULT      S0, S4
        .o68
   68:  SRA       S2, S0, 1F
   6C:  MFHI      V1
   70:  SUBU      V1, V1, S2
   74:  SLL       V0, V1, 1
   78:  ADDU      V0, V0, V1
   7C:  SUBU      V0, S0, V0
   80:  LHU       V1, 0 (S5)
   84:  ADDIU     V0, V0, 1
   88:  MULT      V1, V0
   8C:  SLL       V0, S0, 4
   90:  MFLO      V1
   94:  ADDU      A0, V1, S0
   98:  LW        V1, 14 (SP)
   9C:  ANDI      A0, A0, FFFF
   A0:  JAL       800645F0
   A4:  ADDU      S1, V1, V0
   A8:  SLL       V0, V0, 10
   AC:  SRA       V0, V0, 10
   B0:  ADDU      V0, V0, S6
   B4:  SRL       V1, V0, 1F
   B8:  ADDU      V0, V0, V1
   BC:  SLL       V0, V0, F
   C0:  SRA       V0, V0, 10
   C4:  SLL       V1, V0, 2
   C8:  ADDU      V1, V1, V0
   CC:  SLL       V0, V1, 5
   D0:  SUBU      V1, V0, V1
   D4:  BGEZ      V1, .oE0
   D8:  DADDU     V0, V1, R0
   DC:  ADDIU     V0, V1, 7FFF
        .oE0
   E0:  SRA       V0, V0, F
   E4:  ADDIU     V0, V0, 64
   E8:  SB        V0, C (S1)
   EC:  SUBU      V1, S0, S2
   F0:  SRA       A1, V1, 1
   F4:  MULT      A1, S4
   F8:  SB        V0, D (S1)
   FC:  LHU       A0, 0 (S5)
  100:  SRA       V1, V1, 1F
  104:  SRL       A2, A0, F
  108:  MFHI      T1
  10C:  SUBU      V1, T1, V1
  110:  SLL       V0, V1, 1
  114:  ADDU      V0, V0, V1
  118:  SUBU      A1, A1, V0
  11C:  ADDIU     A1, A1, 1
  120:  SLL       A1, A1, F
  124:  MULT      A2, A1
  128:  SRL       A0, A0, E
  12C:  SLL       A0, A0, F
  130:  MFLO      V1
  134:  ADDU      A0, V1, A0
  138:  ADDU      A0, A0, S0
  13C:  JAL       800645F0
  140:  ANDI      A0, A0, FFFF
  144:  SLL       V0, V0, 10
  148:  SRA       V0, V0, 10
  14C:  LBU       V1, C (S1)
  150:  ADDU      V0, V0, S6
  154:  MULT      V1, V0
  158:  MFLO      V1
  15C:  BGEZ      V1, .o170
  160:  SRA       V0, V1, 10
  164:  ORI       V0, R0, FFFF
  168:  ADDU      V1, V1, V0
  16C:  SRA       V0, V1, 10
        .o170
  170:  SB        V0, E (S1)
  174:  LW        V0, 18 (SP)
  178:  ADDIU     S0, S0, 1
  17C:  SLT       V0, S0, V0
  180:  BNE       V0, R0, .o68
  184:  MULT      S0, S4
        .o188
  188:  LIA       V1, 8009A66C
  190:  LW        V0, 0 (V1)
  194:  DADDU     A0, S3, R0
  198:  DADDU     S0, V0, R0
  19C:  ADDIU     V0, V0, 8
  1A0:  SW        V0, 0 (V1)
  1A4:  LUI       V0, DE00
  1A8:  JAL       8011C2EC
  1AC:  SW        V0, 0 (S0)
  1B0:  SW        V0, 4 (S0)
  1B4:  LIA       V0, $???_80224BB0
  1BC:  SLL       V1, S3, 1
  1C0:  ADDU      V1, V1, V0
  1C4:  LHU       V0, 0 (V1)
  1C8:  ADDIU     V0, V0, 253
  1CC:  SH        V0, 0 (V1)
  1D0:  LW        RA, 3C (SP)
  1D4:  LW        S6, 38 (SP)
  1D8:  LW        S5, 34 (SP)
  1DC:  LW        S4, 30 (SP)
  1E0:  LW        S3, 2C (SP)
  1E4:  LW        S2, 28 (SP)
  1E8:  LW        S1, 24 (SP)
  1EC:  LW        S0, 20 (SP)
  1F0:  JR        RA
  1F4:  ADDIU     SP, SP, 40

% Origin: HEURISTIC
#new:Function $Function_802186B8
    0:  ADDIU     SP, SP, FFB8
    4:  SW        S2, 28 (SP)
    8:  ADDIU     S2, A0, FFFF
    C:  DADDU     A0, S2, R0
   10:  ADDIU     A1, SP, 10
   14:  ADDIU     A2, SP, 14
   18:  SW        RA, 3C (SP)
   1C:  SW        S6, 38 (SP)
   20:  SW        S5, 34 (SP)
   24:  SW        S4, 30 (SP)
   28:  SW        S3, 2C (SP)
   2C:  SW        S1, 24 (SP)
   30:  SW        S0, 20 (SP)
   34:  SDC1      F20, 40 (SP)
   38:  JAL       8011C2B0
   3C:  ADDIU     A3, SP, 18
   40:  LW        V0, 18 (SP)
   44:  BLEZ      V0, .o2A4
   48:  DADDU     S0, R0, R0
   4C:  LIA       V1, $???_80224BB0
   54:  SLL       V0, S2, 1
   58:  ADDU      S4, V0, V1
   5C:  LIO       S3, 55555556
   64:  ORI       S6, R0, 8000
   68:  LIF       F21, 28.0
   70:  MTC1      R0, F20
   74:  LUI       S5, 8000
   78:  MULT      S0, S3
        .o7C
   7C:  SRA       V1, S0, 1F
   80:  MFHI      T1
   84:  SUBU      V1, T1, V1
   88:  SLL       V0, V1, 1
   8C:  ADDU      V0, V0, V1
   90:  SUBU      V0, S0, V0
   94:  LHU       V1, 0 (S4)
   98:  ADDIU     V0, V0, 1
   9C:  MULT      V1, V0
   A0:  LW        V0, 14 (SP)
   A4:  MFLO      V1
   A8:  ADDU      A0, V1, S0
   AC:  ANDI      A0, A0, FFFF
   B0:  SLL       V1, S0, 4
   B4:  ADDU      V0, V0, V1
   B8:  JAL       800645F0
   BC:  ADDIU     S1, V0, C
   C0:  SLL       V0, V0, 10
   C4:  SRA       V0, V0, 10
   C8:  ADDU      V0, V0, S6
   CC:  SRL       V1, V0, 1F
   D0:  ADDU      V0, V0, V1
   D4:  SRA       V0, V0, 1
   D8:  SLL       V1, V0, 10
   DC:  SRA       V1, V1, 10
   E0:  SLL       A0, V1, 2
   E4:  ADDU      A0, A0, V1
   E8:  SLL       V1, A0, 5
   EC:  SUBU      V1, V1, A0
   F0:  BGEZ      V1, .oFC
   F4:  DADDU     A0, V0, R0
   F8:  ADDIU     V1, V1, 7FFF
        .oFC
   FC:  SRA       V0, V1, F
  100:  LAD       F2, $ConstDouble_80225FB0
  108:  MTC1      V0, F0
  10C:  NOP
  110:  CVT.D.W   F0, F0
  114:  ADD.D     F0, F0, F2
  118:  C.LE.D    F20, F0
  11C:  NOP
  120:  BC1TL     .o138
  124:  SUB.D     F0, F0, F20
  128:  TRUNC.W.D F4, F0
  12C:  MFC1      V0, F4
  130:  BEQ       R0, R0, .o14C
  134:  SB        V0, 0 (S1)
        .o138
  138:  TRUNC.W.D F4, F0
  13C:  MFC1      V0, F4
  140:  NOP
  144:  OR        V0, V0, S5
  148:  SB        V0, 0 (S1)
        .o14C
  14C:  SLL       V0, A0, 10
  150:  SRA       V0, V0, 10
  154:  SLL       V1, V0, 2
  158:  ADDU      V1, V1, V0
  15C:  SLL       V0, V1, 5
  160:  SUBU      V0, V0, V1
  164:  BGEZ      V0, .o170
  168:  ADDIU     V1, S1, 1
  16C:  ADDIU     V0, V0, 7FFF
        .o170
  170:  SRA       V0, V0, F
  174:  LAD       F2, $ConstDouble_80225FB8
  17C:  MTC1      V0, F0
  180:  NOP
  184:  CVT.D.W   F0, F0
  188:  ADD.D     F0, F0, F2
  18C:  C.LE.D    F20, F0
  190:  NOP
  194:  BC1TL     .o1AC
  198:  SUB.D     F0, F0, F20
  19C:  TRUNC.W.D F4, F0
  1A0:  MFC1      V0, F4
  1A4:  BEQ       R0, R0, .o1C0
  1A8:  SB        V0, 0 (V1)
        .o1AC
  1AC:  TRUNC.W.D F4, F0
  1B0:  MFC1      V0, F4
  1B4:  NOP
  1B8:  OR        V0, V0, S5
  1BC:  SB        V0, 0 (V1)
        .o1C0
  1C0:  SRL       V1, S0, 1F
  1C4:  ADDU      V1, S0, V1
  1C8:  SRA       A1, V1, 1
  1CC:  MULT      A1, S3
  1D0:  LHU       A0, 0 (S4)
  1D4:  SRA       V1, V1, 1F
  1D8:  SRL       A2, A0, F
  1DC:  MFHI      T1
  1E0:  SUBU      V1, T1, V1
  1E4:  SLL       V0, V1, 1
  1E8:  ADDU      V0, V0, V1
  1EC:  SUBU      A1, A1, V0
  1F0:  ADDIU     A1, A1, 1
  1F4:  SLL       A1, A1, F
  1F8:  MULT      A2, A1
  1FC:  SRL       A0, A0, E
  200:  SLL       A0, A0, F
  204:  MFLO      V1
  208:  ADDU      A0, V1, A0
  20C:  ADDU      A0, A0, S0
  210:  JAL       800645F0
  214:  ANDI      A0, A0, FFFF
  218:  SLL       V0, V0, 10
  21C:  SRA       V0, V0, 10
  220:  LBU       V1, 0 (S1)
  224:  ADDU      V0, V0, S6
  228:  MULT      V1, V0
  22C:  MFLO      V1
  230:  BGEZ      V1, .o240
  234:  ADDIU     A0, S1, 2
  238:  ORI       V0, R0, FFFF
  23C:  ADDU      V1, V1, V0
        .o240
  240:  SRA       V0, V1, 10
  244:  LAD       F2, $ConstDouble_80225FC0
  24C:  MTC1      V0, F0
  250:  NOP
  254:  CVT.D.W   F0, F0
  258:  ADD.D     F0, F0, F2
  25C:  C.LE.D    F20, F0
  260:  NOP
  264:  BC1TL     .o27C
  268:  SUB.D     F0, F0, F20
  26C:  TRUNC.W.D F4, F0
  270:  MFC1      V0, F4
  274:  BEQ       R0, R0, .o290
  278:  SB        V0, 0 (A0)
        .o27C
  27C:  TRUNC.W.D F4, F0
  280:  MFC1      V0, F4
  284:  NOP
  288:  OR        V0, V0, S5
  28C:  SB        V0, 0 (A0)
        .o290
  290:  LW        V0, 18 (SP)
  294:  ADDIU     S0, S0, 1
  298:  SLT       V0, S0, V0
  29C:  BNE       V0, R0, .o7C
  2A0:  MULT      S0, S3
        .o2A4
  2A4:  LIA       V1, 8009A66C
  2AC:  LW        V0, 0 (V1)
  2B0:  DADDU     A0, S2, R0
  2B4:  DADDU     S0, V0, R0
  2B8:  ADDIU     V0, V0, 8
  2BC:  SW        V0, 0 (V1)
  2C0:  LUI       V0, DE00
  2C4:  JAL       8011C2EC
  2C8:  SW        V0, 0 (S0)
  2CC:  SW        V0, 4 (S0)
  2D0:  LIA       V0, $???_80224BB0
  2D8:  SLL       V1, S2, 1
  2DC:  ADDU      V1, V1, V0
  2E0:  LHU       V0, 0 (V1)
  2E4:  ADDIU     V0, V0, 253
  2E8:  SH        V0, 0 (V1)
  2EC:  LW        RA, 3C (SP)
  2F0:  LW        S6, 38 (SP)
  2F4:  LW        S5, 34 (SP)
  2F8:  LW        S4, 30 (SP)
  2FC:  LW        S3, 2C (SP)
  300:  LW        S2, 28 (SP)
  304:  LW        S1, 24 (SP)
  308:  LW        S0, 20 (SP)
  30C:  LDC1      F20, 40 (SP)
  310:  JR        RA
  314:  ADDIU     SP, SP, 48

% Origin: HEURISTIC
#new:Function $Function_802189D0
    0:  ADDIU     SP, SP, FFB8
    4:  SW        S2, 28 (SP)
    8:  ADDIU     S2, A0, FFFF
    C:  DADDU     A0, S2, R0
   10:  ADDIU     A1, SP, 10
   14:  ADDIU     A2, SP, 14
   18:  SW        RA, 3C (SP)
   1C:  SW        S6, 38 (SP)
   20:  SW        S5, 34 (SP)
   24:  SW        S4, 30 (SP)
   28:  SW        S3, 2C (SP)
   2C:  SW        S1, 24 (SP)
   30:  SW        S0, 20 (SP)
   34:  SDC1      F20, 40 (SP)
   38:  JAL       8011C2B0
   3C:  ADDIU     A3, SP, 18
   40:  LW        V0, 18 (SP)
   44:  BLEZ      V0, .o2A8
   48:  DADDU     S0, R0, R0
   4C:  LIA       V1, $???_80224BB0
   54:  SLL       V0, S2, 1
   58:  ADDU      S4, V0, V1
   5C:  LIO       S3, 55555556
   64:  ORI       S6, R0, 8000
   68:  LIF       F21, 28.0
   70:  MTC1      R0, F20
   74:  LUI       S5, 8000
   78:  MULT      S0, S3
        .o7C
   7C:  SRA       V1, S0, 1F
   80:  MFHI      T1
   84:  SUBU      V1, T1, V1
   88:  SLL       V0, V1, 1
   8C:  ADDU      V0, V0, V1
   90:  SUBU      V0, S0, V0
   94:  LHU       V1, 0 (S4)
   98:  ADDIU     V0, V0, 1
   9C:  MULT      V1, V0
   A0:  LW        V0, 14 (SP)
   A4:  MFLO      V1
   A8:  ADDU      A0, V1, S0
   AC:  ANDI      A0, A0, FFFF
   B0:  SLL       V1, S0, 4
   B4:  ADDU      V0, V0, V1
   B8:  JAL       800645F0
   BC:  ADDIU     S1, V0, C
   C0:  SLL       V0, V0, 10
   C4:  SRA       V0, V0, 10
   C8:  ADDU      V0, V0, S6
   CC:  SRL       V1, V0, 1F
   D0:  ADDU      V0, V0, V1
   D4:  SRA       V0, V0, 1
   D8:  SLL       V1, V0, 10
   DC:  SRA       V1, V1, 10
   E0:  SLL       A0, V1, 2
   E4:  ADDU      A0, A0, V1
   E8:  SLL       V1, A0, 5
   EC:  SUBU      V1, V1, A0
   F0:  BGEZ      V1, .oFC
   F4:  DADDU     A0, V0, R0
   F8:  ADDIU     V1, V1, 7FFF
        .oFC
   FC:  SRA       V0, V1, F
  100:  LAD       F2, $ConstDouble_80225FC8
  108:  MTC1      V0, F0
  10C:  NOP
  110:  CVT.D.W   F0, F0
  114:  ADD.D     F0, F0, F2
  118:  C.LE.D    F20, F0
  11C:  NOP
  120:  BC1TL     .o138
  124:  SUB.D     F0, F0, F20
  128:  TRUNC.W.D F4, F0
  12C:  MFC1      V0, F4
  130:  BEQ       R0, R0, .o14C
  134:  SB        V0, 0 (S1)
        .o138
  138:  TRUNC.W.D F4, F0
  13C:  MFC1      V0, F4
  140:  NOP
  144:  OR        V0, V0, S5
  148:  SB        V0, 0 (S1)
        .o14C
  14C:  SLL       V0, A0, 10
  150:  SRA       V0, V0, 10
  154:  SLL       V1, V0, 2
  158:  ADDU      V1, V1, V0
  15C:  SLL       V0, V1, 5
  160:  SUBU      V0, V0, V1
  164:  BGEZ      V0, .o170
  168:  ADDIU     V1, S1, 1
  16C:  ADDIU     V0, V0, 7FFF
        .o170
  170:  SRA       V0, V0, F
  174:  LIF       F3, 3.390625
  17C:  MTC1      R0, F2
  180:  MTC1      V0, F0
  184:  NOP
  188:  CVT.D.W   F0, F0
  18C:  ADD.D     F0, F0, F2
  190:  C.LE.D    F20, F0
  194:  NOP
  198:  BC1TL     .o1B0
  19C:  SUB.D     F0, F0, F20
  1A0:  TRUNC.W.D F4, F0
  1A4:  MFC1      V0, F4
  1A8:  BEQ       R0, R0, .o1C4
  1AC:  SB        V0, 0 (V1)
        .o1B0
  1B0:  TRUNC.W.D F4, F0
  1B4:  MFC1      V0, F4
  1B8:  NOP
  1BC:  OR        V0, V0, S5
  1C0:  SB        V0, 0 (V1)
        .o1C4
  1C4:  SRL       V1, S0, 1F
  1C8:  ADDU      V1, S0, V1
  1CC:  SRA       A1, V1, 1
  1D0:  MULT      A1, S3
  1D4:  LHU       A0, 0 (S4)
  1D8:  SRA       V1, V1, 1F
  1DC:  SRL       A2, A0, F
  1E0:  MFHI      T1
  1E4:  SUBU      V1, T1, V1
  1E8:  SLL       V0, V1, 1
  1EC:  ADDU      V0, V0, V1
  1F0:  SUBU      A1, A1, V0
  1F4:  ADDIU     A1, A1, 1
  1F8:  SLL       A1, A1, F
  1FC:  MULT      A2, A1
  200:  SRL       A0, A0, E
  204:  SLL       A0, A0, F
  208:  MFLO      V1
  20C:  ADDU      A0, V1, A0
  210:  ADDU      A0, A0, S0
  214:  JAL       800645F0
  218:  ANDI      A0, A0, FFFF
  21C:  SLL       V0, V0, 10
  220:  SRA       V0, V0, 10
  224:  LBU       V1, 0 (S1)
  228:  ADDU      V0, V0, S6
  22C:  MULT      V1, V0
  230:  MFLO      V1
  234:  BGEZ      V1, .o244
  238:  ADDIU     A0, S1, 2
  23C:  ORI       V0, R0, FFFF
  240:  ADDU      V1, V1, V0
        .o244
  244:  SRA       V0, V1, 10
  248:  LAD       F2, $ConstDouble_80225FD0
  250:  MTC1      V0, F0
  254:  NOP
  258:  CVT.D.W   F0, F0
  25C:  ADD.D     F0, F0, F2
  260:  C.LE.D    F20, F0
  264:  NOP
  268:  BC1TL     .o280
  26C:  SUB.D     F0, F0, F20
  270:  TRUNC.W.D F4, F0
  274:  MFC1      V0, F4
  278:  BEQ       R0, R0, .o294
  27C:  SB        V0, 0 (A0)
        .o280
  280:  TRUNC.W.D F4, F0
  284:  MFC1      V0, F4
  288:  NOP
  28C:  OR        V0, V0, S5
  290:  SB        V0, 0 (A0)
        .o294
  294:  LW        V0, 18 (SP)
  298:  ADDIU     S0, S0, 1
  29C:  SLT       V0, S0, V0
  2A0:  BNE       V0, R0, .o7C
  2A4:  MULT      S0, S3
        .o2A8
  2A8:  LIA       V1, 8009A66C
  2B0:  LW        V0, 0 (V1)
  2B4:  DADDU     A0, S2, R0
  2B8:  DADDU     S0, V0, R0
  2BC:  ADDIU     V0, V0, 8
  2C0:  SW        V0, 0 (V1)
  2C4:  LUI       V0, DE00
  2C8:  JAL       8011C2EC
  2CC:  SW        V0, 0 (S0)
  2D0:  SW        V0, 4 (S0)
  2D4:  LIA       V0, $???_80224BB0
  2DC:  SLL       V1, S2, 1
  2E0:  ADDU      V1, V1, V0
  2E4:  LHU       V0, 0 (V1)
  2E8:  ADDIU     V0, V0, 253
  2EC:  SH        V0, 0 (V1)
  2F0:  LW        RA, 3C (SP)
  2F4:  LW        S6, 38 (SP)
  2F8:  LW        S5, 34 (SP)
  2FC:  LW        S4, 30 (SP)
  300:  LW        S3, 2C (SP)
  304:  LW        S2, 28 (SP)
  308:  LW        S1, 24 (SP)
  30C:  LW        S0, 20 (SP)
  310:  LDC1      F20, 40 (SP)
  314:  JR        RA
  318:  ADDIU     SP, SP, 48

% Origin: HEURISTIC
#new:Function $Function_80218CEC
    0:  ADDIU     SP, SP, FFB8
    4:  SW        S2, 28 (SP)
    8:  ADDIU     S2, A0, FFFF
    C:  DADDU     A0, S2, R0
   10:  ADDIU     A1, SP, 10
   14:  ADDIU     A2, SP, 14
   18:  SW        RA, 3C (SP)
   1C:  SW        S6, 38 (SP)
   20:  SW        S5, 34 (SP)
   24:  SW        S4, 30 (SP)
   28:  SW        S3, 2C (SP)
   2C:  SW        S1, 24 (SP)
   30:  SW        S0, 20 (SP)
   34:  SDC1      F20, 40 (SP)
   38:  JAL       8011C2B0
   3C:  ADDIU     A3, SP, 18
   40:  LW        V0, 18 (SP)
   44:  BLEZ      V0, .o2A8
   48:  DADDU     S0, R0, R0
   4C:  LIA       V1, $???_80224BB0
   54:  SLL       V0, S2, 1
   58:  ADDU      S4, V0, V1
   5C:  LIO       S3, 55555556
   64:  ORI       S6, R0, 8000
   68:  LIF       F21, 28.0
   70:  MTC1      R0, F20
   74:  LUI       S5, 8000
   78:  MULT      S0, S3
        .o7C
   7C:  SRA       V1, S0, 1F
   80:  MFHI      T1
   84:  SUBU      V1, T1, V1
   88:  SLL       V0, V1, 1
   8C:  ADDU      V0, V0, V1
   90:  SUBU      V0, S0, V0
   94:  LHU       V1, 0 (S4)
   98:  ADDIU     V0, V0, 1
   9C:  MULT      V1, V0
   A0:  LW        V0, 14 (SP)
   A4:  MFLO      V1
   A8:  ADDU      A0, V1, S0
   AC:  ANDI      A0, A0, FFFF
   B0:  SLL       V1, S0, 4
   B4:  ADDU      V0, V0, V1
   B8:  JAL       800645F0
   BC:  ADDIU     S1, V0, C
   C0:  SLL       V0, V0, 10
   C4:  SRA       V0, V0, 10
   C8:  ADDU      V0, V0, S6
   CC:  SRL       V1, V0, 1F
   D0:  ADDU      V0, V0, V1
   D4:  SRA       V0, V0, 1
   D8:  SLL       V1, V0, 10
   DC:  SRA       V1, V1, 10
   E0:  SLL       A0, V1, 2
   E4:  ADDU      A0, A0, V1
   E8:  SLL       V1, A0, 5
   EC:  SUBU      V1, V1, A0
   F0:  BGEZ      V1, .oFC
   F4:  DADDU     A0, V0, R0
   F8:  ADDIU     V1, V1, 7FFF
        .oFC
   FC:  SRA       V0, V1, F
  100:  LIF       F3, 3.390625
  108:  MTC1      R0, F2
  10C:  MTC1      V0, F0
  110:  NOP
  114:  CVT.D.W   F0, F0
  118:  ADD.D     F0, F0, F2
  11C:  C.LE.D    F20, F0
  120:  NOP
  124:  BC1TL     .o13C
  128:  SUB.D     F0, F0, F20
  12C:  TRUNC.W.D F4, F0
  130:  MFC1      V0, F4
  134:  BEQ       R0, R0, .o150
  138:  SB        V0, 0 (S1)
        .o13C
  13C:  TRUNC.W.D F4, F0
  140:  MFC1      V0, F4
  144:  NOP
  148:  OR        V0, V0, S5
  14C:  SB        V0, 0 (S1)
        .o150
  150:  SLL       V0, A0, 10
  154:  SRA       V0, V0, 10
  158:  SLL       V1, V0, 2
  15C:  ADDU      V1, V1, V0
  160:  SLL       V0, V1, 5
  164:  SUBU      V0, V0, V1
  168:  BGEZ      V0, .o174
  16C:  ADDIU     V1, S1, 1
  170:  ADDIU     V0, V0, 7FFF
        .o174
  174:  SRA       V0, V0, F
  178:  LAD       F2, $ConstDouble_80225FD8
  180:  MTC1      V0, F0
  184:  NOP
  188:  CVT.D.W   F0, F0
  18C:  ADD.D     F0, F0, F2
  190:  C.LE.D    F20, F0
  194:  NOP
  198:  BC1TL     .o1B0
  19C:  SUB.D     F0, F0, F20
  1A0:  TRUNC.W.D F4, F0
  1A4:  MFC1      V0, F4
  1A8:  BEQ       R0, R0, .o1C4
  1AC:  SB        V0, 0 (V1)
        .o1B0
  1B0:  TRUNC.W.D F4, F0
  1B4:  MFC1      V0, F4
  1B8:  NOP
  1BC:  OR        V0, V0, S5
  1C0:  SB        V0, 0 (V1)
        .o1C4
  1C4:  SRL       V1, S0, 1F
  1C8:  ADDU      V1, S0, V1
  1CC:  SRA       A1, V1, 1
  1D0:  MULT      A1, S3
  1D4:  LHU       A0, 0 (S4)
  1D8:  SRA       V1, V1, 1F
  1DC:  SRL       A2, A0, F
  1E0:  MFHI      T1
  1E4:  SUBU      V1, T1, V1
  1E8:  SLL       V0, V1, 1
  1EC:  ADDU      V0, V0, V1
  1F0:  SUBU      A1, A1, V0
  1F4:  ADDIU     A1, A1, 1
  1F8:  SLL       A1, A1, F
  1FC:  MULT      A2, A1
  200:  SRL       A0, A0, E
  204:  SLL       A0, A0, F
  208:  MFLO      V1
  20C:  ADDU      A0, V1, A0
  210:  ADDU      A0, A0, S0
  214:  JAL       800645F0
  218:  ANDI      A0, A0, FFFF
  21C:  SLL       V0, V0, 10
  220:  SRA       V0, V0, 10
  224:  LBU       V1, 0 (S1)
  228:  ADDU      V0, V0, S6
  22C:  MULT      V1, V0
  230:  MFLO      V1
  234:  BGEZ      V1, .o244
  238:  ADDIU     A0, S1, 2
  23C:  ORI       V0, R0, FFFF
  240:  ADDU      V1, V1, V0
        .o244
  244:  SRA       V0, V1, 10
  248:  LAD       F2, $ConstDouble_80225FE0
  250:  MTC1      V0, F0
  254:  NOP
  258:  CVT.D.W   F0, F0
  25C:  ADD.D     F0, F0, F2
  260:  C.LE.D    F20, F0
  264:  NOP
  268:  BC1TL     .o280
  26C:  SUB.D     F0, F0, F20
  270:  TRUNC.W.D F4, F0
  274:  MFC1      V0, F4
  278:  BEQ       R0, R0, .o294
  27C:  SB        V0, 0 (A0)
        .o280
  280:  TRUNC.W.D F4, F0
  284:  MFC1      V0, F4
  288:  NOP
  28C:  OR        V0, V0, S5
  290:  SB        V0, 0 (A0)
        .o294
  294:  LW        V0, 18 (SP)
  298:  ADDIU     S0, S0, 1
  29C:  SLT       V0, S0, V0
  2A0:  BNE       V0, R0, .o7C
  2A4:  MULT      S0, S3
        .o2A8
  2A8:  LIA       V1, 8009A66C
  2B0:  LW        V0, 0 (V1)
  2B4:  DADDU     A0, S2, R0
  2B8:  DADDU     S0, V0, R0
  2BC:  ADDIU     V0, V0, 8
  2C0:  SW        V0, 0 (V1)
  2C4:  LUI       V0, DE00
  2C8:  JAL       8011C2EC
  2CC:  SW        V0, 0 (S0)
  2D0:  SW        V0, 4 (S0)
  2D4:  LIA       V0, $???_80224BB0
  2DC:  SLL       V1, S2, 1
  2E0:  ADDU      V1, V1, V0
  2E4:  LHU       V0, 0 (V1)
  2E8:  ADDIU     V0, V0, 253
  2EC:  SH        V0, 0 (V1)
  2F0:  LW        RA, 3C (SP)
  2F4:  LW        S6, 38 (SP)
  2F8:  LW        S5, 34 (SP)
  2FC:  LW        S4, 30 (SP)
  300:  LW        S3, 2C (SP)
  304:  LW        S2, 28 (SP)
  308:  LW        S1, 24 (SP)
  30C:  LW        S0, 20 (SP)
  310:  LDC1      F20, 40 (SP)
  314:  JR        RA
  318:  ADDIU     SP, SP, 48

PADDING: 80219008 to 80219010 (004800B8 to 004800C0)
00000000 00000000 

#new:IdleAnimations $IdleAnimations_80219010
.Status:Normal    00090001
.Status:Stone     00090000
.Status:Sleep     00090000
.Status:Poison    00090001
.Status:Stop      00090000
.Status:Static    00090000
.Status:Paralyze  00090000
.Status:Dizzy     00090000
.Status:Dizzy     00090000
.Status:End

#new:DefenseTable $DefenseTable_8021905C
.Element:Normal 00000000
.Element:End

#new:StatusTable $StatusTable_80219068
.Status:Normal      0`
.Status:Default     0`
.Status:Sleep       0`
.Status:Poison      0`
.Status:Frozen      0`
.Status:Dizzy       0`
.Status:Fear        0`
.Status:Static      0`
.Status:Paralyze    0`
.Status:Shrink      0`
.Status:Stop        0`
.Status:DefaultTurnMod    0`
.Status:SleepTurnMod      0`
.Status:PoisonTurnMod     0`
.Status:FrozenTurnMod     0`
.Status:DizzyTurnMod      0`
.Status:FearTurnMod       0`
.Status:StaticTurnMod     0`
.Status:ParalyzeTurnMod   0`
.Status:ShrinkTurnMod     0`
.Status:StopTurnMod       0`
.Status:End

#new:SpriteTable $SpriteTable_80219114
00800000 01000000 FC1800FF $IdleAnimations_80219010 $DefenseTable_8021905C 00000000 00000000 00000000 00000000 

#new:Actor $GoombarioTutor1
% stats
[Index]        94b 
[Level]        99`b 
[MaxHP]        99`b 
[Coins]         0`b 
[Flags]       00040000 
[StatusTable] $StatusTable_80219068 
% ai
[SpriteCount]   1`s 
[SpriteTable] $SpriteTable_80219114 
[Script]      $Script_Init_80219160 
% move effectiveness
[Escape]        0`b 
[Item]          0`b 
[AirLift]       0`b 
[Hurricane]     0`b % Bow's "Spook" as well
[UpAndAway]     0`b 
[PowerBounce] 100`b 
[SpinSmash]     0`b % weight (0-4)
% ui positions
[Size]         24`b  32`b % width height
[HealthBar]     0`b   0`b % dx dy
[StatusTurn]  -10`b  20`b % dx dy
[StatusIcon]   10`b  20`b % dx dy

#new:Script $Script_Init_80219160
    0:  Call     BindTakeTurn 	( .Actor:Self $Script_TakeTurn_80219444 )
   14:  Call     BindIdle    	( .Actor:Self $Script_Idle_802191D0 )
   28:  Call     BindHandleEvent 	( .Actor:Self $Script_HandleEvent_802191E0 )
   3C:  Call     SetActorVar 	( .Actor:Self 00000000 00000001 )
   54:  Exec     $Script_80219C74 
   60:  Return
   68:  End

#new:Script $Script_Idle_802191D0
    0:  Return
    8:  End

#new:Script $Script_HandleEvent_802191E0
    0:  Call     UseIdleAnimation 	( .Actor:Self .False )
   14:  Thread
   1C:  	Call     8026BF48 ( 00000001 )
   2C:  	Call     GetEventType 	( .Actor:Self *Var[0] )
   40:  	Switch  *Var[0] 
   4C:  		Case  ==  .Event:Hit
   58:  			Call     GetActorVar 	( .Actor:Self 00000000 *Var[0] )
   70:  			If  *Var[0]  ==  00000000 
   80:  				Call     RandInt     	( 00000002 *Var[0] )
   94:  				Switch  *Var[0] 
   A0:  					Case  ==  00000000 
   AC:  						Call     SayMessage  	( 000A002D .Actor:Self 00000001 0009000A 00090002 ) % Ouch! 
   CC:  					Case  ==  00000001 
   D8:  						Call     SayMessage  	( 000A002E .Actor:Self 00000001 0009000A 00090002 ) % Ow! 
   F8:  					Case  ==  00000002 
  104:  				EndSwitch
  10C:  			EndIf
  114:  	EndSwitch
  11C:  	Call     8026BF48 ( 00000000 )
  12C:  EndThread
  134:  Call     GetEventType 	( .Actor:Self *Var[0] )
  148:  Switch  *Var[0] 
  154:  	CaseOR  ==  .Event:HitCombo
  160:  	CaseOR  ==  .Event:Hit
  16C:  		SetConst  *Var[0]  00000001 
  17C:  		SetConst  *Var[1]  0009000A 
  18C:  		ExecWait DoNormalHit 
  198:  	EndCaseGroup
  1A0:  	CaseOR  ==  00000017
  1AC:  	CaseOR  ==  .Event:Immune
  1B8:  		SetConst  *Var[0]  00000001 
  1C8:  		SetConst  *Var[1]  00090001 
  1D8:  		ExecWait DoImmune 
  1E4:  	EndCaseGroup
  1EC:  	Case  ==  00000030
  1F8:  		SetConst  *Var[0]  00000001 
  208:  		SetConst  *Var[1]  0009000A 
  218:  		ExecWait DoNormalHit 
  224:  		Wait     000003E8 
  230:  	Default
  238:  EndSwitch
  240:  Call     UseIdleAnimation 	( .Actor:Self .True )
  254:  Return
  25C:  End

#new:Script $Script_TakeTurn_80219444
    0:  Call     UseIdleAnimation 	( .Actor:Self .False )
   14:  Call     EnableIdleScript 	( .Actor:Self 00000000 )
   28:  Call     SetTargetActor ( .Actor:Self .Actor:Player )
   3C:  Call     UseCamPreset 	( 0000003F )
   4C:  Call     SetCamZoom  	( 00000190 )
   5C:  Call     SetCamOffsetZ 	( 00000028 )
   6C:  Call     CamTargetActor ( .Actor:Self )
   7C:  Call     SetAnimation 	( .Actor:Self 00000001 00090003 )
   94:  Call     SetGoalToTarget 	( .Actor:Self )
   A4:  Call     AddToGoalPos 	( .Actor:Self 00000032 00000000 00000000 )
   C0:  Call     SetActorSpeed 	( .Actor:Self *Fixed[6.0] )
   D4:  Call     RunToGoal   	( .Actor:Self 00000000 .False )
   EC:  Call     SetAnimation 	( .Actor:Self 00000001 00090001 )
  104:  Call     8026BA04 ( FFFFFF81 00000000 FFFFFFFF 00000000 )
  120:  Wait     00000001 
  12C:  Call     8026BA04 ( FFFFFF81 00000000 FFFFFFFE 00000000 )
  148:  Wait     00000005 
  154:  Call     8026BA04 ( FFFFFF81 00000000 0000000A 00000000 )
  170:  Call     SetAnimation 	( .Actor:Self 00000001 00090006 )
  188:  Call     UseCamPreset 	( 00000042 )
  198:  Call     SetCamZoom  	( 00000190 )
  1A8:  Call     SetCamOffsetZ 	( 00000028 )
  1B8:  Call     8024ECF8 ( FFFFFFFF 00000001 00000000 )
  1D0:  Call     CamTargetActor ( .Actor:Self )
  1E0:  Call     SetGoalToTarget 	( .Actor:Self )
  1F0:  Call     AddToGoalPos 	( .Actor:Self FFFFFFF6 00000000 00000000 )
  20C:  Call     GetBattleFlags2 	( *Var[0] )
  21C:  If  *Var[0]  &  00000200 
  22C:  	Call     AddToGoalPos 	( .Actor:Self 00000005 0000000A 00000000 )
  248:  EndIf
  250:  Call     SetActorJumpscale 	( .Actor:Self *Fixed[1.1005859] )
  264:  Thread
  26C:  	Wait     00000004 
  278:  	Set  *Var[0]  00000000 
  288:  	Loop     00000004 
  294:  		Add  *Var[0]  0000002D 
  2A4:  		Call     SetActorRotation 	( .Actor:Self 00000000 00000000 *Var[0] )
  2C0:  		Wait     00000001 
  2CC:  	EndLoop
  2D4:  	Call     SetAnimation 	( .Actor:Self 00000001 00090006 )
  2EC:  EndThread
  2F4:  Thread
  2FC:  	Call     LoadActionCommand 	( 00000001 )
  30C:  	Call     802A9000 ( )
  318:  	Call     802694A4 ( 00000001 )
  328:  	Wait     0000000A 
  334:  	Call     802A9120 ( 0000000C 00000003 )
  348:  EndThread
  350:  Call     PlaySound   	( 000003E2 )
  360:  Call     JumpToGoal  	( .Actor:Self 00000016 00000000 00000001 00000000 )
  380:  Call     SetAnimation 	( .Actor:Self 00000001 00090006 )
  398:  Call     SetActorScale 	( .Actor:Self *Fixed[1.1005859] *Fixed[0.80078125] *Fixed[1.0] )
  3B4:  Wait     00000001 
  3C0:  Call     SetActorScale 	( .Actor:Self *Fixed[1.3007812] *Fixed[0.5] *Fixed[1.0] )
  3DC:  Wait     00000001 
  3E8:  Call     80269318 ( *Var[0] )
  3F8:  If  *Var[0]  ==  00000002 
  408:  	Call     802692EC ( 00000003 )
  418:  	Loop     
  424:  		Call     80269318 ( *Var[0] )
  434:  		If  *Var[0]  <  00000002 
  444:  			BreakLoop
  44C:  		EndIf
  454:  		Wait     00000001 
  460:  	EndLoop
  468:  EndIf
  470:  Call     GetActorVar 	( .Actor:Self 00000000 *Var[0] )
  488:  If  *Var[0]  ==  00000001 
  498:  	Call     80269EAC ( 00000005 )
  4A8:  EndIf
  4B0:  Wait     00000002 
  4BC:  Call     DamageTarget 	( .Actor:Self *Var[0] 00000000 00000000 00000000 00000001 00000020 )
  4E4:  Call     80269410 ( )
  4F0:  Set  *Var[F]  *Var[0] 
  500:  Switch  *Var[F] 
  50C:  	CaseOR  ==  00000000 
  518:  	CaseOR  ==  00000002 
  524:  	CaseOR  ==  0000000A 
  530:  		Call     SetActorScale 	( .Actor:Self *Fixed[1.1005859] *Fixed[0.80078125] *Fixed[1.0] )
  54C:  		Wait     00000001 
  558:  		Call     SetActorScale 	( .Actor:Self *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
  574:  		Wait     00000001 
  580:  		Call     SetActorRotation 	( .Actor:Self 00000000 00000000 00000000 )
  59C:  		Call     8026BA04 ( FFFFFF81 00000000 00000000 00000000 )
  5B8:  		Call     SetAnimation 	( .Actor:Self 00000001 00090001 )
  5D0:  		Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  5EC:  		Add  *Var[0]  00000028 
  5FC:  		Set  *Var[1]  00000000 
  60C:  		Call     SetActorJumpscale 	( .Actor:Self *Fixed[1.8007812] )
  620:  		Call     SetGoalToPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  63C:  		Call     JumpToGoal  	( .Actor:Self 0000000A 00000000 00000001 00000000 )
  65C:  		Add  *Var[0]  0000001E 
  66C:  		Call     SetGoalToPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  688:  		Call     JumpToGoal  	( .Actor:Self 00000008 00000000 00000001 00000000 )
  6A8:  		Add  *Var[0]  00000014 
  6B8:  		Call     SetGoalToPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  6D4:  		Call     JumpToGoal  	( .Actor:Self 00000006 00000000 00000001 00000000 )
  6F4:  		Sub  *Var[0]  0000000A 
  704:  		Call     JumpToGoal  	( .Actor:Self 00000004 00000000 00000001 00000000 )
  724:  		Call     SetAnimation 	( .Actor:Self 00000001 00090001 )
  73C:  		Wait     00000008 
  748:  		Call     UseCamPreset 	( 00000002 )
  758:  		Call     8027D7F0 ( )
  764:  		Call     SetAnimation 	( .Actor:Self 00000001 00090001 )
  77C:  		Call     SetGoalToHome 	( .Actor:Self )
  78C:  		Call     SetActorSpeed 	( .Actor:Self *Fixed[4.0] )
  7A0:  		Call     SetAnimation 	( .Actor:Self 00000001 00090003 )
  7B8:  		Call     RunToGoal   	( .Actor:Self 00000000 .False )
  7D0:  		Call     SetAnimation 	( .Actor:Self 00000001 00090001 )
  7E8:  	EndCaseGroup
  7F0:  EndSwitch
  7F8:  Call     EnableIdleScript 	( .Actor:Self 00000001 )
  80C:  Call     UseIdleAnimation 	( .Actor:Self .True )
  820:  Return
  828:  End

#new:Script $Script_80219C74
    0:  Call     SetBattleFlagBits 	( 02000000 .True )
   14:  Call     802535B4 ( 00000000 )
   24:  Call     8026E198 ( 0000000D )
   34:  Wait     0000000F 
   40:  Call     UseIdleAnimation 	( .Actor:Partner .False )
   54:  Call     EnableIdleScript 	( .Actor:Partner 00000000 )
   68:  Call     SetActorJumpscale 	( .Actor:Partner *Fixed[1.0] )
   7C:  Call     GetActorPos 	( .Actor:Partner *Var[0] *Var[1] *Var[2] )
   98:  Call     SetGoalToPos 	( .Actor:Partner *Var[0] *Var[1] *Var[2] )
   B4:  Call     JumpToGoal  	( .Actor:Partner 0000000A 00000000 00000000 00000000 )
   D4:  Call     UseIdleAnimation 	( .Actor:Partner .False )
   E8:  Call     SayMessage  	( 000A0019 .Actor:Partner 00000001 00200009 00200005 ) % First, Mario, choose the Jump command and then dec ...
  108:  Call     UseIdleAnimation 	( .Actor:Partner .True )
  11C:  Call     8026E020 ( 00000001 )
  12C:  Call     802692EC ( 00000002 )
  13C:  Call     8026E198 ( 00000012 )
  14C:  Call     UseCamPreset 	( 00000002 )
  15C:  Wait     0000000F 
  168:  Call     SetGoalToPos 	( .Actor:Partner FFFFFFB7 00000028 000000CA )
  184:  Call     MoveToGoal  	( .Actor:Partner 00000014 00000014 .Easing:CosInOut )
  1A0:  Call     UseIdleAnimation 	( .Actor:Partner .False )
  1B4:  Call     SayMessage  	( 000A001A .Actor:Partner 00000001 00200009 00200005 ) % Once you decide on the enemy, the explanation of t ...
  1D4:  Call     UseIdleAnimation 	( .Actor:Partner .True )
  1E8:  Call     802692EC ( 00000001 )
  1F8:  Call     SetBattleFlagBits 	( 00004000 .False )
  20C:  Call     80251408 ( FFFFFFFF )
  21C:  Thread
  224:  	Loop     0000000F 
  230:  		Call     80251408 ( 00000023 )
  240:  		Wait     00000001 
  24C:  	EndLoop
  254:  EndThread
  25C:  Wait     0000000F 
  268:  Call     SetGoalToHome 	( .Actor:Partner )
  278:  Call     MoveToGoal  	( .Actor:Partner 00000014 00000014 .Easing:CosInOut )
  294:  Call     802692EC ( 00000002 )
  2A4:  Call     8026E198 ( 00000000 )
  2B4:  Call     SetBattleFlagBits2 	( 00000200 .True )
  2C8:  Loop     
  2D4:  	Call     80269318 ( *Var[0] )
  2E4:  	If  *Var[0]  !=  00000002 
  2F4:  		BreakLoop
  2FC:  	EndIf
  304:  	Wait     00000001 
  310:  EndLoop
  318:  Call     UseIdleAnimation 	( .Actor:Partner .False )
  32C:  Call     SayMessage  	( 000A001B .Actor:Partner 00000001 00200009 00200005 ) % Right now! Just before stomping the enemy. Press   ...
  34C:  Loop     
  358:  	Call     8026E108 ( 00008000 *Var[0] )
  36C:  	If  *Var[0]  ==  00000000 
  37C:  		BreakLoop
  384:  	EndIf
  38C:  	Wait     00000001 
  398:  EndLoop
  3A0:  Loop     
  3AC:  	Call     8026E098 ( 00008000 *Var[0] )
  3C0:  	If  *Var[0]  ==  00000001 
  3D0:  		BreakLoop
  3D8:  	EndIf
  3E0:  	Wait     00000001 
  3EC:  EndLoop
  3F4:  Call     802532D0 ( 00000100 00000001 00200009 00200005 )
  410:  Call     UseIdleAnimation 	( .Actor:Partner .True )
  424:  Call     802692C0 ( 00000001 )
  434:  Call     802692EC ( 00000001 )
  444:  Call     8026E198 ( 00000008 )
  454:  Call     UseCamPreset 	( 00000002 )
  464:  Wait     0000000F 
  470:  Call     UseIdleAnimation 	( .Actor:Partner .False )
  484:  Call     SayMessage  	( 000A001D .Actor:Partner 00000001 00200009 00200005 ) % When you see "Nice" appear, it means you've succes ...
  4A4:  Call     UseIdleAnimation 	( .Actor:Partner .True )
  4B8:  Call     8026E198 ( 00000009 )
  4C8:  Call     UseCamPreset 	( 00000002 )
  4D8:  Wait     0000000F 
  4E4:  Call     UseIdleAnimation 	( .Actor:Partner .False )
  4F8:  Call     SayMessage  	( 000A001E .Actor:Enemy0 00000001 0009000F 00090001 ) % OK! Here it comes, Mario!
  518:  Call     UseIdleAnimation 	( .Actor:Partner .True )
  52C:  Call     802692EC ( 00000002 )
  53C:  Call     8026E198 ( 00000000 )
  54C:  Loop     
  558:  	Call     80269318 ( *Var[0] )
  568:  	If  *Var[0]  !=  00000002 
  578:  		BreakLoop
  580:  	EndIf
  588:  	Wait     00000001 
  594:  EndLoop
  59C:  Call     UseIdleAnimation 	( .Actor:Partner .False )
  5B0:  Call     SayMessage  	( 000A001F .Actor:Partner 00000001 00200009 00200005 ) % Right now! Press  just before the attack strikes y ...
  5D0:  Loop     
  5DC:  	Call     8026E108 ( 00008000 *Var[0] )
  5F0:  	If  *Var[0]  ==  00000000 
  600:  		BreakLoop
  608:  	EndIf
  610:  	Wait     00000001 
  61C:  EndLoop
  624:  Loop     
  630:  	Call     8026E098 ( 00008000 *Var[0] )
  644:  	If  *Var[0]  ==  00000001 
  654:  		BreakLoop
  65C:  	EndIf
  664:  	Wait     00000001 
  670:  EndLoop
  678:  Call     802532D0 ( 00000100 00000001 00200009 00200005 )
  694:  Call     UseIdleAnimation 	( .Actor:Partner .True )
  6A8:  Call     802692C0 ( 00000001 )
  6B8:  Call     802692EC ( FFFFFFFF )
  6C8:  Call     8026E198 ( 00000006 )
  6D8:  Call     UseCamPreset 	( 00000002 )
  6E8:  Wait     0000000F 
  6F4:  Call     802692EC ( 00000001 )
  704:  Call     UseIdleAnimation 	( .Actor:Partner .False )
  718:  Call     SayMessage  	( 000A0020 .Actor:Partner 00000001 00200009 00200005 ) % Yes! You successfully used the action command. Thi ...
  738:  Call     UseIdleAnimation 	( .Actor:Partner .True )
  74C:  Call     8026E198 ( 0000000D )
  75C:  Call     8026E020 ( 00000002 )
  76C:  Call     802692EC ( 00000002 )
  77C:  Call     8026E198 ( 00000012 )
  78C:  Call     UseIdleAnimation 	( .Actor:Partner .False )
  7A0:  Call     SayMessage  	( 000A0022 .Actor:Partner 00000001 00200009 00200005 ) % Once you choose an enemy to attack, move the Contr ...
  7C0:  Loop     
  7CC:  	Call     8026E108 ( 00040000 *Var[0] )
  7E0:  	If  *Var[0]  ==  00000000 
  7F0:  		BreakLoop
  7F8:  	EndIf
  800:  	Wait     00000001 
  80C:  EndLoop
  814:  Loop     
  820:  	Call     8026E098 ( 00040000 *Var[0] )
  834:  	If  *Var[0]  ==  00000001 
  844:  		BreakLoop
  84C:  	EndIf
  854:  	Wait     00000001 
  860:  EndLoop
  868:  Call     802532D0 ( 00000100 00000001 00200009 00200005 )
  884:  Call     UseIdleAnimation 	( .Actor:Partner .True )
  898:  Call     802692EC ( 00000001 )
  8A8:  Call     8026E198 ( 00000000 )
  8B8:  Wait     00000005 
  8C4:  Call     802692EC ( 00000002 )
  8D4:  Loop     
  8E0:  	Call     80269318 ( *Var[0] )
  8F0:  	If  *Var[0]  !=  00000002 
  900:  		BreakLoop
  908:  	EndIf
  910:  	Call     8026E108 ( 00040000 *Var[0] )
  924:  	If  *Var[0]  ==  00000000 
  934:  		Call     802692EC ( FFFFFFFF )
  944:  		Call     802789A4 ( 00000000 )
  954:  		Call     UseIdleAnimation 	( .Actor:Partner .False )
  968:  		Call     SayMessage  	( 000A0023 .Actor:Partner 00000001 00200009 00200005 ) % Move the Control Stick to the left and keep it the ...
  988:  		Loop     
  994:  			Call     8026E098 ( 00040000 *Var[0] )
  9A8:  			If  *Var[0]  ==  00000001 
  9B8:  				BreakLoop
  9C0:  			EndIf
  9C8:  			Wait     00000001 
  9D4:  		EndLoop
  9DC:  		Call     802532D0 ( 00000100 00000001 00200009 00200005 )
  9F8:  		Call     UseIdleAnimation 	( .Actor:Partner .True )
  A0C:  		Call     802692EC ( 00000002 )
  A1C:  		Call     80278A1C ( 00000000 )
  A2C:  	EndIf
  A34:  	Wait     00000001 
  A40:  EndLoop
  A48:  Loop     
  A54:  	Call     802695A8 ( *Var[0] )
  A64:  	If  *Var[0]  ==  00000003 
  A74:  		BreakLoop
  A7C:  	EndIf
  A84:  	Wait     00000001 
  A90:  EndLoop
  A98:  Call     UseIdleAnimation 	( .Actor:Partner .False )
  AAC:  Call     SayMessage  	( 000A0024 .Actor:Partner 00000001 00200009 00200005 ) %  flashes as soon as your power reaches its maximum ...
  ACC:  Loop     
  AD8:  	Call     8026E108 ( 00040000 *Var[0] )
  AEC:  	If  *Var[0]  ==  00000000 
  AFC:  		BreakLoop
  B04:  	EndIf
  B0C:  	Wait     00000001 
  B18:  EndLoop
  B20:  Call     802532D0 ( 00000100 00000001 00200009 00200005 )
  B3C:  Call     UseIdleAnimation 	( .Actor:Partner .True )
  B50:  Call     802692C0 ( 00000001 )
  B60:  Call     802692EC ( 00000001 )
  B70:  Call     8026E198 ( 00000008 )
  B80:  Call     UseCamPreset 	( 00000002 )
  B90:  Wait     0000000F 
  B9C:  Call     UseIdleAnimation 	( .Actor:Partner .False )
  BB0:  Call     SayMessage  	( 000A0025 .Actor:Partner 00000001 00200009 00200005 ) % All right! You successfully used the action comman ...
  BD0:  Call     UseIdleAnimation 	( .Actor:Partner .True )
  BE4:  Call     SetActorFlagBits 	( .Actor:Enemy0 00200000 .True )
  BFC:  Call     8026E198 ( 00000000 )
  C0C:  Call     8026E198 ( 0000000D )
  C1C:  Call     80253538 ( 001E001D )
  C2C:  Call     802532D0 ( 00000100 00000001 00200009 00200005 )
  C48:  If  *Var[0]  ==  00000001 
  C58:  	Call     SayMessage  	( 000A0027 .Actor:Partner 00000001 00200009 00200005 ) % You don't need to practice anymore...? That's our  ...
  C78:  	Goto     00000064 
  C84:  EndIf
  C8C:  Call     UseIdleAnimation 	( .Actor:Partner .False )
  CA0:  Call     SayMessage  	( 000A0028 .Actor:Partner 00000001 00200009 00200005 ) % The action command will serve you well, so practic ...
  CC0:  Call     UseIdleAnimation 	( .Actor:Partner .True )
  CD4:  Call     SetActorVar 	( .Actor:Self 00000000 00000000 )
  CEC:  Call     SetBattleFlagBits2 	( 00000200 .False )
  D00:  Label    0000000A 
  D0C:  Call     8026E020 ( 00000083 )
  D1C:  Call     802692EC ( 00000002 )
  D2C:  Call     8026E198 ( 00000012 )
  D3C:  Call     GetMenuSelection 	( *Var[0] *Var[1] *Var[2] )
  D54:  If  *Var[0]  ==  00000007 
  D64:  	Goto     00000063 
  D70:  EndIf
  D78:  Call     802692EC ( 00000001 )
  D88:  Call     8026E198 ( 00000008 )
  D98:  Call     UseIdleAnimation 	( .Actor:Partner .False )
  DAC:  Call     80269524 ( *Var[0] )
  DBC:  Switch  *Var[0] 
  DC8:  	Case  ==  FFFFFFFF 
  DD4:  		Call     SayMessage  	( 000A002A .Actor:Partner 00000001 00200009 00200005 ) % Almost!! That was a little bit too early.
  DF4:  	Case  ==  00000000 
  E00:  		Call     SayMessage  	( 000A002B .Actor:Partner 00000001 00200009 00200005 ) % Almost!! That was a little bit too late.
  E20:  	Case  ==  00000001 
  E2C:  		Call     SayMessage  	( 000A0029 .Actor:Partner 00000001 00200009 00200005 ) % Well done, Mario!! You successfully used the actio ...
  E4C:  EndSwitch
  E54:  Call     UseIdleAnimation 	( .Actor:Partner .True )
  E68:  Call     SetEnemyHP  	( .Actor:Enemy0 00000063 )
  E7C:  Call     SetActorFlagBits 	( .Actor:Enemy0 00200000 .False )
  E94:  Call     802692EC ( 00000001 )
  EA4:  Call     8026E198 ( 00000006 )
  EB4:  Call     UseIdleAnimation 	( .Actor:Partner .False )
  EC8:  Call     8026957C ( *Var[0] )
  ED8:  Switch  *Var[0] 
  EE4:  	Case  ==  FFFFFFFF 
  EF0:  		Call     SayMessage  	( 000A002A .Actor:Partner 00000001 00200009 00200005 ) % Almost!! That was a little bit too early.
  F10:  	Case  ==  00000000 
  F1C:  		Call     SayMessage  	( 000A002B .Actor:Partner 00000001 00200009 00200005 ) % Almost!! That was a little bit too late.
  F3C:  	Case  ==  00000001 
  F48:  		Call     SayMessage  	( 000A0029 .Actor:Partner 00000001 00200009 00200005 ) % Well done, Mario!! You successfully used the actio ...
  F68:  EndSwitch
  F70:  Call     UseIdleAnimation 	( .Actor:Partner .True )
  F84:  Call     8026E198 ( 0000000D )
  F94:  Goto     0000000A 
  FA0:  Label    00000063 
  FAC:  Call     UseIdleAnimation 	( .Actor:Partner .False )
  FC0:  Call     SayMessage  	( 000A002C .Actor:Partner 00000001 00200009 00200005 ) % Well, I guess that's about all I can teach you.
  FE0:  Label    00000064 
  FEC:  Call     8026E198 ( 00000000 )
  FFC:  Call     8026E16C ( 0000001E )
 100C:  Call     $Function_80218000 ( )
 1018:  Wait     00002710 
 1024:  Return
 102C:  End

PADDING: 8021ACA8 to 8021ACB0 (00481D58 to 00481D60)
00000000 00000000 

#new:DefenseTable $DefenseTable_8021ACB0
.Element:Normal 00000000
.Element:Water  FFFFFFFE
.Element:Ice    FFFFFFFE
.Element:Fire   00000063
.Element:End

#new:StatusTable $StatusTable_8021ACD4
.Status:Normal      0`
.Status:Default     0`
.Status:Sleep       0`
.Status:Poison     50`
.Status:Frozen      0`
.Status:Dizzy     100`
.Status:Fear        0`
.Status:Static     50`
.Status:Paralyze    0`
.Status:Shrink     90`
.Status:Stop       85`
.Status:DefaultTurnMod    0`
.Status:SleepTurnMod      0`
.Status:PoisonTurnMod     0`
.Status:FrozenTurnMod     0`
.Status:DizzyTurnMod      1`
.Status:FearTurnMod       0`
.Status:StaticTurnMod     0`
.Status:ParalyzeTurnMod   0`
.Status:ShrinkTurnMod     0`
.Status:StopTurnMod       0`
.Status:End

#new:SpriteTable $SpriteTable_8021AD80
00800000 01000000 FE1900FF $IdleAnimations_8021AE5C $DefenseTable_8021ACB0 00000002 00000000 FDF60000 00000000 
00120001 02000000 001800FF $IdleAnimations_8021AEA8 $DefenseTable_8021ACB0 00000000 00000000 FFF60000 00000000 
00120001 03000000 001800FF $IdleAnimations_8021AEA8 $DefenseTable_8021ACB0 00000000 00000000 FFF60000 00000000 
00120001 04000000 001800FF $IdleAnimations_8021AEA8 $DefenseTable_8021ACB0 00000000 00000000 FFF60000 00000000 
00120001 05000000 001800FF $IdleAnimations_8021AEA8 $DefenseTable_8021ACB0 00000000 00000000 FFF60000 00000000 

#new:Actor $Ember
% stats
[Index]        45b 
[Level]        24`b 
[MaxHP]        10`b 
[Coins]         2`b 
[Flags]       00000200 
[StatusTable] $StatusTable_8021ACD4 
% ai
[SpriteCount]   5`s 
[SpriteTable] $SpriteTable_8021AD80 
[Script]      $Script_Init_8021AEB4 
% move effectiveness
[Escape]       60`b 
[Item]         50`b 
[AirLift]      80`b 
[Hurricane]    75`b % Bow's "Spook" as well
[UpAndAway]    95`b 
[PowerBounce]  80`b 
[SpinSmash]     0`b % weight (0-4)
% ui positions
[Size]         33`b  32`b % width height
[HealthBar]     0`b   0`b % dx dy
[StatusTurn]  -10`b  20`b % dx dy
[StatusIcon]   10`b  20`b % dx dy

#new:IdleAnimations $IdleAnimations_8021AE5C
.Status:Normal    00460101
.Status:Stone     00460100
.Status:Sleep     00460101
.Status:Poison    00460101
.Status:Stop      00460100
.Status:Static    00460101
.Status:Paralyze  00460100
.Status:Dizzy     0046010A
.Status:Fear      0046010A
.Status:End

#new:IdleAnimations $IdleAnimations_8021AEA8
.Status:Normal    00460101
.Status:End

#new:Script $Script_Init_8021AEB4
    0:  Call     BindTakeTurn 	( .Actor:Self $Script_TakeTurn_8021D284 )
   14:  Call     BindIdle    	( .Actor:Self $Script_Idle_8021B07C )
   28:  Call     BindHandleEvent 	( .Actor:Self $Script_HandleEvent_8021B8BC )
   3C:  Call     GetActorVar 	( .Actor:Self 00000000 *Var[0] )
   54:  Switch  *Var[0] 
   60:  	Case  ==  00000000 
   6C:  		Call     SetActorVar 	( .Actor:Self 00000000 00000001 )
   84:  	Case  ==  00000001 
   90:  		Call     SetActorVar 	( .Actor:Self 00000000 00000000 )
   A8:  EndSwitch
   B0:  Call     SetSpriteScale ( .Actor:Self 00000002 *Fixed[0.5] *Fixed[0.5] *Fixed[0.5] )
   D0:  Call     SetSpriteScale ( .Actor:Self 00000003 *Fixed[0.5] *Fixed[0.5] *Fixed[0.5] )
   F0:  Call     SetSpriteScale ( .Actor:Self 00000004 *Fixed[0.5] *Fixed[0.5] *Fixed[0.5] )
  110:  Call     SetSpriteScale ( .Actor:Self 00000005 *Fixed[0.5] *Fixed[0.5] *Fixed[0.5] )
  130:  Call     SetActorVar 	( .Actor:Self 00000001 00000000 )
  148:  Call     SetActorVar 	( .Actor:Self 00000002 00000000 )
  160:  Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  17C:  Add  *Var[1]  00000005 
  18C:  Call     ForceHomePos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  1A8:  Call     HPBarToHome 	( .Actor:Self )
  1B8:  Return
  1C0:  End

#new:Script $Script_Idle_8021B07C
    0:  Label    00000000 
    C:  Call     MakeLerp    	( 00000000 0000000A 00000019 0000000A )
   28:  Label    00000001 
   34:  Call     UpdateLerp  	( )
   40:  Call     GetHomePos  	( .Actor:Self *Var[2] *Var[3] *Var[4] )
   5C:  Add  *Var[0]  *Var[3] 
   6C:  Call     SetActorPos 	( .Actor:Self *Var[2] *Var[0] *Var[4] )
   88:  If  *Var[1]  ==  00000001 
   98:  	Label    0000000B 
   A4:  	Wait     00000001 
   B0:  	Call     GetStatusFlags ( .Actor:Self *Var[0] )
   C4:  	If  *Var[0]  &  0035D000 
   D4:  		Goto     0000000B 
   E0:  	EndIf
   E8:  	Call     GetActorVar 	( .Actor:Self 00000002 *Var[0] )
  100:  	If  *Var[0]  ==  00000001 
  110:  		Goto     0000000B 
  11C:  	EndIf
  124:  	Goto     00000001 
  130:  EndIf
  138:  Call     MakeLerp    	( 0000000A 00000000 00000019 0000000A )
  154:  Label    00000002 
  160:  Call     UpdateLerp  	( )
  16C:  Call     GetHomePos  	( .Actor:Self *Var[2] *Var[3] *Var[4] )
  188:  Add  *Var[0]  *Var[3] 
  198:  Call     SetActorPos 	( .Actor:Self *Var[2] *Var[0] *Var[4] )
  1B4:  If  *Var[1]  ==  00000001 
  1C4:  	Label    00000016 
  1D0:  	Wait     00000001 
  1DC:  	Call     GetStatusFlags ( .Actor:Self *Var[0] )
  1F0:  	If  *Var[0]  &  0035D000 
  200:  		Goto     00000016 
  20C:  	EndIf
  214:  	Call     GetActorVar 	( .Actor:Self 00000002 *Var[0] )
  22C:  	If  *Var[0]  ==  00000001 
  23C:  		Goto     00000016 
  248:  	EndIf
  250:  	Goto     00000002 
  25C:  EndIf
  264:  Goto     00000000 
  270:  Return
  278:  End

#new:Script $Script_8021B2FC
    0:  Call     SetAnimation 	( .Actor:Self 00000001 00460103 )
   18:  Call     SetGoalToHome 	( .Actor:Self )
   28:  Call     SetActorSpeed 	( .Actor:Self *Fixed[8.0] )
   3C:  Thread
   44:  	Call     $Function_80218020 ( )
   50:  EndThread
   58:  Call     MoveToGoal  	( .Actor:Self 00000000 00000001 .Easing:SinOut )
   74:  Call     SetAnimation 	( .Actor:Self 00000001 00460101 )
   8C:  Return
   94:  End

#new:Script $Script_8021B398
    0:  Call     CreateTargetList 	( 00008002 )
   10:  Call     InitTargetIterator 	( )
   1C:  Label    00000000 
   28:  Call     GetOwnerTarget ( *Var[0] *Var[5] )
   3C:  Call     GetIndexFromHome 	( *Var[0] *Var[5] )
   50:  Mod  *Var[5]  00000004 
   60:  Switch  *Var[5] 
   6C:  	Case  ==  00000000 
   78:  		Set  *Flag[01]  00000001 
   88:  	Case  ==  00000001 
   94:  		Set  *Flag[02]  00000001 
   A4:  	Case  ==  00000002 
   B0:  		Set  *Flag[03]  00000001 
   C0:  	Case  ==  00000003 
   CC:  		Set  *Flag[04]  00000001 
   DC:  EndSwitch
   E4:  Call     ChooseNextTarget 	( .Iter:Next *Var[0] )
   F8:  If  *Var[0]  !=  FFFFFFFF 
  108:  	Goto     00000000 
  114:  EndIf
  11C:  If  *Flag[01]  ==  00000000 
  12C:  	Set  *Var[A]  00000000 
  13C:  	Return
  144:  EndIf
  14C:  If  *Flag[02]  ==  00000000 
  15C:  	Set  *Var[A]  00000001 
  16C:  	Return
  174:  EndIf
  17C:  If  *Flag[03]  ==  00000000 
  18C:  	Set  *Var[A]  00000002 
  19C:  	Return
  1A4:  EndIf
  1AC:  If  *Flag[04]  ==  00000000 
  1BC:  	Set  *Var[A]  00000003 
  1CC:  	Return
  1D4:  EndIf
  1DC:  Set  *Var[A]  FFFFFFFF 
  1EC:  Return
  1F4:  End

#new:Vector3D $Vector3D_8021B594
0` -1000` 0`

#new:SpecialFormation $SpecialFormation_8021B5A0
$Ember $Vector3D_8021B594 00000000 00000000 00000000 00000000 00000000 

#new:Script $Script_Split
    0:  Call     GetLastDamage 	( .Actor:Self *Var[0] )
   14:  If  *Var[0]  ==  00000000 
   24:  	Return
   2C:  EndIf
   34:  Call     GetActorHP  	( .Actor:Self *Var[0] )
   48:  If  *Var[0]  <=  00000000 
   58:  	Return
   60:  EndIf
   68:  Call     GetLastElement ( *Var[0] )
   78:  If  *Var[0]  &  20000000 
   88:  	Return
   90:  EndIf
   98:  Call     GetActorVar 	( .Actor:Self 00000001 *Var[0] )
   B0:  If  *Var[0]  >=  00000002 
   C0:  	Return
   C8:  EndIf
   D0:  ExecWait $Script_8021B398 
   DC:  Switch  *Var[A] 
   E8:  	CaseOR  ==  00000000 
   F4:  	CaseOR  ==  00000001 
  100:  	CaseOR  ==  00000002 
  10C:  	CaseOR  ==  00000003 
  118:  		Call     SummonEnemy 	( $SpecialFormation_8021B5A0 00000000 )
  12C:  		Call     SetActorVar 	( *Var[0] 00000002 00000001 )
  144:  		Call     GetActorHP  	( .Actor:Self *Var[B] )
  158:  		Call     SetEnemyHP  	( *Var[0] *Var[B] )
  16C:  		Call     GetActorPos 	( .Actor:Self *Var[B] *Var[C] *Var[D] )
  188:  		Call     SetActorPos 	( *Var[0] *Var[B] *Var[C] *Var[D] )
  1A4:  		Call     SetGoalToIndex ( *Var[0] *Var[A] )
  1B8:  		Call     GetGoalPos  	( *Var[0] *Var[B] *Var[C] *Var[D] )
  1D4:  		Call     SetHomePos  	( *Var[0] *Var[B] *Var[C] *Var[D] )
  1F0:  		Call     SetActorJumpscale 	( *Var[0] *Fixed[1.2001953] )
  204:  		Call     JumpToGoal  	( *Var[0] 00000014 00000000 00000001 00000000 )
  224:  		Call     HPBarToHome 	( *Var[0] )
  234:  		Call     GetActorVar 	( .Actor:Self 00000001 *Var[1] )
  24C:  		Switch  *Var[1] 
  258:  			Case  ==  00000000 
  264:  				Call     SetActorVar 	( *Var[0] 00000001 00000001 )
  27C:  			Case  ==  00000001 
  288:  				Call     SetActorVar 	( *Var[0] 00000001 00000002 )
  2A0:  		EndSwitch
  2A8:  		Call     SetActorVar 	( .Actor:Self 00000001 00000003 )
  2C0:  		Call     SetActorVar 	( *Var[0] 00000002 00000000 )
  2D8:  	EndCaseGroup
  2E0:  	Default
  2E8:  EndSwitch
  2F0:  Return
  2F8:  End

#new:Script $Script_HandleEvent_8021B8BC
    0:  Call     UseIdleAnimation 	( .Actor:Self .False )
   14:  Call     EnableIdleScript 	( .Actor:Self 00000000 )
   28:  Call     GetEventType 	( .Actor:Self *Var[0] )
   3C:  Switch  *Var[0] 
   48:  	CaseOR  ==  .Event:HitCombo
   54:  	CaseOR  ==  .Event:Hit
   60:  		Exec     $Script_Split 
   6C:  		SetConst  *Var[0]  00000001 
   7C:  		SetConst  *Var[1]  00460107 
   8C:  		ExecWait DoNormalHit 
   98:  	EndCaseGroup
   A0:  	Case  ==  .Event:BurnHit
   AC:  		Exec     $Script_Split 
   B8:  		SetConst  *Var[0]  00000001 
   C8:  		SetConst  *Var[1]  00460108 
   D8:  		SetConst  *Var[2]  00460109 
   E8:  		ExecWait DoBurnHit 
   F4:  	Case  ==  .Event:BurnDeath
  100:  		SetConst  *Var[0]  00000001 
  110:  		SetConst  *Var[1]  00460108 
  120:  		SetConst  *Var[2]  00460109 
  130:  		ExecWait DoBurnHit 
  13C:  		SetConst  *Var[0]  00000001 
  14C:  		SetConst  *Var[1]  00460109 
  15C:  		ExecWait DoDeath 
  168:  		Return
  170:  	Case  ==  .Event:MultibounceHit
  17C:  		Exec     $Script_Split 
  188:  		SetConst  *Var[0]  00000001 
  198:  		SetConst  *Var[1]  00460107 
  1A8:  		ExecWait 8029B998 
  1B4:  	Case  ==  .Event:MultibounceDeath
  1C0:  		SetConst  *Var[0]  00000001 
  1D0:  		SetConst  *Var[1]  00460107 
  1E0:  		ExecWait 8029B998 
  1EC:  		SetConst  *Var[0]  00000001 
  1FC:  		SetConst  *Var[1]  00460107 
  20C:  		ExecWait DoDeath 
  218:  		Return
  220:  	Case  ==  .Event:ShockHit
  22C:  		Call     PlaySoundAtActor 	( .Actor:Self 00000759 )
  240:  		SetConst  *Var[0]  00000001 
  250:  		SetConst  *Var[1]  00460107 
  260:  		ExecWait DoShockHit 
  26C:  		SetConst  *Var[0]  00000001 
  27C:  		SetConst  *Var[1]  00460107 
  28C:  		ExecWait 8029BD70 
  298:  		ExecWait $Script_8021B2FC 
  2A4:  	Case  ==  .Event:ShockDeath
  2B0:  		Call     PlaySoundAtActor 	( .Actor:Self 00000759 )
  2C4:  		SetConst  *Var[0]  00000001 
  2D4:  		SetConst  *Var[1]  00460107 
  2E4:  		ExecWait DoShockHit 
  2F0:  		SetConst  *Var[0]  00000001 
  300:  		SetConst  *Var[1]  00460107 
  310:  		ExecWait DoDeath 
  31C:  		Return
  324:  	CaseOR  ==  00000017
  330:  	CaseOR  ==  .Event:Immune
  33C:  	CaseOR  ==  .Event:AirLiftFailed
  348:  	CaseOR  ==  .Event:BurnTaunt
  354:  		SetConst  *Var[0]  00000001 
  364:  		SetConst  *Var[1]  00460101 
  374:  		ExecWait DoImmune 
  380:  	EndCaseGroup
  388:  	Case  ==  .Event:Death
  394:  		SetConst  *Var[0]  00000001 
  3A4:  		SetConst  *Var[1]  00460107 
  3B4:  		ExecWait DoNormalHit 
  3C0:  		SetConst  *Var[0]  00000001 
  3D0:  		SetConst  *Var[1]  00460107 
  3E0:  		ExecWait DoDeath 
  3EC:  		Return
  3F4:  	Case  ==  .Event:BeginFirstStrike
  400:  		Call     SetActorPos 	( .Actor:Self 00000014 00000000 00000000 )
  41C:  		Call     HPBarToCurrent ( .Actor:Self )
  42C:  	Case  ==  .Event:EndFirstStrike
  438:  		ExecWait $Script_8021B2FC 
  444:  		Call     HPBarToHome 	( .Actor:Self )
  454:  	Case  ==  .Event:RecoverStatus
  460:  		SetConst  *Var[0]  00000001 
  470:  		SetConst  *Var[1]  00460101 
  480:  		ExecWait DoRecover 
  48C:  	Case  ==  .Event:ScareAway
  498:  		SetConst  *Var[0]  00000001 
  4A8:  		SetConst  *Var[1]  00460103 
  4B8:  		SetConst  *Var[2]  00460107 
  4C8:  		ExecWait DoScareAway 
  4D4:  		Return
  4DC:  	Case  ==  .Event:BeginAirLift
  4E8:  		SetConst  *Var[0]  00000001 
  4F8:  		SetConst  *Var[1]  00460103 
  508:  		ExecWait DoAirLift 
  514:  	Case  ==  .Event:BlowAway
  520:  		SetConst  *Var[0]  00000001 
  530:  		SetConst  *Var[1]  00460103 
  540:  		ExecWait DoBlowAway 
  54C:  		Return
  554:  	Case  ==  .Event:UpAndAway
  560:  	Default
  568:  EndSwitch
  570:  Call     EnableIdleScript 	( .Actor:Self 00000001 )
  584:  Call     UseIdleAnimation 	( .Actor:Self .True )
  598:  Return
  5A0:  End

#new:Script $Script_8021BE64
    0:  Call     UseIdleAnimation 	( .Actor:Self .False )
   14:  Call     EnableIdleScript 	( .Actor:Self 00000000 )
   28:  Call     SetTargetActor ( .Actor:Self .Actor:Player )
   3C:  Call     UseCamPreset 	( 0000003F )
   4C:  Call     CamTargetActor ( .Actor:Self )
   5C:  Call     8024ECF8 ( FFFFFFFF 00000001 00000000 )
   74:  Call     SetAnimation 	( .Actor:Self 00000001 00460103 )
   8C:  Call     SetGoalToTarget 	( .Actor:Self )
   9C:  Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
   B8:  Add  *Var[0]  0000001E 
   C8:  Set  *Var[1]  00000005 
   D8:  Call     SetGoalToPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
   F4:  Call     SetActorSpeed 	( .Actor:Self *Fixed[6.0] )
  108:  Thread
  110:  	Call     $Function_80218020 ( )
  11C:  EndThread
  124:  Call     MoveToGoal  	( .Actor:Self 00000000 00000000 .Easing:SinOut )
  140:  Call     SetAnimation 	( .Actor:Self 00000001 00460101 )
  158:  Call     CheckPlayerHit ( .Actor:Self *Var[0] 00000000 00000000 00000001 00000010 )
  17C:  Switch  *Var[0] 
  188:  	CaseOR  ==  00000006 
  194:  	CaseOR  ==  00000005 
  1A0:  		Set  *Var[A]  *Var[0] 
  1B0:  		Call     SetAnimation 	( .Actor:Self 00000001 00460104 )
  1C8:  		Call     SetGoalToTarget 	( .Actor:Self )
  1D8:  		Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  1F4:  		Sub  *Var[0]  00000014 
  204:  		Set  *Var[1]  00000000 
  214:  		Add  *Var[2]  00000001 
  224:  		Call     SetActorJumpscale 	( .Actor:Self *Fixed[1.0] )
  238:  		Call     SetGoalToPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  254:  		Call     JumpToGoal  	( .Actor:Self 0000000F 00000000 00000001 00000000 )
  274:  		If  *Var[A]  ==  00000005 
  284:  			Call     CheckPlayerHit ( .Actor:Self *Var[A] 80000000 00000000 00000000 00000000 )
  2A8:  		EndIf
  2B0:  		Sub  *Var[0]  0000001E 
  2C0:  		Call     SetGoalToPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  2DC:  		Call     JumpToGoal  	( .Actor:Self 0000000A 00000000 00000001 00000000 )
  2FC:  		Sub  *Var[0]  00000014 
  30C:  		Call     SetGoalToPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  328:  		Call     JumpToGoal  	( .Actor:Self 00000005 00000000 00000001 00000000 )
  348:  		Sub  *Var[0]  0000000A 
  358:  		Call     SetGoalToPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  374:  		Call     JumpToGoal  	( .Actor:Self 00000003 00000000 00000001 00000000 )
  394:  		Wait     0000000E 
  3A0:  		Call     UseCamPreset 	( 00000002 )
  3B0:  		Call     AddActorDecoration 	( .Actor:Self 00000001 00000000 .Decoration:Sweat )
  3CC:  		Call     SetActorAngle 	( .Actor:Self 000000B4 )
  3E0:  		ExecWait $Script_8021B2FC 
  3EC:  		Call     SetActorAngle 	( .Actor:Self 00000000 )
  400:  		Call     RemoveActorDecoration 	( .Actor:Self 00000001 00000000 )
  418:  		Call     EnableIdleScript 	( .Actor:Self FFFFFFFF )
  42C:  		Call     UseIdleAnimation 	( .Actor:Self .True )
  440:  		Return
  448:  	EndCaseGroup
  450:  EndSwitch
  458:  Call     SetAnimation 	( .Actor:Self 00000001 00460104 )
  470:  Call     SetGoalToTarget 	( .Actor:Self )
  480:  Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  49C:  Add  *Var[2]  00000001 
  4AC:  Call     SetActorJumpscale 	( .Actor:Self *Fixed[1.6005859] )
  4C0:  Call     SetGoalToPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  4DC:  Call     JumpToGoal  	( .Actor:Self 0000000A 00000000 00000001 00000000 )
  4FC:  Wait     00000002 
  508:  Call     DamageTarget 	( .Actor:Self *Var[0] 00000002 00000000 00000000 00000004 00000020 )
  530:  Switch  *Var[0] 
  53C:  	CaseOR  ==  00000000 
  548:  	CaseOR  ==  00000002 
  554:  		Call     UseCamPreset 	( 00000002 )
  564:  		Set  *Var[0]  00000001 
  574:  		Set  *Var[1]  00460104 
  584:  		ExecWait 8029BD70 
  590:  		Wait     00000005 
  59C:  		ExecWait $Script_8021B2FC 
  5A8:  	EndCaseGroup
  5B0:  EndSwitch
  5B8:  Call     EnableIdleScript 	( .Actor:Self FFFFFFFF )
  5CC:  Call     UseIdleAnimation 	( .Actor:Self .True )
  5E0:  Return
  5E8:  End

#new:Script $Script_8021C454
    0:  Set  *Var[6]  00000002 
   10:  Loop     00000004 
   1C:  	Thread
   24:  		Call     GetStatusFlags ( .Actor:Self *Var[A] )
   38:  		If  *Var[A]  &  00080000 
   48:  			Call     SetSpriteScale ( .Actor:Self *Var[6] *Fixed[0.20019531] *Fixed[0.20019531] *Fixed[0.20019531] )
   68:  		Else
   70:  			Call     SetSpriteScale ( .Actor:Self *Var[6] *Fixed[0.5] *Fixed[0.5] *Fixed[0.5] )
   90:  		EndIf
   98:  		Call     SetSpritePos 	( .Actor:Self *Var[6] *Var[0] *Var[1] *Var[2] )
   B8:  		Call     SetSpriteFlagBits 	( .Actor:Self *Var[6] 00000001 .False )
   D4:  		Call     SetSpriteSpeed ( .Actor:Self *Var[6] *Fixed[8.0] )
   EC:  		Call     SetSpriteJumpscale 	( .Actor:Self *Var[6] *Fixed[0.0107421875] )
  104:  		Call     8026FA00 ( FFFFFF81 *Var[6] 00000002 000002D0 00000000 )
  124:  		Call     JumpSpriteA 	( .Actor:Self *Var[6] *Var[3] *Var[4] *Var[5] 00000000 .False )
  14C:  		Call     SetSpriteFlagBits 	( .Actor:Self *Var[6] 00000001 .True )
  168:  	EndThread
  170:  	Wait     00000003 
  17C:  	Add  *Var[6]  00000001 
  18C:  EndLoop
  194:  Return
  19C:  End

#new:Script $Script_8021C5F8
    0:  Exec     $Script_8021C454 
    C:  Call     GetDistanceToTarget 	( .Actor:Self *Var[0] )
   20:  DivF  *Var[0]  *Fixed[8.0] 
   30:  Add  *Var[0]  00000001 
   40:  Wait     *Var[0] 
   4C:  Return
   54:  End

#new:Script $Script_8021C654
    0:  Call     UseIdleAnimation 	( .Actor:Self .False )
   14:  Call     EnableIdleScript 	( .Actor:Self 00000000 )
   28:  Call     SetTargetActor ( .Actor:Self .Actor:Partner )
   3C:  Call     UseCamPreset 	( 0000003F )
   4C:  Call     CamTargetActor ( .Actor:Self )
   5C:  Call     8024ECF8 ( FFFFFFFF 00000001 00000000 )
   74:  Call     GetActorPos 	( .Actor:Player *Var[0] *Var[1] *Var[2] )
   90:  Call     GetActorVar 	( .Actor:Self 00000000 *Var[A] )
   A8:  If  *Var[A]  ==  00000001 
   B8:  	Add  *Var[0]  00000064 
   C8:  	Set  *Var[1]  00000005 
   D8:  Else
   E0:  	Add  *Var[0]  0000001E 
   F0:  	Set  *Var[1]  00000032 
  100:  EndIf
  108:  Call     SetGoalToPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  124:  Call     SetAnimation 	( .Actor:Self 00000001 00460103 )
  13C:  Call     SetActorSpeed 	( .Actor:Self *Fixed[6.0] )
  150:  Thread
  158:  	Call     $Function_80218020 ( )
  164:  EndThread
  16C:  Call     MoveToGoal  	( .Actor:Self 00000000 FFFFFFFC .Easing:SinOut )
  188:  Call     SetAnimation 	( .Actor:Self 00000001 00460101 )
  1A0:  Wait     0000000A 
  1AC:  Call     SetAnimation 	( .Actor:Self 00000001 00460105 )
  1C4:  Wait     0000001E 
  1D0:  Call     CheckPlayerHit ( .Actor:Self *Var[0] 00000000 00000000 00000001 00000010 )
  1F4:  Switch  *Var[0] 
  200:  	CaseOR  ==  00000006 
  20C:  	CaseOR  ==  00000005 
  218:  		Set  *Var[A]  *Var[0] 
  228:  		Call     SetAnimation 	( .Actor:Self 00000001 00460106 )
  240:  		Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  25C:  		Sub  *Var[0]  00000005 
  26C:  		Add  *Var[1]  00000004 
  27C:  		Add  *Var[2]  00000002 
  28C:  		Call     SetGoalToTarget 	( .Actor:Self )
  29C:  		Call     GetGoalPos  	( .Actor:Self *Var[3] *Var[4] *Var[5] )
  2B8:  		Sub  *Var[3]  00000064 
  2C8:  		Add  *Var[5]  00000002 
  2D8:  		ExecWait $Script_8021C5F8 
  2E4:  		If  *Var[A]  ==  00000005 
  2F4:  			Call     CheckPlayerHit ( .Actor:Self *Var[0] 80000000 00000000 00000000 00000000 )
  318:  		EndIf
  320:  		Wait     00000014 
  32C:  		Call     UseCamPreset 	( 00000002 )
  33C:  		Call     AddActorDecoration 	( .Actor:Self 00000001 00000000 .Decoration:Sweat )
  358:  		Call     SetActorAngle 	( .Actor:Self 000000B4 )
  36C:  		ExecWait $Script_8021B2FC 
  378:  		Wait     00000014 
  384:  		Call     SetActorAngle 	( .Actor:Self 00000000 )
  398:  		Call     RemoveActorDecoration 	( .Actor:Self 00000001 00000000 )
  3B0:  		Call     EnableIdleScript 	( .Actor:Self 00000001 )
  3C4:  		Call     UseIdleAnimation 	( .Actor:Self .True )
  3D8:  		Return
  3E0:  	EndCaseGroup
  3E8:  EndSwitch
  3F0:  Call     SetAnimation 	( .Actor:Self 00000001 00460106 )
  408:  Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  424:  Sub  *Var[0]  00000005 
  434:  Add  *Var[1]  00000004 
  444:  Add  *Var[2]  00000002 
  454:  Call     SetGoalToTarget 	( .Actor:Self )
  464:  Call     GetGoalPos  	( .Actor:Self *Var[3] *Var[4] *Var[5] )
  480:  Sub  *Var[4]  00000006 
  490:  Add  *Var[5]  00000002 
  4A0:  ExecWait $Script_8021C5F8 
  4AC:  Wait     00000002 
  4B8:  Call     DamageTarget 	( .Actor:Self *Var[0] 10000002 00000000 00000000 00000003 00000020 )
  4E0:  Wait     00000014 
  4EC:  Switch  *Var[0] 
  4F8:  	CaseOR  ==  00000000 
  504:  	CaseOR  ==  00000002 
  510:  		Call     UseCamPreset 	( 00000002 )
  520:  		ExecWait $Script_8021B2FC 
  52C:  	EndCaseGroup
  534:  EndSwitch
  53C:  Call     EnableIdleScript 	( .Actor:Self 00000001 )
  550:  Call     UseIdleAnimation 	( .Actor:Self .True )
  564:  Return
  56C:  End

#new:Script $Script_8021CBC8
    0:  Call     UseIdleAnimation 	( .Actor:Self .False )
   14:  Call     EnableIdleScript 	( .Actor:Self 00000000 )
   28:  Call     SetTargetActor ( .Actor:Self .Actor:Player )
   3C:  Call     UseCamPreset 	( 0000003F )
   4C:  Call     CamTargetActor ( .Actor:Self )
   5C:  Call     8024ECF8 ( FFFFFFFF 00000001 00000000 )
   74:  Call     SetAnimation 	( .Actor:Self 00000001 00460103 )
   8C:  Call     SetGoalToTarget 	( .Actor:Self )
   9C:  Call     AddToGoalPos 	( .Actor:Self 0000001E 00000000 00000000 )
   B8:  Call     SetActorSpeed 	( .Actor:Self *Fixed[5.0] )
   CC:  Thread
   D4:  	Call     $Function_80218020 ( )
   E0:  EndThread
   E8:  Call     MoveToGoal  	( .Actor:Self 00000000 FFFFFFFC .Easing:SinOut )
  104:  Call     CheckPlayerHit ( .Actor:Self *Var[0] 00000000 00000000 00000001 00000010 )
  128:  Switch  *Var[0] 
  134:  	CaseOR  ==  00000006 
  140:  	CaseOR  ==  00000005 
  14C:  		Set  *Var[A]  *Var[0] 
  15C:  		Wait     0000000A 
  168:  		Call     8026F740 ( FFFFFF81 00000002 00000000 00000000 )
  184:  		Call     PlaySoundAtActor 	( .Actor:Self 000002CF )
  198:  		Call     SetActorSpeed 	( .Actor:Self *Fixed[5.0] )
  1AC:  		Call     SetActorJumpscale 	( .Actor:Self *Fixed[1.8007812] )
  1C0:  		Call     SetAnimation 	( .Actor:Self 00000001 00460104 )
  1D8:  		Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  1F4:  		Call     SetGoalToPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  210:  		Call     JumpToGoal  	( .Actor:Self 0000000A 00000000 00000000 00000000 )
  230:  		Call     8026F838 ( FFFFFF81 00000002 )
  244:  		Call     PlaySoundAtActor 	( .Actor:Self 000002EF )
  258:  		Call     SetGoalToTarget 	( .Actor:Self )
  268:  		Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  284:  		Sub  *Var[0]  0000001E 
  294:  		Add  *Var[2]  00000002 
  2A4:  		Call     SetGoalToPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  2C0:  		Call     SetActorSpeed 	( .Actor:Self *Fixed[8.0] )
  2D4:  		Call     SetAnimation 	( .Actor:Self 00000001 00460104 )
  2EC:  		Call     MoveToGoal  	( .Actor:Self 00000000 FFFFFFF6 .Easing:QuadraticOut )
  308:  		If  *Var[A]  ==  00000005 
  318:  			Call     CheckPlayerHit ( .Actor:Self *Var[0] 80000000 00000000 00000000 00000000 )
  33C:  		EndIf
  344:  		Wait     0000001E 
  350:  		Call     UseCamPreset 	( 00000002 )
  360:  		Call     AddActorDecoration 	( .Actor:Self 00000001 00000000 .Decoration:Sweat )
  37C:  		Call     SetActorAngle 	( .Actor:Self 000000B4 )
  390:  		ExecWait $Script_8021B2FC 
  39C:  		Call     SetActorAngle 	( .Actor:Self 00000000 )
  3B0:  		Call     RemoveActorDecoration 	( .Actor:Self 00000001 00000000 )
  3C8:  		Call     EnableIdleScript 	( .Actor:Self FFFFFFFF )
  3DC:  		Call     UseIdleAnimation 	( .Actor:Self .True )
  3F0:  		Return
  3F8:  	EndCaseGroup
  400:  EndSwitch
  408:  Wait     00000005 
  414:  Call     8026F740 ( FFFFFF81 00000002 00000000 00000000 )
  430:  Call     PlaySoundAtActor 	( .Actor:Self 000002CF )
  444:  Call     SetActorSpeed 	( .Actor:Self *Fixed[5.0] )
  458:  Call     SetActorJumpscale 	( .Actor:Self *Fixed[1.8007812] )
  46C:  Call     SetAnimation 	( .Actor:Self 00000001 00460104 )
  484:  Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  4A0:  Call     SetGoalToPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  4BC:  Call     JumpToGoal  	( .Actor:Self 0000000A 00000000 00000000 00000000 )
  4DC:  Call     8026F838 ( FFFFFF81 00000002 )
  4F0:  Set  *Var[A]  *Var[0] 
  500:  Set  *Var[B]  *Var[1] 
  510:  Set  *Var[C]  *Var[2] 
  520:  Call     PlaySoundAtActor 	( .Actor:Self 000002EF )
  534:  Call     SetGoalToTarget 	( .Actor:Self )
  544:  Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  560:  Add  *Var[2]  00000002 
  570:  Call     SetGoalToPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  58C:  Call     SetActorSpeed 	( .Actor:Self *Fixed[8.0] )
  5A0:  Call     MoveToGoal  	( .Actor:Self 00000000 FFFFFFF6 .Easing:QuadraticOut )
  5BC:  Wait     00000002 
  5C8:  Call     DamageTarget 	( .Actor:Self *Var[0] 00000002 00000000 00000000 00000004 00000020 )
  5F0:  Switch  *Var[0] 
  5FC:  	CaseOR  ==  00000000 
  608:  	CaseOR  ==  00000002 
  614:  		Call     UseCamPreset 	( 00000002 )
  624:  		Call     SetGoalToPos 	( .Actor:Self *Var[A] *Var[B] *Var[C] )
  640:  		Call     MoveToGoal  	( .Actor:Self 00000000 FFFFFFF6 .Easing:Linear )
  65C:  		Wait     00000014 
  668:  		ExecWait $Script_8021B2FC 
  674:  	EndCaseGroup
  67C:  EndSwitch
  684:  Call     EnableIdleScript 	( .Actor:Self FFFFFFFF )
  698:  Call     UseIdleAnimation 	( .Actor:Self .True )
  6AC:  Return
  6B4:  End

#new:Script $Script_TakeTurn_8021D284
    0:  Call     GetBattlePhase ( *Var[0] )
   10:  If  *Var[0]  ==  .Phase:FirstStrike
   20:  	Call     GetActorVar 	( .Actor:Self 00000000 *Var[0] )
   38:  	Switch  *Var[0] 
   44:  		Case  ==  00000001 
   50:  			ExecWait $Script_8021BE64 
   5C:  		Case  ==  00000000 
   68:  			ExecWait $Script_8021CBC8 
   74:  	EndSwitch
   7C:  	Return
   84:  EndIf
   8C:  Call     GetActorVar 	( .Actor:Self 00000000 *Var[0] )
   A4:  Switch  *Var[0] 
   B0:  	Case  ==  00000001 
   BC:  		Call     GetStatusFlags ( .Actor:Partner *Var[0] )
   D0:  		If  *Var[0]  &  01000000 
   E0:  			ExecWait $Script_8021BE64 
   EC:  		Else
   F4:  			Call     RandInt     	( 000003E8 *Var[0] )
  108:  			If  *Var[0]  <=  0000012C 
  118:  				ExecWait $Script_8021C654 
  124:  			Else
  12C:  				ExecWait $Script_8021BE64 
  138:  			EndIf
  140:  		EndIf
  148:  	Case  ==  00000000 
  154:  		Call     GetStatusFlags ( .Actor:Partner *Var[0] )
  168:  		If  *Var[0]  &  01000000 
  178:  			ExecWait $Script_8021CBC8 
  184:  		Else
  18C:  			Call     RandInt     	( 000003E8 *Var[0] )
  1A0:  			If  *Var[0]  <=  0000012C 
  1B0:  				ExecWait $Script_8021C654 
  1BC:  			Else
  1C4:  				ExecWait $Script_8021CBC8 
  1D0:  			EndIf
  1D8:  		EndIf
  1E0:  EndSwitch
  1E8:  Return
  1F0:  End

PADDING: 8021D47C to 8021D480 (0048452C to 00484530)
00000000 

% Origin: HINT
#new:DefenseTable $DefenseTable_8021D480
.Element:Normal 00000000
.Element:End

#new:DefenseTable $DefenseTable_8021D48C
.Element:Normal 00000000
.Element:End

#new:StatusTable $StatusTable_8021D498
.Status:Normal      0`
.Status:Default     0`
.Status:Sleep     100`
.Status:Poison     50`
.Status:Frozen      0`
.Status:Dizzy      50`
.Status:Fear        0`
.Status:Static     50`
.Status:Paralyze  100`
.Status:Shrink    100`
.Status:Stop      100`
.Status:DefaultTurnMod    0`
.Status:SleepTurnMod      0`
.Status:PoisonTurnMod     0`
.Status:FrozenTurnMod     0`
.Status:DizzyTurnMod      0`
.Status:FearTurnMod       0`
.Status:StaticTurnMod     0`
.Status:ParalyzeTurnMod   0`
.Status:ShrinkTurnMod     0`
.Status:StopTurnMod       0`
.Status:End

#new:StatusTable $StatusTable_8021D544
.Status:Normal      0`
.Status:Default     0`
.Status:Sleep     100`
.Status:Poison     50`
.Status:Frozen      0`
.Status:Dizzy     100`
.Status:Fear        0`
.Status:Static     50`
.Status:Paralyze  100`
.Status:Shrink    100`
.Status:Stop      100`
.Status:DefaultTurnMod    0`
.Status:SleepTurnMod      0`
.Status:PoisonTurnMod     0`
.Status:FrozenTurnMod     0`
.Status:DizzyTurnMod      1`
.Status:FearTurnMod       0`
.Status:StaticTurnMod     0`
.Status:ParalyzeTurnMod   0`
.Status:ShrinkTurnMod     0`
.Status:StopTurnMod       0`
.Status:End

% Origin: HINT
#new:SpriteTable $SpriteTable_8021D5F0
00800000 01000000 022300FF $IdleAnimations_8021D6D0 $DefenseTable_8021D480 00000000 00000000 FBF40000 00000000 

#new:SpriteTable $SpriteTable_8021D614
00020001 01000000 022300FF $IdleAnimations_8021D6D0 $DefenseTable_8021D48C 00000000 00000000 FBF40000 00000000 
00800000 02000000 F62300FF $IdleAnimations_8021D71C $DefenseTable_8021D48C 00000000 00000000 00F80000 00000000 
00020001 03000000 000000FF $IdleAnimations_8021D768 $DefenseTable_8021D48C 00000000 00000000 00000000 00000000 

% Origin: HINT
#new:Actor $Magikoopa
% stats
[Index]        95b 
[Level]        32`b 
[MaxHP]         8`b 
[Coins]         0`b 
[Flags]       00000000 
[StatusTable] $StatusTable_8021D498 
% ai
[SpriteCount]   1`s 
[SpriteTable] $SpriteTable_8021D5F0 
[Script]      $Script_Init_8021E100 
% move effectiveness
[Escape]        0`b 
[Item]          0`b 
[AirLift]       0`b 
[Hurricane]     0`b % Bow's "Spook" as well
[UpAndAway]     0`b 
[PowerBounce] 100`b 
[SpinSmash]     0`b % weight (0-4)
% ui positions
[Size]         36`b  40`b % width height
[HealthBar]     0`b   0`b % dx dy
[StatusTurn]  -10`b  20`b % dx dy
[StatusIcon]   10`b  20`b % dx dy

#new:Actor $FlyingMagikoopa
% stats
[Index]        96b 
[Level]        32`b 
[MaxHP]         8`b 
[Coins]         0`b 
[Flags]       00000200 
[StatusTable] $StatusTable_8021D544 
% ai
[SpriteCount]   3`s 
[SpriteTable] $SpriteTable_8021D614 
[Script]      $Script_Init_8021E2C0 
% move effectiveness
[Escape]        0`b 
[Item]          0`b 
[AirLift]       0`b 
[Hurricane]     0`b % Bow's "Spook" as well
[UpAndAway]     0`b 
[PowerBounce] 100`b 
[SpinSmash]     4`b % weight (0-4)
% ui positions
[Size]         48`b  40`b % width height
[HealthBar]     0`b   0`b % dx dy
[StatusTurn]  -10`b  20`b % dx dy
[StatusIcon]   10`b  20`b % dx dy

#new:IdleAnimations $IdleAnimations_8021D6D0
.Status:Normal    00560001
.Status:Stone     00560000
.Status:Sleep     00560008
.Status:Poison    00560001
.Status:Stop      00560000
.Status:Static    00560001
.Status:Paralyze  00560000
.Status:Dizzy     00560007
.Status:Fear      00560007
.Status:End

#new:IdleAnimations $IdleAnimations_8021D71C
.Status:Normal    00570001
.Status:Stone     00570000
.Status:Sleep     00570008
.Status:Poison    00570001
.Status:Stop      00570000
.Status:Static    00570001
.Status:Paralyze  00570000
.Status:Dizzy     00570007
.Status:Fear      00570007
.Status:End

#new:IdleAnimations $IdleAnimations_8021D768
.Status:Normal    0057000A
.Status:End

#new:Script $Script_Idle_8021D774
    0:  Return
    8:  End

#new:Script $Script_8021D784
    0:  Call     GetBattleFlags ( *Var[0] )
   10:  If  *Var[0]  !&  00080000 
   20:  	If  *Var[0]  &  00000240 
   30:  		Call     SetActorVar 	( .Actor:Self 00000002 00000001 )
   48:  	EndIf
   50:  Else
   58:  	Call     $Function_802182A8 ( *Var[0] )
   68:  	Switch  *Var[0] 
   74:  		CaseOR  ==  00000083 
   80:  		CaseOR  ==  00000084 
   8C:  		CaseOR  ==  00000085 
   98:  		CaseOR  ==  00000088 
   A4:  			Call     GetBattleFlags ( *Var[0] )
   B4:  			If  *Var[0]  &  00000240 
   C4:  				Call     SetActorVar 	( .Actor:Self 00000002 00000001 )
   DC:  			EndIf
   E4:  		EndCaseGroup
   EC:  	EndSwitch
   F4:  EndIf
   FC:  Return
  104:  End

#new:Script $Script_8021D890
    0:  Call     GetActorVar 	( .Actor:Self 00000002 *Var[0] )
   18:  If  *Var[0]  ==  00000001 
   28:  	Call     SetAnimation 	( .Actor:Self 00000001 00560004 )
   40:  	Goto     00000000 
   4C:  EndIf
   54:  Call     GetLastElement ( *Var[0] )
   64:  If  *Var[0]  &  00000400 
   74:  	Call     SetAnimation 	( .Actor:Self 00000001 00560004 )
   8C:  	Goto     00000000 
   98:  EndIf
   A0:  Return
   A8:  Label    00000000 
   B4:  Call     8027D32C ( FFFFFF81 )
   C4:  Call     GetStatusFlags ( .Actor:Self *Var[0] )
   D8:  If  *Var[0]  &  00080000 
   E8:  	Call     SetSpriteScale ( .Actor:Self 00000003 *Fixed[0.40039062] *Fixed[0.40039062] *Fixed[0.40039062] )
  108:  EndIf
  110:  Call     SetSpriteFlagBits 	( .Actor:Self 00000001 00800000 .True )
  12C:  Call     SetSpriteFlagBits 	( .Actor:Self 00000001 00020001 .False )
  148:  Call     SetSpriteFlagBits 	( .Actor:Self 00000002 00020001 .True )
  164:  Call     SetSpriteFlagBits 	( .Actor:Self 00000002 00800000 .False )
  180:  Call     SetSpriteFlagBits 	( .Actor:Self 00000003 00100000 .True )
  19C:  Call     SetSpriteFlagBits 	( .Actor:Self 00000003 00000001 .False )
  1B8:  Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  1D4:  Sub  *Var[2]  00000001 
  1E4:  Call     SetSpritePos 	( .Actor:Self 00000003 *Var[0] *Var[1] *Var[2] )
  204:  Call     PlaySoundAtActor 	( .Actor:Self 00000301 )
  218:  Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  234:  Set  *Var[1]  00000000 
  244:  Call     SetActorJumpscale 	( .Actor:Self *Fixed[0.80078125] )
  258:  Call     SetGoalToPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  274:  Call     JumpToGoal  	( .Actor:Self 0000000F 00000000 00000001 00000000 )
  294:  Call     $Function_802183A0 ( 00000096 0000000A )
  2A8:  Thread
  2B0:  	Call     ShakeCam    	( 00000001 00000000 00000005 *Fixed[0.7001953] )
  2CC:  EndThread
  2D4:  Call     GetEventType 	( .Actor:Self *Var[3] )
  2E8:  If  *Var[3]  ==  0000000F
  2F8:  	Call     SetAnimation 	( .Actor:Self 00000001 00560004 )
  310:  	Call     GetActorPos 	( .Actor:Self *Var[3] *Var[4] *Var[5] )
  32C:  	Add  *Var[4]  0000000A 
  33C:  	Add  *Var[5]  00000005 
  34C:  	Call     PlayEffect  	( {FX:SmokeBurst:Black} *Var[3] *Var[4] *Var[5] *Fixed[1.0] 0000000A 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  390:  EndIf
  398:  Call     SetGoalToPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  3B4:  Call     JumpToGoal  	( .Actor:Self 0000000A 00000000 00000001 00000000 )
  3D4:  Call     SetGoalToPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  3F0:  Call     JumpToGoal  	( .Actor:Self 00000005 00000000 00000001 00000000 )
  410:  Loop     00000014 
  41C:  	Call     SetSpriteFlagBits 	( .Actor:Self 00000003 00000001 .True )
  438:  	Wait     00000001 
  444:  	Call     SetSpriteFlagBits 	( .Actor:Self 00000003 00000001 .False )
  460:  	Wait     00000001 
  46C:  EndLoop
  474:  Call     SetSpriteFlagBits 	( .Actor:Self 00000003 00000001 .True )
  490:  Call     SetAnimation 	( .Actor:Self 00000001 00560001 )
  4A8:  Call     SetActorFlagBits 	( .Actor:Self 00000200 .False )
  4C0:  Call     BindHandleEvent 	( .Actor:Self $Script_HandleEvent_8021E6D8 )
  4D4:  Call     SetActorType 	( FFFFFF81 00000095 )
  4E8:  Call     SetStatusTable ( .Actor:Self $StatusTable_8021D498 )
  4FC:  Call     $Function_802182D4 ( FFFFFFF6 00000014 0000000A 00000020 )
  518:  Call     SetActorFlagBits 	( .Actor:Self 00001000 .True )
  530:  Call     8026F6EC ( FFFFFF81 )
  540:  Call     GetIndexFromPos 	( .Actor:Self *Var[0] )
  554:  Mod  *Var[0]  00000004 
  564:  Call     SetGoalToIndex ( .Actor:Self *Var[0] )
  578:  Call     SetActorSpeed 	( .Actor:Self *Fixed[4.0] )
  58C:  Call     RunToGoal   	( .Actor:Self 00000000 .False )
  5A4:  Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  5C0:  Call     ForceHomePos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  5DC:  Call     HPBarToHome 	( .Actor:Self )
  5EC:  Return
  5F4:  End

#new:Script $Script_RunAway
    0:  Call     UseIdleAnimation 	( .Actor:Self .False )
   14:  Call     EnableIdleScript 	( .Actor:Self 00000000 )
   28:  Call     8027D32C ( FFFFFF81 )
   38:  Call     GetEventType 	( .Actor:Self *Var[0] )
   4C:  If  *Var[0]  !=  .Event:ScareAway
   5C:  	Call     UseCamPreset 	( 0000000E )
   6C:  	Call     CamTargetActor ( .Actor:Self )
   7C:  	Call     MoveCamOver 	( 0000000F )
   8C:  	Wait     0000000F 
   98:  	Call     UseCamPreset 	( 00000001 )
   A8:  EndIf
   B0:  Call     SetActorSpeed 	( .Actor:Self *Fixed[1.0] )
   C4:  Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
   E0:  Add  *Var[0]  00000014 
   F0:  Call     SetGoalToPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  10C:  Call     RunToGoal   	( .Actor:Self 00000000 .False )
  124:  Wait     0000000A 
  130:  Call     SetActorAngle 	( .Actor:Self 000000B4 )
  144:  Call     EnableActorBlur 	( .Actor:Self 00000001 )
  158:  Call     SetActorSpeed 	( .Actor:Self *Fixed[10.0] )
  16C:  Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  188:  Add  *Var[0]  000000C8 
  198:  Call     SetGoalToPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  1B4:  Call     RunToGoal   	( .Actor:Self 00000000 .False )
  1CC:  Call     8027D7F0 ( )
  1D8:  Call     UseCamPreset 	( 00000002 )
  1E8:  ExecWait 80298BF0 
  1F4:  Call     8027D32C ( FFFFFF81 )
  204:  Call     RemoveActor 	( .Actor:Self )
  214:  Return
  21C:  End

% Origin: HINT
#new:Script $Script_NextTurn_8021E0B0
    0:  Call     GetActorVar 	( .Actor:Self 00000000 *Var[0] )
   18:  ConstAND *Var[0] FFFFFFFE 
   28:  Call     SetActorVar 	( .Actor:Self 00000000 *Var[0] )
   40:  Return
   48:  End

% Origin: HINT
#new:Script $Script_Init_8021E100
    0:  Call     BindIdle    	( .Actor:Self $Script_Idle_8021D774 )
   14:  Call     BindTakeTurn 	( .Actor:Self $Script_TakeTurn_80223B24 )
   28:  Call     BindHandleEvent 	( .Actor:Self $Script_HandleEvent_8021E6D8 )
   3C:  Call     BindNextTurn 	( .Actor:Self $Script_NextTurn_8021E0B0 )
   50:  Call     GetBattleVar 	( 00000002 *Var[0] )
   64:  If  *Var[0]  ==  00000000 
   74:  	Call     SetBattleVar 	( 00000002 FFFFFFFF )
   88:  EndIf
   90:  Call     SetActorVar 	( .Actor:Self 00000000 00000000 )
   A8:  Call     SetActorVar 	( .Actor:Self 00000001 00000000 )
   C0:  Call     SetActorVar 	( .Actor:Self 00000002 00000000 )
   D8:  Call     SetActorVar 	( .Actor:Self 00000003 00000000 )
   F0:  Call     SetActorVar 	( .Actor:Self 00000004 00000000 )
  108:  Call     SetActorVar 	( .Actor:Self 00000005 00000000 )
  120:  Call     SetActorVar 	( .Actor:Self 00000006 00000000 )
  138:  Call     SetActorVar 	( .Actor:Self 00000007 00000000 )
  150:  Call     SetActorVar 	( .Actor:Self 00000008 00000000 )
  168:  Call     SetActorVar 	( .Actor:Self 00000009 FFFFFFFF )
  180:  Call     SetActorVar 	( .Actor:Self 0000000A 00000000 )
  198:  Call     SetActorVar 	( .Actor:Self 0000000B FFFFFFFF )
  1B0:  Return
  1B8:  End

#new:Script $Script_Init_8021E2C0
    0:  Call     BindIdle    	( .Actor:Self $Script_Idle_8021D774 )
   14:  Call     BindTakeTurn 	( .Actor:Self $Script_TakeTurn_80223B24 )
   28:  Call     BindHandleEvent 	( .Actor:Self $Script_HandleEvent_8021EDF0 )
   3C:  Call     GetBattleVar 	( 00000002 *Var[0] )
   50:  If  *Var[0]  ==  00000000 
   60:  	Call     SetBattleVar 	( 00000002 FFFFFFFF )
   74:  EndIf
   7C:  Call     SetActorVar 	( .Actor:Self 00000000 00000000 )
   94:  Call     SetActorVar 	( .Actor:Self 00000001 00000000 )
   AC:  Call     SetActorVar 	( .Actor:Self 00000002 00000000 )
   C4:  Call     SetActorVar 	( .Actor:Self 00000003 00000000 )
   DC:  Call     SetActorVar 	( .Actor:Self 00000004 00000000 )
   F4:  Call     SetActorVar 	( .Actor:Self 00000005 00000000 )
  10C:  Call     SetActorVar 	( .Actor:Self 00000006 00000000 )
  124:  Call     SetActorVar 	( .Actor:Self 00000007 00000000 )
  13C:  Call     SetActorVar 	( .Actor:Self 00000008 00000000 )
  154:  Call     SetActorVar 	( .Actor:Self 00000009 FFFFFFFF )
  16C:  Call     SetActorVar 	( .Actor:Self 0000000A 00000000 )
  184:  Call     SetActorVar 	( .Actor:Self 0000000B FFFFFFFF )
  19C:  Return
  1A4:  End

#new:Script $Script_8021E46C
    0:  Call     GetActorVar 	( .Actor:Self 00000001 *Var[0] )
   18:  If  *Var[0]  ==  00000001 
   28:  	Return
   30:  EndIf
   38:  Call     GetActorVar 	( .Actor:Self 00000009 *Var[0] )
   50:  Call     ActorExists 	( *Var[0] *Var[1] )
   64:  If  *Var[1]  ==  00000000 
   74:  	Return
   7C:  EndIf
   84:  Call     SetActorVar 	( .Actor:Self 0000000A 00000000 )
   9C:  Call     GetLastElement ( *Var[A] )
   AC:  If  *Var[A]  &  20000000 
   BC:  	Label    00000000 
   C8:  	Call     GetBattleFlags ( *Var[A] )
   D8:  	If  *Var[A]  &  00000100 
   E8:  		Wait     00000001 
   F4:  		Goto     00000000 
  100:  	EndIf
  108:  EndIf
  110:  Call     GetActorVar 	( .Actor:Self 00000009 *Var[0] )
  128:  Call     SetActorVar 	( .Actor:Self 00000009 FFFFFFFF )
  140:  Call     GetActorFlags 	( .Actor:Self *Var[A] )
  154:  If  *Var[A]  &  00000200 
  164:  	Call     SetSpriteEventBits 	( .Actor:Self 00000002 00400000 .False )
  180:  Else
  188:  	Call     SetSpriteEventBits 	( .Actor:Self 00000001 00400000 .False )
  1A4:  EndIf
  1AC:  Call     GetActorPos 	( *Var[0] *Var[1] *Var[2] *Var[3] )
  1C8:  Call     RemoveActor 	( *Var[0] )
  1D8:  Thread
  1E0:  	Add  *Var[3]  00000002 
  1F0:  	Loop     00000002 
  1FC:  		Call     PlayEffect  	( {FX:BigSmokePuff} *Var[1] *Var[2] *Var[3] 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  240:  		Wait     00000002 
  24C:  	EndLoop
  254:  EndThread
  25C:  Return
  264:  End

#new:Script $Script_HandleEvent_8021E6D8
    0:  Call     UseIdleAnimation 	( .Actor:Self .False )
   14:  Call     EnableIdleScript 	( .Actor:Self 00000000 )
   28:  Call     SetSpriteAlpha ( .Actor:Self 00000001 000000FF )
   40:  Call     GetEventType 	( .Actor:Self *Var[0] )
   54:  Switch  *Var[0] 
   60:  	Case  ==  .Event:HitCombo
   6C:  		Call     GetActorVar 	( .Actor:Self 00000000 *Var[0] )
   84:  		ConstOR  *Var[0] 00000001 
   94:  		Call     SetActorVar 	( .Actor:Self 00000000 *Var[0] )
   AC:  		SetConst  *Var[0]  00000001 
   BC:  		SetConst  *Var[1]  00560004 
   CC:  		ExecWait DoNormalHit 
   D8:  	CaseOR  ==  .Event:Hit
   E4:  	CaseOR  ==  .Event:UpAndAway
   F0:  		SetConst  *Var[0]  00000001 
  100:  		SetConst  *Var[1]  00560004 
  110:  		ExecWait DoNormalHit 
  11C:  		ExecWait $Script_8021E46C 
  128:  	EndCaseGroup
  130:  	Case  ==  .Event:BurnHit
  13C:  		SetConst  *Var[0]  00000001 
  14C:  		SetConst  *Var[1]  00560005 
  15C:  		SetConst  *Var[2]  00560006 
  16C:  		ExecWait DoBurnHit 
  178:  		ExecWait $Script_8021E46C 
  184:  	Case  ==  .Event:BurnDeath
  190:  		SetConst  *Var[0]  00000001 
  1A0:  		SetConst  *Var[1]  00560005 
  1B0:  		SetConst  *Var[2]  00560006 
  1C0:  		ExecWait DoBurnHit 
  1CC:  		ExecWait $Script_8021E46C 
  1D8:  		SetConst  *Var[0]  00000001 
  1E8:  		SetConst  *Var[1]  00560006 
  1F8:  		ExecWait DoDeath 
  204:  		Return
  20C:  	Case  ==  .Event:MultibounceHit
  218:  		SetConst  *Var[0]  00000001 
  228:  		SetConst  *Var[1]  00560004 
  238:  		ExecWait 8029B998 
  244:  		ExecWait $Script_8021E46C 
  250:  	Case  ==  .Event:MultibounceDeath
  25C:  		SetConst  *Var[0]  00000001 
  26C:  		SetConst  *Var[1]  00560004 
  27C:  		ExecWait 8029B998 
  288:  		ExecWait $Script_8021E46C 
  294:  		SetConst  *Var[0]  00000001 
  2A4:  		SetConst  *Var[1]  00560004 
  2B4:  		ExecWait DoDeath 
  2C0:  		Return
  2C8:  	Case  ==  00000017
  2D4:  		SetConst  *Var[0]  00000001 
  2E4:  		SetConst  *Var[1]  00560001 
  2F4:  		ExecWait DoImmune 
  300:  	Case  ==  .Event:Immune
  30C:  		SetConst  *Var[0]  00000001 
  31C:  		SetConst  *Var[1]  00560001 
  32C:  		ExecWait DoImmune 
  338:  		Call     GetActorVar 	( .Actor:Self 00000000 *Var[0] )
  350:  		If  *Var[0]  &  00000001 
  360:  			ExecWait $Script_8021E46C 
  36C:  			Return
  374:  		EndIf
  37C:  		Call     GetStatusFlags ( .Actor:Self *Var[0] )
  390:  		If  *Var[0]  !=  00000000 
  3A0:  			ExecWait $Script_8021E46C 
  3AC:  		EndIf
  3B4:  	Case  ==  .Event:Death
  3C0:  		SetConst  *Var[0]  00000001 
  3D0:  		SetConst  *Var[1]  00560004 
  3E0:  		ExecWait DoNormalHit 
  3EC:  		ExecWait $Script_8021E46C 
  3F8:  		Wait     0000000A 
  404:  		SetConst  *Var[0]  00000001 
  414:  		SetConst  *Var[1]  00560004 
  424:  		ExecWait DoDeath 
  430:  		Return
  438:  	Case  ==  .Event:RecoverStatus
  444:  		SetConst  *Var[0]  00000001 
  454:  		SetConst  *Var[1]  00560001 
  464:  		ExecWait DoRecover 
  470:  	Case  ==  .Event:ScareAway
  47C:  		ExecWait $Script_8021E46C 
  488:  		Call     SetAnimation 	( .Actor:Self 00000001 00560004 )
  4A0:  		Call     SetActorJumpscale 	( .Actor:Self *Fixed[1.5] )
  4B4:  		Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  4D0:  		Call     SetGoalToPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  4EC:  		Call     JumpToGoal  	( .Actor:Self 0000000F 00000000 00000001 00000000 )
  50C:  		Wait     0000000F 
  518:  		Call     SetAnimation 	( .Actor:Self 00000001 00560002 )
  530:  		ExecWait $Script_RunAway 
  53C:  		Return
  544:  	Case  ==  .Event:BeginAirLift
  550:  		SetConst  *Var[0]  00000001 
  560:  		SetConst  *Var[1]  00560002 
  570:  		ExecWait DoAirLift 
  57C:  	Case  ==  .Event:BlowAway
  588:  		ExecWait $Script_8021E46C 
  594:  		Call     GetStatusFlags ( .Actor:Self *Var[0] )
  5A8:  		If  *Var[0]  !&  0035D000 
  5B8:  			If  *Var[0]  &  00080000 
  5C8:  				Call     SetSpriteOffset 	( .Actor:Self 00000001 00000000 00000002 00000000 )
  5E8:  			Else
  5F0:  				Call     SetSpriteOffset 	( .Actor:Self 00000001 FFFFFFFC 00000005 00000000 )
  610:  			EndIf
  618:  		EndIf
  620:  		SetConst  *Var[0]  00000001 
  630:  		SetConst  *Var[1]  00560004 
  640:  		ExecWait DoBlowAway 
  64C:  		Return
  654:  	Case  ==  .Event:AirLiftFailed
  660:  		SetConst  *Var[0]  00000001 
  670:  		SetConst  *Var[1]  00560001 
  680:  		ExecWait DoImmune 
  68C:  	Case  ==  .Event:StarBeam
  698:  		SetConst  *Var[0]  00000001 
  6A8:  		SetConst  *Var[1]  00560004 
  6B8:  		ExecWait DoNormalHit 
  6C4:  		ExecWait $Script_8021E46C 
  6D0:  	Default
  6D8:  EndSwitch
  6E0:  Call     EnableIdleScript 	( .Actor:Self 00000001 )
  6F4:  Call     UseIdleAnimation 	( .Actor:Self .True )
  708:  Return
  710:  End

#new:Script $Script_HandleEvent_8021EDF0
    0:  Call     UseIdleAnimation 	( .Actor:Self .False )
   14:  Call     EnableIdleScript 	( .Actor:Self 00000000 )
   28:  Call     SetSpriteAlpha ( .Actor:Self 00000002 000000FF )
   40:  Call     GetEventType 	( .Actor:Self *Var[0] )
   54:  Switch  *Var[0] 
   60:  	Case  ==  .Event:HitCombo
   6C:  		Call     GetActorVar 	( .Actor:Self 00000000 *Var[0] )
   84:  		ConstOR  *Var[0] 00000001 
   94:  		Call     SetActorVar 	( .Actor:Self 00000000 *Var[0] )
   AC:  		ExecWait $Script_8021D784 
   B8:  		SetConst  *Var[0]  00000002 
   C8:  		SetConst  *Var[1]  00570004 
   D8:  		ExecWait DoNormalHit 
   E4:  	CaseOR  ==  .Event:Hit
   F0:  	CaseOR  ==  .Event:FallTrigger
   FC:  		ExecWait $Script_8021D784 
  108:  		SetConst  *Var[0]  00000002 
  118:  		SetConst  *Var[1]  00570004 
  128:  		ExecWait DoNormalHit 
  134:  		ExecWait $Script_8021E46C 
  140:  		ExecWait $Script_8021D890 
  14C:  	EndCaseGroup
  154:  	Case  ==  .Event:UpAndAway
  160:  		SetConst  *Var[0]  00000002 
  170:  		SetConst  *Var[1]  00570004 
  180:  		ExecWait DoNormalHit 
  18C:  		ExecWait $Script_8021E46C 
  198:  	CaseOR  ==  .Event:BurnHit
  1A4:  	CaseOR  ==  0000000F
  1B0:  		ExecWait $Script_8021D784 
  1BC:  		SetConst  *Var[0]  00000002 
  1CC:  		SetConst  *Var[1]  00570005 
  1DC:  		SetConst  *Var[2]  00570006 
  1EC:  		ExecWait DoBurnHit 
  1F8:  		ExecWait $Script_8021E46C 
  204:  		ExecWait $Script_8021D890 
  210:  	EndCaseGroup
  218:  	Case  ==  .Event:BurnDeath
  224:  		SetConst  *Var[0]  00000002 
  234:  		SetConst  *Var[1]  00570005 
  244:  		SetConst  *Var[2]  00570006 
  254:  		ExecWait DoBurnHit 
  260:  		ExecWait $Script_8021E46C 
  26C:  		SetConst  *Var[0]  00000002 
  27C:  		SetConst  *Var[1]  00570006 
  28C:  		ExecWait DoDeath 
  298:  		Return
  2A0:  	Case  ==  .Event:MultibounceHit
  2AC:  		SetConst  *Var[0]  00000002 
  2BC:  		SetConst  *Var[1]  00570004 
  2CC:  		ExecWait 8029B998 
  2D8:  		ExecWait $Script_8021E46C 
  2E4:  	Case  ==  .Event:MultibounceDeath
  2F0:  		SetConst  *Var[0]  00000002 
  300:  		SetConst  *Var[1]  00570004 
  310:  		ExecWait 8029B998 
  31C:  		ExecWait $Script_8021E46C 
  328:  		SetConst  *Var[0]  00000002 
  338:  		SetConst  *Var[1]  00570004 
  348:  		ExecWait DoDeath 
  354:  		Return
  35C:  	Case  ==  00000017
  368:  		SetConst  *Var[0]  00000002 
  378:  		SetConst  *Var[1]  00570001 
  388:  		ExecWait DoImmune 
  394:  	Case  ==  .Event:Immune
  3A0:  		SetConst  *Var[0]  00000002 
  3B0:  		SetConst  *Var[1]  00570001 
  3C0:  		ExecWait DoImmune 
  3CC:  		Call     GetActorVar 	( .Actor:Self 00000000 *Var[0] )
  3E4:  		If  *Var[0]  &  00000001 
  3F4:  			ExecWait $Script_8021E46C 
  400:  			Return
  408:  		EndIf
  410:  		Call     GetStatusFlags ( .Actor:Self *Var[0] )
  424:  		If  *Var[0]  !=  00000000 
  434:  			ExecWait $Script_8021E46C 
  440:  		EndIf
  448:  	Case  ==  .Event:Death
  454:  		SetConst  *Var[0]  00000002 
  464:  		SetConst  *Var[1]  00570004 
  474:  		ExecWait DoNormalHit 
  480:  		ExecWait $Script_8021E46C 
  48C:  		Wait     0000000A 
  498:  		SetConst  *Var[0]  00000002 
  4A8:  		SetConst  *Var[1]  00570004 
  4B8:  		ExecWait DoDeath 
  4C4:  		Return
  4CC:  	Case  ==  .Event:BeginFirstStrike
  4D8:  		Call     SetActorPos 	( .Actor:Self 00000014 00000000 00000000 )
  4F4:  		Call     HPBarToCurrent ( .Actor:Self )
  504:  	Case  ==  .Event:EndFirstStrike
  510:  		Call     SetAnimation 	( .Actor:Self 00000002 00570001 )
  528:  		Call     SetGoalToHome 	( .Actor:Self )
  538:  		Call     SetActorSpeed 	( .Actor:Self *Fixed[4.0] )
  54C:  		Call     MoveToGoal  	( .Actor:Self 00000000 00000001 .Easing:Linear )
  568:  		Call     SetAnimation 	( .Actor:Self 00000002 00570001 )
  580:  		Call     HPBarToHome 	( .Actor:Self )
  590:  	Case  ==  .Event:RecoverStatus
  59C:  		SetConst  *Var[0]  00000002 
  5AC:  		SetConst  *Var[1]  00570001 
  5BC:  		ExecWait DoRecover 
  5C8:  	Case  ==  .Event:ScareAway
  5D4:  		ExecWait $Script_8021E46C 
  5E0:  		Call     SetAnimation 	( .Actor:Self 00000002 00570004 )
  5F8:  		Call     SetActorJumpscale 	( .Actor:Self *Fixed[1.5] )
  60C:  		Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  628:  		Call     SetGoalToPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  644:  		Call     JumpToGoal  	( .Actor:Self 0000000F 00000000 00000001 00000000 )
  664:  		Wait     0000000F 
  670:  		Call     SetAnimation 	( .Actor:Self 00000002 00570002 )
  688:  		ExecWait $Script_RunAway 
  694:  		Return
  69C:  	Case  ==  .Event:BeginAirLift
  6A8:  		SetConst  *Var[0]  00000002 
  6B8:  		SetConst  *Var[1]  00570002 
  6C8:  		ExecWait DoAirLift 
  6D4:  	Case  ==  .Event:BlowAway
  6E0:  		ExecWait $Script_8021E46C 
  6EC:  		Call     GetStatusFlags ( .Actor:Self *Var[0] )
  700:  		If  *Var[0]  !&  0035D000 
  710:  			If  *Var[0]  &  00080000 
  720:  				Call     SetSpriteOffset 	( .Actor:Self 00000002 FFFFFFFD 00000000 00000000 )
  740:  			Else
  748:  				Call     SetSpriteOffset 	( .Actor:Self 00000002 FFFFFFF1 00000000 00000000 )
  768:  			EndIf
  770:  		EndIf
  778:  		SetConst  *Var[0]  00000002 
  788:  		SetConst  *Var[1]  00570004 
  798:  		ExecWait DoBlowAway 
  7A4:  		Return
  7AC:  	Case  ==  .Event:AirLiftFailed
  7B8:  		SetConst  *Var[0]  00000002 
  7C8:  		SetConst  *Var[1]  00570001 
  7D8:  		ExecWait DoImmune 
  7E4:  	Case  ==  .Event:StarBeam
  7F0:  		SetConst  *Var[0]  00000002 
  800:  		SetConst  *Var[1]  00570004 
  810:  		ExecWait DoNormalHit 
  81C:  		ExecWait $Script_8021E46C 
  828:  	Default
  830:  EndSwitch
  838:  Call     EnableIdleScript 	( .Actor:Self 00000001 )
  84C:  Call     UseIdleAnimation 	( .Actor:Self .True )
  860:  Return
  868:  End

#new:Script $Script_HealOne
    0:  Call     SetActorVar 	( .Actor:Self 0000000A 00000000 )
   18:  Call     SetActorVar 	( .Actor:Self 0000000B 00000000 )
   30:  Call     ActorVarAdd 	( .Actor:Self 00000004 00000001 )
   48:  Call     UseIdleAnimation 	( .Actor:Self .False )
   5C:  Call     EnableIdleScript 	( .Actor:Self 00000000 )
   70:  Call     SetTargetActor ( .Actor:Self .Actor:Player )
   84:  Call     UseCamPreset 	( 0000000E )
   94:  Call     CamTargetActor ( .Actor:Self )
   A4:  Call     MoveCamOver 	( 0000000F )
   B4:  Wait     0000000F 
   C0:  Call     GetActorFlags 	( .Actor:Self *Var[0] )
   D4:  If  *Var[0]  !&  00000200 
   E4:  	Call     SetAnimation 	( .Actor:Self 00000001 00560002 )
   FC:  Else
  104:  	Call     SetAnimation 	( .Actor:Self 00000002 00570002 )
  11C:  EndIf
  124:  Wait     00000005 
  130:  Call     PlaySoundAtActor 	( .Actor:Self .Sound:SpellCast1 )
  144:  Call     GetActorFlags 	( .Actor:Self *Var[0] )
  158:  If  *Var[0]  !&  00000200 
  168:  	Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  184:  	Call     GetStatusFlags ( .Actor:Self *Var[A] )
  198:  	If  *Var[A]  &  00080000 
  1A8:  		Sub  *Var[0]  00000006 
  1B8:  		Add  *Var[1]  0000000C 
  1C8:  		Sub  *Var[2]  00000002 
  1D8:  		Call     PlayEffect  	( {FX:RadialFlowOut:RedEnergy} *Var[0] *Var[1] *Var[2] *Fixed[0.12011719] 0000001E 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  21C:  	Else
  224:  		Sub  *Var[0]  00000010 
  234:  		Add  *Var[1]  0000001F 
  244:  		Sub  *Var[2]  00000002 
  254:  		Call     PlayEffect  	( {FX:RadialFlowOut:RedEnergy} *Var[0] *Var[1] *Var[2] *Fixed[0.30078125] 0000001E 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  298:  	EndIf
  2A0:  Else
  2A8:  	Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  2C4:  	Call     GetStatusFlags ( .Actor:Self *Var[A] )
  2D8:  	If  *Var[A]  &  00080000 
  2E8:  		Sub  *Var[0]  0000000C 
  2F8:  		Add  *Var[1]  0000000E 
  308:  		Sub  *Var[2]  00000002 
  318:  		Call     PlayEffect  	( {FX:RadialFlowOut:RedEnergy} *Var[0] *Var[1] *Var[2] *Fixed[0.12011719] 0000001E 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  35C:  	Else
  364:  		Sub  *Var[0]  0000001E 
  374:  		Add  *Var[1]  00000024 
  384:  		Sub  *Var[2]  00000002 
  394:  		Call     PlayEffect  	( {FX:RadialFlowOut:RedEnergy} *Var[0] *Var[1] *Var[2] *Fixed[0.30078125] 0000001E 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  3D8:  	EndIf
  3E0:  EndIf
  3E8:  Wait     0000001E 
  3F4:  Call     GetActorFlags 	( .Actor:Self *Var[0] )
  408:  If  *Var[0]  !&  00000200 
  418:  	Call     SetAnimation 	( .Actor:Self 00000001 00560001 )
  430:  Else
  438:  	Call     SetAnimation 	( .Actor:Self 00000002 00570001 )
  450:  EndIf
  458:  Wait     00000005 
  464:  Thread
  46C:  	Wait     00000005 
  478:  	Call     PlaySoundAtActor 	( *Var[B] 0000206D )
  48C:  	Call     PlaySoundAtActor 	( *Var[B] 00000214 )
  4A0:  	Wait     0000001E 
  4AC:  	Call     PlaySoundAtActor 	( *Var[B] 0000025C )
  4C0:  EndThread
  4C8:  Thread
  4D0:  	Call     8026BF48 ( 00000001 )
  4E0:  	Call     HealActor   	( *Var[B] 00000000 00000000 )
  4F8:  	Call     8026BF48 ( 00000000 )
  508:  EndThread
  510:  Call     8027114C ( )
  51C:  Call     UseCamPreset 	( 00000002 )
  52C:  Call     MoveCamOver 	( 0000000A )
  53C:  Wait     0000000A 
  548:  Call     8027D7F0 ( )
  554:  Call     EnableIdleScript 	( .Actor:Self 00000001 )
  568:  Call     UseIdleAnimation 	( .Actor:Self .True )
  57C:  Return
  584:  End

#new:Script $Script_HealAll
    0:  Call     SetActorVar 	( .Actor:Self 0000000A 00000000 )
   18:  Call     SetActorVar 	( .Actor:Self 0000000B 00000001 )
   30:  Call     ActorVarAdd 	( .Actor:Self 00000003 00000001 )
   48:  Call     UseIdleAnimation 	( .Actor:Self .False )
   5C:  Call     EnableIdleScript 	( .Actor:Self 00000000 )
   70:  Call     SetTargetActor ( .Actor:Self .Actor:Player )
   84:  Call     UseCamPreset 	( 0000000E )
   94:  Call     CamTargetActor ( .Actor:Self )
   A4:  Call     MoveCamOver 	( 0000000F )
   B4:  Wait     0000000F 
   C0:  Call     GetActorFlags 	( .Actor:Self *Var[0] )
   D4:  If  *Var[0]  !&  00000200 
   E4:  	Call     SetAnimation 	( .Actor:Self 00000001 00560002 )
   FC:  Else
  104:  	Call     SetAnimation 	( .Actor:Self 00000002 00570002 )
  11C:  EndIf
  124:  Wait     00000005 
  130:  Call     PlaySoundAtActor 	( .Actor:Self .Sound:SpellCast1 )
  144:  Call     GetActorFlags 	( .Actor:Self *Var[0] )
  158:  If  *Var[0]  !&  00000200 
  168:  	Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  184:  	Call     GetStatusFlags ( .Actor:Self *Var[A] )
  198:  	If  *Var[A]  &  00080000 
  1A8:  		Sub  *Var[0]  00000006 
  1B8:  		Add  *Var[1]  0000000C 
  1C8:  		Sub  *Var[2]  00000002 
  1D8:  		Call     PlayEffect  	( {FX:RadialFlowOut:RedEnergy} *Var[0] *Var[1] *Var[2] *Fixed[0.12011719] 0000001E 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  21C:  	Else
  224:  		Sub  *Var[0]  00000010 
  234:  		Add  *Var[1]  0000001F 
  244:  		Sub  *Var[2]  00000002 
  254:  		Call     PlayEffect  	( {FX:RadialFlowOut:RedEnergy} *Var[0] *Var[1] *Var[2] *Fixed[0.30078125] 0000001E 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  298:  	EndIf
  2A0:  Else
  2A8:  	Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  2C4:  	Call     GetStatusFlags ( .Actor:Self *Var[A] )
  2D8:  	If  *Var[A]  &  00080000 
  2E8:  		Sub  *Var[0]  0000000C 
  2F8:  		Add  *Var[1]  0000000E 
  308:  		Sub  *Var[2]  00000002 
  318:  		Call     PlayEffect  	( {FX:RadialFlowOut:RedEnergy} *Var[0] *Var[1] *Var[2] *Fixed[0.12011719] 0000001E 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  35C:  	Else
  364:  		Sub  *Var[0]  0000001E 
  374:  		Add  *Var[1]  00000024 
  384:  		Sub  *Var[2]  00000002 
  394:  		Call     PlayEffect  	( {FX:RadialFlowOut:RedEnergy} *Var[0] *Var[1] *Var[2] *Fixed[0.30078125] 0000001E 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  3D8:  	EndIf
  3E0:  EndIf
  3E8:  Wait     0000001E 
  3F4:  Call     GetActorFlags 	( .Actor:Self *Var[0] )
  408:  If  *Var[0]  !&  00000200 
  418:  	Call     SetAnimation 	( .Actor:Self 00000001 00560001 )
  430:  Else
  438:  	Call     SetAnimation 	( .Actor:Self 00000002 00570001 )
  450:  EndIf
  458:  Wait     00000005 
  464:  Call     CreateTargetList 	( 00008002 )
  474:  Call     InitTargetIterator 	( )
  480:  Label    00000000 
  48C:  Set  *Flag[00]  00000000 
  49C:  Call     GetOwnerTarget ( *Var[0] *Var[1] )
  4B0:  Call     GetActorType 	( *Var[0] *Var[1] )
  4C4:  If  *Var[1]  ==  00000047 
  4D4:  	Call     GetActorVar 	( *Var[0] 00000008 *Var[1] )
  4EC:  	If  *Var[1]  ==  00000001 
  4FC:  		Set  *Flag[00]  00000001 
  50C:  	EndIf
  514:  EndIf
  51C:  If  *Flag[00]  ==  00000000 
  52C:  	Thread
  534:  		Wait     00000005 
  540:  		Call     PlaySoundAtActor 	( *Var[0] 0000206D )
  554:  		Call     PlaySoundAtActor 	( *Var[0] 00000214 )
  568:  		Wait     0000001E 
  574:  		Call     PlaySoundAtActor 	( *Var[0] 0000025C )
  588:  	EndThread
  590:  	Thread
  598:  		Call     8026BF48 ( 00000001 )
  5A8:  		Call     HealActor   	( *Var[0] 00000000 00000001 )
  5C0:  		Call     8026BF48 ( 00000000 )
  5D0:  	EndThread
  5D8:  EndIf
  5E0:  Call     ChooseNextTarget 	( .Iter:Next *Var[0] )
  5F4:  If  *Var[0]  !=  FFFFFFFF 
  604:  	Goto     00000000 
  610:  EndIf
  618:  Call     8027114C ( )
  624:  Wait     00000001 
  630:  Call     UseCamPreset 	( 00000002 )
  640:  Call     MoveCamOver 	( 0000000A )
  650:  Wait     0000000A 
  65C:  Call     8027D7F0 ( )
  668:  Call     EnableIdleScript 	( .Actor:Self 00000001 )
  67C:  Call     UseIdleAnimation 	( .Actor:Self .True )
  690:  Return
  698:  End

#new:Script $Script_ShapeSpell
    0:  Call     SetActorVar 	( .Actor:Self 0000000B 00000002 )
   18:  Set  *Flag[00]  00000000 
   28:  Set  *Flag[01]  00000000 
   38:  Call     GetActorVar 	( .Actor:Self 0000000A *Var[0] )
   50:  If  *Var[0]  ==  00000001 
   60:  	Set  *Flag[00]  00000001 
   70:  	Call     GetActorVar 	( .Actor:Self 00000009 *Var[A] )
   88:  EndIf
   90:  Call     GetActorFlags 	( .Actor:Self *Var[0] )
   A4:  If  *Var[0]  &  00000200 
   B4:  	Set  *Flag[01]  00000001 
   C4:  EndIf
   CC:  Call     UseIdleAnimation 	( .Actor:Self .False )
   E0:  If  *Flag[00]  ==  00000001 
   F0:  	Call     UseIdleAnimation 	( *Var[A] .False )
  104:  EndIf
  10C:  Call     SetTargetActor ( .Actor:Self .Actor:Player )
  120:  Call     GetBattlePhase ( *Var[0] )
  130:  If  *Var[0]  ==  .Phase:FirstStrike
  140:  	Call     UseCamPreset 	( 00000002 )
  150:  	Call     MoveCamOver 	( 00000001 )
  160:  Else
  168:  	Call     UseCamPreset 	( 00000002 )
  178:  	Call     MoveCamOver 	( 0000000A )
  188:  EndIf
  190:  Call     PlaySoundAtActor 	( .Actor:Self .Sound:SpellCast1 )
  1A4:  If  *Flag[01]  ==  00000000 
  1B4:  	If  *Flag[00]  ==  00000001 
  1C4:  		Call     SetAnimation 	( *Var[A] 00000001 00560002 )
  1DC:  		Call     GetActorPos 	( *Var[A] *Var[0] *Var[1] *Var[2] )
  1F8:  		Sub  *Var[0]  00000011 
  208:  		Add  *Var[1]  00000021 
  218:  		Call     PlayEffect  	( {FX:GatherMagic:Pink} *Var[0] *Var[1] *Var[2] *Fixed[0.5] 0000001E 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  25C:  	EndIf
  264:  	Call     SetAnimation 	( .Actor:Self 00000001 00560002 )
  27C:  	Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  298:  	Call     GetStatusFlags ( .Actor:Self *Var[3] )
  2AC:  	If  *Var[3]  &  00080000 
  2BC:  		Sub  *Var[0]  00000006 
  2CC:  		Add  *Var[1]  0000000D 
  2DC:  	Else
  2E4:  		Sub  *Var[0]  00000011 
  2F4:  		Add  *Var[1]  00000021 
  304:  	EndIf
  30C:  	Call     PlayEffect  	( {FX:GatherMagic:Pink} *Var[0] *Var[1] *Var[2] *Fixed[0.5] 0000001E 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  350:  Else
  358:  	If  *Flag[00]  ==  00000001 
  368:  		Call     SetAnimation 	( *Var[A] 00000001 00570002 )
  380:  		Call     GetActorPos 	( *Var[A] *Var[0] *Var[1] *Var[2] )
  39C:  		Sub  *Var[0]  0000001E 
  3AC:  		Add  *Var[1]  00000024 
  3BC:  		Call     PlayEffect  	( {FX:GatherMagic:Pink} *Var[0] *Var[1] *Var[2] *Fixed[0.5] 0000001E 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  400:  	EndIf
  408:  	Call     SetAnimation 	( .Actor:Self 00000002 00570002 )
  420:  	Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  43C:  	Call     GetStatusFlags ( .Actor:Self *Var[3] )
  450:  	If  *Var[3]  &  00080000 
  460:  		Sub  *Var[0]  0000000C 
  470:  		Add  *Var[1]  0000000E 
  480:  	Else
  488:  		Sub  *Var[0]  0000001E 
  498:  		Add  *Var[1]  00000024 
  4A8:  	EndIf
  4B0:  	Call     PlayEffect  	( {FX:GatherMagic:Pink} *Var[0] *Var[1] *Var[2] *Fixed[0.5] 0000001E 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  4F4:  EndIf
  4FC:  Wait     0000001E 
  508:  Call     CheckPlayerHit ( .Actor:Self *Var[9] 00000000 00000000 00000001 00000010 )
  52C:  Switch  *Var[9] 
  538:  	CaseOR  ==  00000006 
  544:  	CaseOR  ==  00000005 
  550:  		If  *Flag[00]  ==  00000001 
  560:  			Call     PlaySoundAtActor 	( *Var[A] .Sound:SpellCast2 )
  574:  		EndIf
  57C:  		Call     PlaySoundAtActor 	( .Actor:Self .Sound:SpellCast2 )
  590:  		If  *Flag[01]  ==  00000000 
  5A0:  			If  *Flag[00]  ==  00000001 
  5B0:  				Call     SetAnimation 	( *Var[A] 00000001 00560003 )
  5C8:  			EndIf
  5D0:  			Call     SetAnimation 	( .Actor:Self 00000001 00560003 )
  5E8:  		Else
  5F0:  			If  *Flag[00]  ==  00000001 
  600:  				Call     SetAnimation 	( *Var[A] 00000001 00570003 )
  618:  			EndIf
  620:  			Call     SetAnimation 	( .Actor:Self 00000002 00570003 )
  638:  		EndIf
  640:  		Wait     00000005 
  64C:  		Call     SetGoalToTarget 	( .Actor:Self )
  65C:  		Call     GetGoalPos  	( .Actor:Self *Var[4] *Var[5] *Var[6] )
  678:  		Sub  *Var[4]  00000032 
  688:  		Set  *Var[5]  00000000 
  698:  		If  *Flag[01]  ==  00000000 
  6A8:  			If  *Flag[00]  ==  00000001 
  6B8:  				Call     GetActorPos 	( *Var[A] *Var[0] *Var[1] *Var[2] )
  6D4:  				Sub  *Var[0]  00000014 
  6E4:  				Add  *Var[1]  00000014 
  6F4:  				Call     $Function_80218150 ( *Var[0] *Var[1] *Var[6] *Var[4] *Var[5] *Var[6] 0000001E )
  71C:  			EndIf
  724:  			Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  740:  			Call     GetStatusFlags ( .Actor:Self *Var[3] )
  754:  			If  *Var[3]  &  00080000 
  764:  				Sub  *Var[0]  00000008 
  774:  				Add  *Var[1]  00000008 
  784:  			Else
  78C:  				Sub  *Var[0]  00000014 
  79C:  				Add  *Var[1]  00000014 
  7AC:  			EndIf
  7B4:  			Call     $Function_80218150 ( *Var[0] *Var[1] *Var[6] *Var[4] *Var[5] *Var[6] 0000001E )
  7DC:  		Else
  7E4:  			If  *Flag[00]  ==  00000001 
  7F4:  				Call     GetActorPos 	( *Var[A] *Var[0] *Var[1] *Var[2] )
  810:  				Sub  *Var[0]  00000014 
  820:  				Add  *Var[1]  00000014 
  830:  				Call     $Function_80218150 ( *Var[0] *Var[1] *Var[6] *Var[4] *Var[5] *Var[6] 0000001E )
  858:  			EndIf
  860:  			Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  87C:  			Call     GetStatusFlags ( .Actor:Self *Var[3] )
  890:  			If  *Var[3]  &  00080000 
  8A0:  				Sub  *Var[0]  00000008 
  8B0:  				Add  *Var[1]  00000008 
  8C0:  			Else
  8C8:  				Sub  *Var[0]  00000014 
  8D8:  				Add  *Var[1]  00000014 
  8E8:  			EndIf
  8F0:  			Call     $Function_80218150 ( *Var[0] *Var[1] *Var[6] *Var[4] *Var[5] *Var[6] 0000001E )
  918:  		EndIf
  920:  		Wait     00000032 
  92C:  		If  *Var[9]  ==  00000005 
  93C:  			Call     CheckPlayerHit ( .Actor:Self *Var[0] 80000000 00000000 00000000 00000000 )
  960:  		EndIf
  968:  		Wait     0000000F 
  974:  		Call     8027D7F0 ( )
  980:  		Call     UseIdleAnimation 	( .Actor:Self .True )
  994:  		If  *Flag[00]  ==  00000001 
  9A4:  			Call     UseIdleAnimation 	( *Var[A] .True )
  9B8:  		EndIf
  9C0:  		Return
  9C8:  	EndCaseGroup
  9D0:  EndSwitch
  9D8:  If  *Flag[00]  ==  00000001 
  9E8:  	Call     PlaySoundAtActor 	( *Var[A] .Sound:SpellCast2 )
  9FC:  EndIf
  A04:  Call     PlaySoundAtActor 	( .Actor:Self .Sound:SpellCast2 )
  A18:  If  *Flag[01]  ==  00000000 
  A28:  	If  *Flag[00]  ==  00000001 
  A38:  		Call     SetAnimation 	( *Var[A] 00000001 00560003 )
  A50:  	EndIf
  A58:  	Call     SetAnimation 	( .Actor:Self 00000001 00560003 )
  A70:  Else
  A78:  	If  *Flag[00]  ==  00000001 
  A88:  		Call     SetAnimation 	( *Var[A] 00000001 00570003 )
  AA0:  	EndIf
  AA8:  	Call     SetAnimation 	( .Actor:Self 00000002 00570003 )
  AC0:  EndIf
  AC8:  Wait     00000005 
  AD4:  Call     SetGoalToTarget 	( .Actor:Self )
  AE4:  Call     GetGoalPos  	( .Actor:Self *Var[4] *Var[5] *Var[6] )
  B00:  If  *Flag[01]  ==  00000000 
  B10:  	If  *Flag[00]  ==  00000001 
  B20:  		Call     GetActorPos 	( *Var[A] *Var[0] *Var[1] *Var[2] )
  B3C:  		Sub  *Var[0]  00000014 
  B4C:  		Add  *Var[1]  00000014 
  B5C:  		Call     $Function_80218150 ( *Var[0] *Var[1] *Var[6] *Var[4] *Var[5] *Var[6] 00000014 )
  B84:  	EndIf
  B8C:  	Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  BA8:  	Call     GetStatusFlags ( .Actor:Self *Var[3] )
  BBC:  	If  *Var[3]  &  00080000 
  BCC:  		Sub  *Var[0]  00000008 
  BDC:  		Add  *Var[1]  00000008 
  BEC:  	Else
  BF4:  		Sub  *Var[0]  00000014 
  C04:  		Add  *Var[1]  00000014 
  C14:  	EndIf
  C1C:  	Call     $Function_80218150 ( *Var[0] *Var[1] *Var[6] *Var[4] *Var[5] *Var[6] 00000014 )
  C44:  Else
  C4C:  	If  *Flag[00]  ==  00000001 
  C5C:  		Call     GetActorPos 	( *Var[A] *Var[0] *Var[1] *Var[2] )
  C78:  		Sub  *Var[0]  00000014 
  C88:  		Add  *Var[1]  00000014 
  C98:  		Call     $Function_80218150 ( *Var[0] *Var[1] *Var[6] *Var[4] *Var[5] *Var[6] 00000014 )
  CC0:  	EndIf
  CC8:  	Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  CE4:  	Call     GetStatusFlags ( .Actor:Self *Var[3] )
  CF8:  	If  *Var[3]  &  00080000 
  D08:  		Sub  *Var[0]  00000008 
  D18:  		Add  *Var[1]  00000008 
  D28:  	Else
  D30:  		Sub  *Var[0]  00000014 
  D40:  		Add  *Var[1]  00000014 
  D50:  	EndIf
  D58:  	Call     $Function_80218150 ( *Var[0] *Var[1] *Var[6] *Var[4] *Var[5] *Var[6] 00000014 )
  D80:  EndIf
  D88:  Wait     00000012 
  D94:  If  *Flag[00]  ==  00000001 
  DA4:  	Wait     00000002 
  DB0:  	Call     DamageTarget 	( .Actor:Self *Var[0] 10000010 00000000 00000000 00000000 00000020 )
  DD8:  Else
  DE0:  	Wait     00000002 
  DEC:  	Call     DamageTarget 	( .Actor:Self *Var[0] 10000010 00000000 00000000 00000003 00000020 )
  E14:  EndIf
  E1C:  Switch  *Var[0] 
  E28:  	CaseOR  ==  00000000 
  E34:  	CaseOR  ==  00000002 
  E40:  		Wait     00000014 
  E4C:  		Call     8027D7F0 ( )
  E58:  	EndCaseGroup
  E60:  EndSwitch
  E68:  Call     UseIdleAnimation 	( .Actor:Self .True )
  E7C:  If  *Flag[00]  ==  00000001 
  E8C:  	Call     UseIdleAnimation 	( *Var[A] .True )
  EA0:  EndIf
  EA8:  Return
  EB0:  End

#new:Script $Script_80221144
    0:  Call     CreateTargetList 	( 00008002 )
   10:  Call     InitTargetIterator 	( )
   1C:  Label    00000000 
   28:  Call     GetOwnerTarget ( *Var[0] *Var[1] )
   3C:  Call     GetIndexFromHome 	( *Var[0] *Var[1] )
   50:  Mod  *Var[1]  00000004 
   60:  Switch  *Var[1] 
   6C:  	Case  ==  00000000 
   78:  		Set  *Flag[0B]  00000001 
   88:  	Case  ==  00000001 
   94:  		Set  *Flag[0C]  00000001 
   A4:  	Case  ==  00000002 
   B0:  		Set  *Flag[0D]  00000001 
   C0:  	Case  ==  00000003 
   CC:  		Set  *Flag[0E]  00000001 
   DC:  EndSwitch
   E4:  Call     ChooseNextTarget 	( .Iter:Next *Var[0] )
   F8:  If  *Var[0]  !=  FFFFFFFF 
  108:  	Goto     00000000 
  114:  EndIf
  11C:  Set  *Var[0]  FFFFFFFF 
  12C:  Call     GetIndexFromHome 	( .Actor:Self *Var[1] )
  140:  Mod  *Var[1]  00000004 
  150:  Switch  *Var[1] 
  15C:  	Case  ==  00000000 
  168:  		If  *Flag[0C]  ==  00000000 
  178:  			Set  *Var[0]  00000001 
  188:  		EndIf
  190:  	Case  ==  00000001 
  19C:  		If  *Flag[0B]  ==  00000000 
  1AC:  			Set  *Var[0]  00000000 
  1BC:  		EndIf
  1C4:  		If  *Flag[0D]  ==  00000000 
  1D4:  			Set  *Var[0]  00000002 
  1E4:  		EndIf
  1EC:  	Case  ==  00000002 
  1F8:  		If  *Flag[0C]  ==  00000000 
  208:  			Set  *Var[0]  00000001 
  218:  		EndIf
  220:  		If  *Flag[0E]  ==  00000000 
  230:  			Set  *Var[0]  00000003 
  240:  		EndIf
  248:  	Case  ==  00000003 
  254:  		If  *Flag[0D]  ==  00000000 
  264:  			Set  *Var[0]  00000002 
  274:  		EndIf
  27C:  EndSwitch
  284:  If  *Var[0]  !=  FFFFFFFF 
  294:  	Call     GetActorFlags 	( .Actor:Self *Var[1] )
  2A8:  	If  *Var[1]  &  00000200 
  2B8:  		Add  *Var[0]  00000004 
  2C8:  	EndIf
  2D0:  EndIf
  2D8:  Return
  2E0:  End

#new:Script $Script_HandleEvent_8022142C
    0:  Return
    8:  End

#new:Script $Script_Init_8022143C
    0:  Call     BindHandleEvent 	( .Actor:Self $Script_HandleEvent_8022142C )
   14:  Call     SetActorVar 	( .Actor:Self 00000001 00000001 )
   2C:  Return
   34:  End

#new:Script $Script_Init_80221478
    0:  Call     BindHandleEvent 	( .Actor:Self $Script_HandleEvent_8022142C )
   14:  Call     SetActorVar 	( .Actor:Self 00000001 00000001 )
   2C:  Return
   34:  End

#new:DefenseTable $DefenseTable_802214B4
.Element:Normal 00000000
.Element:End

#new:DefenseTable $DefenseTable_802214C0
.Element:Normal 00000000
.Element:End

#new:StatusTable $StatusTable_802214CC
.Status:Normal      0`
.Status:Default     0`
.Status:Sleep       0`
.Status:Poison      0`
.Status:Frozen      0`
.Status:Dizzy       0`
.Status:Fear        0`
.Status:Static      0`
.Status:Paralyze    0`
.Status:Shrink      0`
.Status:Stop        0`
.Status:DefaultTurnMod    0`
.Status:SleepTurnMod      0`
.Status:PoisonTurnMod     0`
.Status:FrozenTurnMod     0`
.Status:DizzyTurnMod      0`
.Status:FearTurnMod       0`
.Status:StaticTurnMod     0`
.Status:ParalyzeTurnMod   0`
.Status:ShrinkTurnMod     0`
.Status:StopTurnMod       0`
.Status:End

#new:StatusTable $StatusTable_80221578
.Status:Normal      0`
.Status:Default     0`
.Status:Sleep       0`
.Status:Poison      0`
.Status:Frozen      0`
.Status:Dizzy       0`
.Status:Fear        0`
.Status:Static      0`
.Status:Paralyze    0`
.Status:Shrink      0`
.Status:Stop        0`
.Status:DefaultTurnMod    0`
.Status:SleepTurnMod      0`
.Status:PoisonTurnMod     0`
.Status:FrozenTurnMod     0`
.Status:DizzyTurnMod      0`
.Status:FearTurnMod       0`
.Status:StaticTurnMod     0`
.Status:ParalyzeTurnMod   0`
.Status:ShrinkTurnMod     0`
.Status:StopTurnMod       0`
.Status:End

#new:SpriteTable $SpriteTable_80221624
00800000 01000000 022300FF $IdleAnimations_8021D6D0 $DefenseTable_802214B4 00000020 00000000 FBF40000 00000000 

#new:SpriteTable $SpriteTable_80221648
00800000 01000000 F62300FF $IdleAnimations_8021D71C $DefenseTable_802214C0 00000020 00000000 00F80000 00000000 

#new:Actor $Magiclone
% stats
[Index]        4Fb 
[Level]        26`b 
[MaxHP]        11`b 
[Coins]         0`b 
[Flags]       00200000 
[StatusTable] $StatusTable_802214CC 
% ai
[SpriteCount]   1`s 
[SpriteTable] $SpriteTable_80221624 
[Script]      $Script_Init_8022143C 
% move effectiveness
[Escape]       40`b 
[Item]          0`b 
[AirLift]       0`b 
[Hurricane]     0`b % Bow's "Spook" as well
[UpAndAway]     0`b 
[PowerBounce]  75`b 
[SpinSmash]     0`b % weight (0-4)
% ui positions
[Size]         36`b  40`b % width height
[HealthBar]     0`b   0`b % dx dy
[StatusTurn]  -10`b  20`b % dx dy
[StatusIcon]   10`b  32`b % dx dy

#new:Actor $FlyingMagiclone
% stats
[Index]        50b 
[Level]        26`b 
[MaxHP]        11`b 
[Coins]         2`b 
[Flags]       00200200 
[StatusTable] $StatusTable_80221578 
% ai
[SpriteCount]   1`s 
[SpriteTable] $SpriteTable_80221648 
[Script]      $Script_Init_80221478 
% move effectiveness
[Escape]       40`b 
[Item]          0`b 
[AirLift]       0`b 
[Hurricane]     0`b % Bow's "Spook" as well
[UpAndAway]     0`b 
[PowerBounce]  75`b 
[SpinSmash]     0`b % weight (0-4)
% ui positions
[Size]         48`b  40`b % width height
[HealthBar]     0`b   0`b % dx dy
[StatusTurn]  -25`b  20`b % dx dy
[StatusIcon]    1`b  34`b % dx dy

#new:Vector3D $Vector3D_802216BC
0` -1000` 0`

#new:SpecialFormation $SpecialFormation_802216C8
$Magiclone $Vector3D_802216BC 00000000 00000000 00000000 00000000 00000000 

#new:SpecialFormation $SpecialFormation_802216E4
$FlyingMagiclone $Vector3D_802216BC 00000000 00000000 00000000 00000000 00000000 

#new:Script $Script_MakeCopy
    0:  Call     8026A14C ( FFFFFF81 00008002 *Var[0] )
   18:  If  *Var[0]  ==  00000001 
   28:  	ExecWait $Script_RunAway 
   34:  	Return
   3C:  EndIf
   44:  Call     SetActorVar 	( .Actor:Self 0000000A 00000001 )
   5C:  Call     SetActorVar 	( .Actor:Self 0000000B 00000003 )
   74:  Set  *Flag[00]  00000000 
   84:  Call     GetActorFlags 	( .Actor:Self *Var[0] )
   98:  If  *Var[0]  &  00000200 
   A8:  	Set  *Flag[00]  00000001 
   B8:  EndIf
   C0:  If  *Flag[00]  ==  00000000 
   D0:  	Call     SummonEnemy 	( $SpecialFormation_802216C8 00000000 )
   E4:  Else
   EC:  	Call     SummonEnemy 	( $SpecialFormation_802216E4 00000000 )
  100:  EndIf
  108:  Call     SetActorVar 	( .Actor:Self 00000009 *Var[0] )
  120:  Set  *Var[A]  *Var[0] 
  130:  Call     EnableIdleScript 	( .Actor:Self 00000000 )
  144:  Call     EnableIdleScript 	( *Var[A] 00000000 )
  158:  Call     UseIdleAnimation 	( .Actor:Self .False )
  16C:  Call     UseIdleAnimation 	( *Var[A] .False )
  180:  Call     SetTargetActor ( .Actor:Self .Actor:Player )
  194:  Call     UseCamPreset 	( 0000000E )
  1A4:  Call     CamTargetActor ( .Actor:Self )
  1B4:  Call     MoveCamOver 	( 00000019 )
  1C4:  Wait     00000019 
  1D0:  Call     PlaySoundAtActor 	( .Actor:Self .Sound:SpellCast3 )
  1E4:  If  *Flag[00]  ==  00000000 
  1F4:  	Call     SetAnimation 	( .Actor:Self 00000001 00560002 )
  20C:  	Call     SetAnimation 	( *Var[A] 00000001 00560002 )
  224:  	Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  240:  	Add  *Var[1]  00000017 
  250:  Else
  258:  	Call     SetAnimation 	( .Actor:Self 00000002 00570002 )
  270:  	Call     SetAnimation 	( *Var[A] 00000001 00570002 )
  288:  	Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  2A4:  	Add  *Var[1]  00000017 
  2B4:  EndIf
  2BC:  Call     PlayEffect  	( {FX:EnergyIn:Stars} *Var[0] *Var[1] *Var[2] *Fixed[1.0] 0000001E 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  300:  Wait     0000000A 
  30C:  Call     EnableIdleScript 	( .Actor:Self 00000001 )
  320:  Call     EnableIdleScript 	( *Var[9] 00000001 )
  334:  Wait     0000001E 
  340:  Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  35C:  Add  *Var[2]  FFFFFFFD 
  36C:  Call     SetActorPos 	( *Var[A] *Var[0] *Var[1] *Var[2] )
  388:  Set  *Var[9]  *Var[A] 
  398:  Wait     0000000F 
  3A4:  Call     UseCamPreset 	( 00000002 )
  3B4:  Call     MoveCamOver 	( 0000001E )
  3C4:  Call     PlaySoundAtActor 	( .Actor:Self .Sound:SpellCast4 )
  3D8:  Call     PlaySoundAtActor 	( *Var[9] .Sound:SpellCast4 )
  3EC:  Call     SetSpriteFlagBits 	( *Var[9] 00000001 00800000 .False )
  408:  Call     RandInt     	( 000003E8 *Var[0] )
  41C:  If  *Var[0]  <  000001F4 
  42C:  	Call     SetActorSpeed 	( .Actor:Self *Fixed[2.0] )
  440:  	ExecWait $Script_80221144 
  44C:  	Call     SetGoalToIndex ( .Actor:Self *Var[0] )
  460:  	Call     MoveToGoal  	( .Actor:Self 00000000 00000000 .Easing:Linear )
  47C:  Else
  484:  	Call     SetActorSpeed 	( *Var[9] *Fixed[2.0] )
  498:  	ExecWait $Script_80221144 
  4A4:  	Call     SetGoalToIndex ( *Var[9] *Var[0] )
  4B8:  	Call     MoveToGoal  	( *Var[9] 00000000 00000000 .Easing:Linear )
  4D4:  EndIf
  4DC:  Call     SetSpriteFlagBits 	( *Var[9] 00000001 00800000 .True )
  4F8:  Call     GetActorHP  	( .Actor:Self *Var[0] )
  50C:  Call     SetEnemyHP  	( *Var[9] *Var[0] )
  520:  Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  53C:  Call     ForceHomePos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  558:  Call     HPBarToHome 	( .Actor:Self )
  568:  Call     GetActorPos 	( *Var[9] *Var[0] *Var[1] *Var[2] )
  584:  Call     ForceHomePos 	( *Var[9] *Var[0] *Var[1] *Var[2] )
  5A0:  Call     HPBarToHome 	( *Var[9] )
  5B0:  If  *Flag[00]  ==  00000000 
  5C0:  	Call     SetSpriteEventBits 	( .Actor:Self 00000001 00400000 .True )
  5DC:  Else
  5E4:  	Call     SetSpriteEventBits 	( .Actor:Self 00000002 00400000 .True )
  600:  EndIf
  608:  If  *Flag[00]  ==  00000000 
  618:  	Call     SetAnimation 	( .Actor:Self 00000001 00560001 )
  630:  	Call     SetAnimation 	( *Var[9] 00000001 00560001 )
  648:  Else
  650:  	Call     SetAnimation 	( .Actor:Self 00000002 00570001 )
  668:  	Call     SetAnimation 	( *Var[9] 00000001 00570001 )
  680:  EndIf
  688:  Call     UseIdleAnimation 	( .Actor:Self .True )
  69C:  Call     UseIdleAnimation 	( *Var[9] .True )
  6B0:  Return
  6B8:  End

#new:Script $Script_BoostAttack
    0:  Set  *Flag[00]  00000000 
   10:  Label    0000000A 
   1C:  Call     CreateTargetList 	( 00008002 )
   2C:  Call     InitTargetIterator 	( )
   38:  Label    00000000 
   44:  Call     GetOwnerTarget ( *Var[0] *Var[1] )
   58:  Call     GetIndexFromHome 	( *Var[0] *Var[1] )
   6C:  Call     GetBattleVar 	( 00000002 *Var[2] )
   80:  If  *Var[1]  >  *Var[2] 
   90:  	Call     $Function_802183F8 ( *Var[0] *Var[3] )
   A4:  	If  *Var[3]  ==  00000000 
   B4:  		Call     GetActorAttackBoost 	( *Var[0] *Var[4] )
   C8:  		If  *Var[4]  <  00000000 
   D8:  			Set  *Var[8]  *Var[0] 
   E8:  			Call     SetBattleVar 	( 00000002 *Var[1] )
   FC:  			Goto     00000064 
  108:  		EndIf
  110:  	EndIf
  118:  EndIf
  120:  Call     ChooseNextTarget 	( .Iter:Next *Var[0] )
  134:  If  *Var[0]  !=  FFFFFFFF 
  144:  	Goto     00000000 
  150:  EndIf
  158:  If  *Flag[00]  ==  00000000 
  168:  	Set  *Flag[00]  00000001 
  178:  	Call     SetBattleVar 	( 00000002 FFFFFFFF )
  18C:  	Goto     0000000A 
  198:  EndIf
  1A0:  Call     8026A14C ( FFFFFF81 00008002 *Var[0] )
  1B8:  If  *Var[0]  ==  00000001 
  1C8:  	ExecWait $Script_RunAway 
  1D4:  	Return
  1DC:  EndIf
  1E4:  ExecWait $Script_ShapeSpell 
  1F0:  Return
  1F8:  Label    00000064 
  204:  Call     SetActorVar 	( .Actor:Self 0000000A 00000000 )
  21C:  Call     SetActorVar 	( .Actor:Self 0000000B 00000004 )
  234:  Call     ActorVarAdd 	( .Actor:Self 00000005 00000001 )
  24C:  Call     UseIdleAnimation 	( .Actor:Self .False )
  260:  Call     EnableIdleScript 	( .Actor:Self 00000000 )
  274:  Call     SetTargetActor ( .Actor:Self .Actor:Player )
  288:  Call     UseCamPreset 	( 0000000E )
  298:  Call     CamTargetActor ( .Actor:Self )
  2A8:  Call     MoveCamOver 	( 0000000F )
  2B8:  Wait     0000000F 
  2C4:  Call     GetActorFlags 	( .Actor:Self *Var[0] )
  2D8:  If  *Var[0]  !&  00000200 
  2E8:  	Call     SetAnimation 	( .Actor:Self 00000001 00560002 )
  300:  Else
  308:  	Call     SetAnimation 	( .Actor:Self 00000002 00570002 )
  320:  EndIf
  328:  Wait     00000005 
  334:  Call     PlaySoundAtActor 	( .Actor:Self .Sound:SpellCast1 )
  348:  Call     GetActorFlags 	( .Actor:Self *Var[0] )
  35C:  If  *Var[0]  !&  00000200 
  36C:  	Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  388:  	Call     GetStatusFlags ( .Actor:Self *Var[A] )
  39C:  	If  *Var[A]  &  00080000 
  3AC:  		Sub  *Var[0]  00000006 
  3BC:  		Add  *Var[1]  0000000C 
  3CC:  		Sub  *Var[2]  00000002 
  3DC:  		Call     PlayEffect  	( {FX:RadialFlowOut:YellowEnergy} *Var[0] *Var[1] *Var[2] *Fixed[0.12011719] 0000001E 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  420:  	Else
  428:  		Sub  *Var[0]  00000010 
  438:  		Add  *Var[1]  0000001F 
  448:  		Sub  *Var[2]  00000002 
  458:  		Call     PlayEffect  	( {FX:RadialFlowOut:YellowEnergy} *Var[0] *Var[1] *Var[2] *Fixed[0.30078125] 0000001E 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  49C:  	EndIf
  4A4:  Else
  4AC:  	Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  4C8:  	Call     GetStatusFlags ( .Actor:Self *Var[A] )
  4DC:  	If  *Var[A]  &  00080000 
  4EC:  		Sub  *Var[0]  0000000C 
  4FC:  		Add  *Var[1]  0000000E 
  50C:  		Sub  *Var[2]  00000002 
  51C:  		Call     PlayEffect  	( {FX:RadialFlowOut:YellowEnergy} *Var[0] *Var[1] *Var[2] *Fixed[0.12011719] 0000001E 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  560:  	Else
  568:  		Sub  *Var[0]  0000001E 
  578:  		Add  *Var[1]  00000024 
  588:  		Sub  *Var[2]  00000002 
  598:  		Call     PlayEffect  	( {FX:RadialFlowOut:YellowEnergy} *Var[0] *Var[1] *Var[2] *Fixed[0.30078125] 0000001E 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  5DC:  	EndIf
  5E4:  EndIf
  5EC:  Wait     0000001E 
  5F8:  Call     GetActorFlags 	( .Actor:Self *Var[0] )
  60C:  If  *Var[0]  !&  00000200 
  61C:  	Call     SetAnimation 	( .Actor:Self 00000001 00560001 )
  634:  Else
  63C:  	Call     SetAnimation 	( .Actor:Self 00000002 00570001 )
  654:  EndIf
  65C:  Wait     00000005 
  668:  Thread
  670:  	Wait     0000000A 
  67C:  	Call     PlaySoundAtActor 	( *Var[8] 000002DD )
  690:  EndThread
  698:  Thread
  6A0:  	Call     8026BF48 ( 00000001 )
  6B0:  	Call     BoostAttack 	( *Var[8] 00000000 )
  6C4:  	Call     8026BF48 ( 00000000 )
  6D4:  EndThread
  6DC:  Call     8027114C ( )
  6E8:  Call     UseCamPreset 	( 00000002 )
  6F8:  Wait     0000000A 
  704:  Call     8027D7F0 ( )
  710:  Call     EnableIdleScript 	( .Actor:Self 00000001 )
  724:  Call     UseIdleAnimation 	( .Actor:Self .True )
  738:  Return
  740:  End

#new:Script $Script_BoostDefense
    0:  Set  *Flag[00]  00000000 
   10:  Label    0000000A 
   1C:  Call     CreateTargetList 	( 00008002 )
   2C:  Call     InitTargetIterator 	( )
   38:  Label    00000000 
   44:  Call     GetOwnerTarget ( *Var[0] *Var[1] )
   58:  Call     GetIndexFromHome 	( *Var[0] *Var[1] )
   6C:  Call     GetBattleVar 	( 00000002 *Var[2] )
   80:  If  *Var[1]  >  *Var[2] 
   90:  	Call     $Function_802183F8 ( *Var[0] *Var[3] )
   A4:  	If  *Var[3]  ==  00000000 
   B4:  		Call     GetActorDefenseBoost 	( *Var[0] *Var[4] )
   C8:  		If  *Var[4]  <  00000000 
   D8:  			Set  *Var[8]  *Var[0] 
   E8:  			Call     SetBattleVar 	( 00000002 *Var[1] )
   FC:  			Goto     00000064 
  108:  		EndIf
  110:  	EndIf
  118:  EndIf
  120:  Call     ChooseNextTarget 	( .Iter:Next *Var[0] )
  134:  If  *Var[0]  !=  FFFFFFFF 
  144:  	Goto     00000000 
  150:  EndIf
  158:  If  *Flag[00]  ==  00000000 
  168:  	Set  *Flag[00]  00000001 
  178:  	Call     SetBattleVar 	( 00000002 FFFFFFFF )
  18C:  	Goto     0000000A 
  198:  EndIf
  1A0:  Call     8026A14C ( FFFFFF81 00008002 *Var[0] )
  1B8:  If  *Var[0]  ==  00000001 
  1C8:  	ExecWait $Script_RunAway 
  1D4:  	Return
  1DC:  EndIf
  1E4:  ExecWait $Script_ShapeSpell 
  1F0:  Return
  1F8:  Label    00000064 
  204:  Call     SetActorVar 	( .Actor:Self 0000000A 00000000 )
  21C:  Call     SetActorVar 	( .Actor:Self 0000000B 00000005 )
  234:  Call     ActorVarAdd 	( .Actor:Self 00000006 00000001 )
  24C:  Call     UseIdleAnimation 	( .Actor:Self .False )
  260:  Call     EnableIdleScript 	( .Actor:Self 00000000 )
  274:  Call     SetTargetActor ( .Actor:Self .Actor:Player )
  288:  Call     UseCamPreset 	( 0000000E )
  298:  Call     CamTargetActor ( .Actor:Self )
  2A8:  Call     MoveCamOver 	( 0000000F )
  2B8:  Wait     0000000F 
  2C4:  Call     GetActorFlags 	( .Actor:Self *Var[0] )
  2D8:  If  *Var[0]  !&  00000200 
  2E8:  	Call     SetAnimation 	( .Actor:Self 00000001 00560002 )
  300:  Else
  308:  	Call     SetAnimation 	( .Actor:Self 00000002 00570002 )
  320:  EndIf
  328:  Wait     00000005 
  334:  Call     PlaySoundAtActor 	( .Actor:Self .Sound:SpellCast1 )
  348:  Call     GetActorFlags 	( .Actor:Self *Var[0] )
  35C:  If  *Var[0]  !&  00000200 
  36C:  	Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  388:  	Call     GetStatusFlags ( .Actor:Self *Var[A] )
  39C:  	If  *Var[A]  &  00080000 
  3AC:  		Sub  *Var[0]  00000006 
  3BC:  		Add  *Var[1]  0000000C 
  3CC:  		Sub  *Var[2]  00000002 
  3DC:  		Call     PlayEffect  	( {FX:RadialFlowOut:YellowEnergy} *Var[0] *Var[1] *Var[2] *Fixed[0.12011719] 0000001E 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  420:  	Else
  428:  		Sub  *Var[0]  00000010 
  438:  		Add  *Var[1]  0000001F 
  448:  		Sub  *Var[2]  00000002 
  458:  		Call     PlayEffect  	( {FX:RadialFlowOut:YellowEnergy} *Var[0] *Var[1] *Var[2] *Fixed[0.30078125] 0000001E 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  49C:  	EndIf
  4A4:  Else
  4AC:  	Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  4C8:  	Call     GetStatusFlags ( .Actor:Self *Var[A] )
  4DC:  	If  *Var[A]  &  00080000 
  4EC:  		Sub  *Var[0]  0000000C 
  4FC:  		Add  *Var[1]  0000000E 
  50C:  		Sub  *Var[2]  00000002 
  51C:  		Call     PlayEffect  	( {FX:RadialFlowOut:YellowEnergy} *Var[0] *Var[1] *Var[2] *Fixed[0.12011719] 0000001E 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  560:  	Else
  568:  		Sub  *Var[0]  0000001E 
  578:  		Add  *Var[1]  00000024 
  588:  		Sub  *Var[2]  00000002 
  598:  		Call     PlayEffect  	( {FX:RadialFlowOut:YellowEnergy} *Var[0] *Var[1] *Var[2] *Fixed[0.30078125] 0000001E 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  5DC:  	EndIf
  5E4:  EndIf
  5EC:  Wait     0000001E 
  5F8:  Call     GetActorFlags 	( .Actor:Self *Var[0] )
  60C:  If  *Var[0]  !&  00000200 
  61C:  	Call     SetAnimation 	( .Actor:Self 00000001 00560001 )
  634:  Else
  63C:  	Call     SetAnimation 	( .Actor:Self 00000002 00570001 )
  654:  EndIf
  65C:  Wait     00000005 
  668:  Thread
  670:  	Wait     0000000A 
  67C:  	Call     PlaySoundAtActor 	( *Var[8] 000002DD )
  690:  EndThread
  698:  Thread
  6A0:  	Call     8026BF48 ( 00000001 )
  6B0:  	Call     BoostDefense 	( *Var[8] 00000000 )
  6C4:  	Call     8026BF48 ( 00000000 )
  6D4:  EndThread
  6DC:  Call     8027114C ( )
  6E8:  Call     UseCamPreset 	( 00000002 )
  6F8:  Wait     0000000A 
  704:  Call     8027D7F0 ( )
  710:  Call     EnableIdleScript 	( .Actor:Self 00000001 )
  724:  Call     UseIdleAnimation 	( .Actor:Self .True )
  738:  Return
  740:  End

#new:Script $Script_Electrify
    0:  Set  *Flag[00]  00000000 
   10:  Label    0000000A 
   1C:  Call     CreateTargetList 	( 00008002 )
   2C:  Call     InitTargetIterator 	( )
   38:  Label    00000000 
   44:  Call     GetOwnerTarget ( *Var[0] *Var[1] )
   58:  Call     GetIndexFromHome 	( *Var[0] *Var[1] )
   6C:  Call     GetBattleVar 	( 00000002 *Var[2] )
   80:  If  *Var[1]  >  *Var[2] 
   90:  	Call     $Function_802183F8 ( *Var[0] *Var[3] )
   A4:  	If  *Var[3]  ==  00000000 
   B4:  		Call     GetStatusFlags ( *Var[0] *Var[4] )
   C8:  		If  *Var[4]  !&  04002000 
   D8:  			Set  *Var[8]  *Var[0] 
   E8:  			Call     SetBattleVar 	( 00000002 *Var[1] )
   FC:  			Goto     00000064 
  108:  		EndIf
  110:  	EndIf
  118:  EndIf
  120:  Call     ChooseNextTarget 	( .Iter:Next *Var[0] )
  134:  If  *Var[0]  !=  FFFFFFFF 
  144:  	Goto     00000000 
  150:  EndIf
  158:  If  *Flag[00]  ==  00000000 
  168:  	Set  *Flag[00]  00000001 
  178:  	Call     SetBattleVar 	( 00000002 FFFFFFFF )
  18C:  	Goto     0000000A 
  198:  EndIf
  1A0:  Call     8026A14C ( FFFFFF81 00008002 *Var[0] )
  1B8:  If  *Var[0]  ==  00000001 
  1C8:  	ExecWait $Script_RunAway 
  1D4:  	Return
  1DC:  EndIf
  1E4:  ExecWait $Script_ShapeSpell 
  1F0:  Return
  1F8:  Label    00000064 
  204:  Call     SetActorVar 	( .Actor:Self 0000000A 00000000 )
  21C:  Call     SetActorVar 	( .Actor:Self 0000000B 00000006 )
  234:  Call     ActorVarAdd 	( .Actor:Self 00000007 00000001 )
  24C:  Call     UseIdleAnimation 	( .Actor:Self .False )
  260:  Call     EnableIdleScript 	( .Actor:Self 00000000 )
  274:  Call     SetTargetActor ( .Actor:Self .Actor:Player )
  288:  Call     UseCamPreset 	( 0000000E )
  298:  Call     CamTargetActor ( .Actor:Self )
  2A8:  Call     MoveCamOver 	( 0000000F )
  2B8:  Wait     0000000F 
  2C4:  Call     GetActorFlags 	( .Actor:Self *Var[0] )
  2D8:  If  *Var[0]  !&  00000200 
  2E8:  	Call     SetAnimation 	( .Actor:Self 00000001 00560002 )
  300:  Else
  308:  	Call     SetAnimation 	( .Actor:Self 00000002 00570002 )
  320:  EndIf
  328:  Wait     00000005 
  334:  Call     PlaySoundAtActor 	( .Actor:Self 000002F0 )
  348:  Call     GetActorFlags 	( .Actor:Self *Var[0] )
  35C:  If  *Var[0]  !&  00000200 
  36C:  	Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  388:  	Call     GetStatusFlags ( .Actor:Self *Var[A] )
  39C:  	If  *Var[A]  &  00080000 
  3AC:  		Sub  *Var[0]  00000006 
  3BC:  		Add  *Var[1]  0000000C 
  3CC:  		Sub  *Var[2]  00000002 
  3DC:  		Call     PlayEffect  	( {FX:SnakingStatic} *Var[0] *Var[1] *Var[2] *Fixed[0.12011719] 0000001E 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  420:  	Else
  428:  		Sub  *Var[0]  00000010 
  438:  		Add  *Var[1]  0000001F 
  448:  		Sub  *Var[2]  00000002 
  458:  		Call     PlayEffect  	( {FX:SnakingStatic} *Var[0] *Var[1] *Var[2] *Fixed[0.30078125] 0000001E 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  49C:  	EndIf
  4A4:  Else
  4AC:  	Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  4C8:  	Call     GetStatusFlags ( .Actor:Self *Var[A] )
  4DC:  	If  *Var[A]  &  00080000 
  4EC:  		Sub  *Var[0]  0000000C 
  4FC:  		Add  *Var[1]  0000000E 
  50C:  		Sub  *Var[2]  00000002 
  51C:  		Call     PlayEffect  	( {FX:SnakingStatic} *Var[0] *Var[1] *Var[2] *Fixed[0.12011719] 0000001E 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  560:  	Else
  568:  		Sub  *Var[0]  0000001E 
  578:  		Add  *Var[1]  00000024 
  588:  		Sub  *Var[2]  00000002 
  598:  		Call     PlayEffect  	( {FX:SnakingStatic} *Var[0] *Var[1] *Var[2] *Fixed[0.30078125] 0000001E 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  5DC:  	EndIf
  5E4:  EndIf
  5EC:  Wait     0000001E 
  5F8:  Call     GetActorFlags 	( .Actor:Self *Var[0] )
  60C:  If  *Var[0]  !&  00000200 
  61C:  	Call     SetAnimation 	( .Actor:Self 00000001 00560001 )
  634:  Else
  63C:  	Call     SetAnimation 	( .Actor:Self 00000002 00570001 )
  654:  EndIf
  65C:  Wait     00000005 
  668:  Thread
  670:  	Wait     0000000A 
  67C:  	Loop     00000004 
  688:  		Call     PlaySoundAtActor 	( *Var[8] 000003D2 )
  69C:  		Call     RandInt     	( 00000003 *Var[0] )
  6B0:  		Add  *Var[0]  00000003 
  6C0:  		Wait     *Var[0] 
  6CC:  	EndLoop
  6D4:  EndThread
  6DC:  Thread
  6E4:  	Call     8026BF48 ( 00000001 )
  6F4:  	Call     ElectrifyActor ( *Var[8] 00000000 )
  708:  	Call     8026BF48 ( 00000000 )
  718:  EndThread
  720:  Call     8027114C ( )
  72C:  Call     UseCamPreset 	( 00000002 )
  73C:  Wait     0000000A 
  748:  Call     8027D7F0 ( )
  754:  Call     EnableIdleScript 	( .Actor:Self 00000001 )
  768:  Call     UseIdleAnimation 	( .Actor:Self .True )
  77C:  Return
  784:  End

#new:Script $Script_Vanish
    0:  Set  *Flag[00]  00000000 
   10:  Label    0000000A 
   1C:  Call     CreateTargetList 	( 00008002 )
   2C:  Call     InitTargetIterator 	( )
   38:  Label    00000000 
   44:  Call     GetOwnerTarget ( *Var[0] *Var[1] )
   58:  Call     GetIndexFromHome 	( *Var[0] *Var[1] )
   6C:  Call     GetBattleVar 	( 00000002 *Var[2] )
   80:  If  *Var[1]  >  *Var[2] 
   90:  	Call     $Function_802183F8 ( *Var[0] *Var[3] )
   A4:  	If  *Var[3]  ==  00000000 
   B4:  		Call     GetStatusFlags ( *Var[0] *Var[4] )
   C8:  		If  *Var[4]  !&  04002000 
   D8:  			Set  *Var[8]  *Var[0] 
   E8:  			Call     SetBattleVar 	( 00000002 *Var[1] )
   FC:  			Goto     00000064 
  108:  		EndIf
  110:  	EndIf
  118:  EndIf
  120:  Call     ChooseNextTarget 	( .Iter:Next *Var[0] )
  134:  If  *Var[0]  !=  FFFFFFFF 
  144:  	Goto     00000000 
  150:  EndIf
  158:  If  *Flag[00]  ==  00000000 
  168:  	Set  *Flag[00]  00000001 
  178:  	Call     SetBattleVar 	( 00000002 FFFFFFFF )
  18C:  	Goto     0000000A 
  198:  EndIf
  1A0:  Call     8026A14C ( FFFFFF81 00008002 *Var[0] )
  1B8:  If  *Var[0]  ==  00000001 
  1C8:  	ExecWait $Script_RunAway 
  1D4:  	Return
  1DC:  EndIf
  1E4:  ExecWait $Script_ShapeSpell 
  1F0:  Return
  1F8:  Label    00000064 
  204:  Call     SetActorVar 	( .Actor:Self 0000000A 00000000 )
  21C:  Call     SetActorVar 	( .Actor:Self 0000000B 00000007 )
  234:  Call     ActorVarAdd 	( .Actor:Self 00000008 00000001 )
  24C:  Call     UseIdleAnimation 	( .Actor:Self .False )
  260:  Call     EnableIdleScript 	( .Actor:Self 00000000 )
  274:  Call     SetTargetActor ( .Actor:Self .Actor:Player )
  288:  Call     UseCamPreset 	( 0000000E )
  298:  Call     CamTargetActor ( .Actor:Self )
  2A8:  Call     MoveCamOver 	( 0000000F )
  2B8:  Wait     0000000F 
  2C4:  Call     GetActorFlags 	( .Actor:Self *Var[0] )
  2D8:  If  *Var[0]  !&  00000200 
  2E8:  	Call     SetAnimation 	( .Actor:Self 00000001 00560002 )
  300:  Else
  308:  	Call     SetAnimation 	( .Actor:Self 00000002 00570002 )
  320:  EndIf
  328:  Wait     00000005 
  334:  Call     PlaySoundAtActor 	( .Actor:Self .Sound:SpellCast1 )
  348:  Call     GetActorFlags 	( .Actor:Self *Var[0] )
  35C:  If  *Var[0]  !&  00000200 
  36C:  	Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  388:  	Call     GetStatusFlags ( .Actor:Self *Var[A] )
  39C:  	If  *Var[A]  &  00080000 
  3AC:  		Sub  *Var[0]  00000006 
  3BC:  		Add  *Var[1]  0000000C 
  3CC:  		Sub  *Var[2]  00000002 
  3DC:  		Call     PlayEffect  	( {FX:RadialFlowOut:WhiteWaves} *Var[0] *Var[1] *Var[2] *Fixed[0.12011719] 0000001E 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  420:  	Else
  428:  		Sub  *Var[0]  00000010 
  438:  		Add  *Var[1]  0000001F 
  448:  		Sub  *Var[2]  00000002 
  458:  		Call     PlayEffect  	( {FX:RadialFlowOut:WhiteWaves} *Var[0] *Var[1] *Var[2] *Fixed[0.30078125] 0000001E 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  49C:  	EndIf
  4A4:  Else
  4AC:  	Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  4C8:  	Call     GetStatusFlags ( .Actor:Self *Var[A] )
  4DC:  	If  *Var[A]  &  00080000 
  4EC:  		Sub  *Var[0]  0000000C 
  4FC:  		Add  *Var[1]  0000000E 
  50C:  		Sub  *Var[2]  00000002 
  51C:  		Call     PlayEffect  	( {FX:RadialFlowOut:WhiteWaves} *Var[0] *Var[1] *Var[2] *Fixed[0.12011719] 0000001E 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  560:  	Else
  568:  		Sub  *Var[0]  0000001E 
  578:  		Add  *Var[1]  00000024 
  588:  		Sub  *Var[2]  00000002 
  598:  		Call     PlayEffect  	( {FX:RadialFlowOut:WhiteWaves} *Var[0] *Var[1] *Var[2] *Fixed[0.30078125] 0000001E 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  5DC:  	EndIf
  5E4:  EndIf
  5EC:  Wait     0000001E 
  5F8:  Call     GetActorFlags 	( .Actor:Self *Var[0] )
  60C:  If  *Var[0]  !&  00000200 
  61C:  	Call     SetAnimation 	( .Actor:Self 00000001 00560001 )
  634:  Else
  63C:  	Call     SetAnimation 	( .Actor:Self 00000002 00570001 )
  654:  EndIf
  65C:  Wait     00000005 
  668:  Thread
  670:  	Wait     0000000A 
  67C:  	Call     PlaySoundAtActor 	( *Var[8] 000002DB )
  690:  EndThread
  698:  Thread
  6A0:  	Call     8026BF48 ( 00000001 )
  6B0:  	Call     VanishActor 	( *Var[8] 00000000 )
  6C4:  	Call     8026BF48 ( 00000000 )
  6D4:  EndThread
  6DC:  Call     8027114C ( )
  6E8:  Call     UseCamPreset 	( 00000002 )
  6F8:  Wait     0000000A 
  704:  Call     8027D7F0 ( )
  710:  Call     EnableIdleScript 	( .Actor:Self 00000001 )
  724:  Call     UseIdleAnimation 	( .Actor:Self .True )
  738:  Return
  740:  End

#new:Script $Script_TakeTurn_80223B24
    0:  Call     GetBattlePhase ( *Var[0] )
   10:  If  *Var[0]  ==  .Phase:FirstStrike
   20:  	ExecWait $Script_ShapeSpell 
   2C:  	Return
   34:  EndIf
   3C:  Call     GetActorVar 	( .Actor:Self 0000000A *Var[0] )
   54:  If  *Var[0]  ==  00000001 
   64:  	Goto     00000014 
   70:  EndIf
   78:  Set  *Var[A]  00000000 
   88:  Call     CreateTargetList 	( 00008002 )
   98:  Call     InitTargetIterator 	( )
   A4:  Label    00000000 
   B0:  Set  *Flag[00]  00000000 
   C0:  Call     GetOwnerTarget ( *Var[0] *Var[1] )
   D4:  Call     GetActorType 	( *Var[0] *Var[1] )
   E8:  If  *Var[1]  ==  00000047 
   F8:  	Call     GetActorVar 	( *Var[0] 00000008 *Var[1] )
  110:  	If  *Var[1]  ==  00000001 
  120:  		Set  *Flag[00]  00000001 
  130:  	EndIf
  138:  EndIf
  140:  Call     GetActorHP  	( *Var[0] *Var[2] )
  154:  Call     GetEnemyMaxHP 	( *Var[0] *Var[3] )
  168:  MulF  *Var[2]  *Fixed[100.0] 
  178:  DivF  *Var[2]  *Var[3] 
  188:  If  *Flag[00]  ==  00000000 
  198:  	If  *Var[2]  <=  00000000 
  1A8:  		Call     RandInt     	( 00000063 *Var[4] )
  1BC:  		Add  *Var[4]  00000001 
  1CC:  		If  *Var[4]  <  00000000 
  1DC:  			Add  *Var[A]  00000001 
  1EC:  			Set  *Var[B]  *Var[0] 
  1FC:  		EndIf
  204:  	EndIf
  20C:  EndIf
  214:  Call     ChooseNextTarget 	( .Iter:Next *Var[0] )
  228:  If  *Var[0]  !=  FFFFFFFF 
  238:  	Goto     00000000 
  244:  EndIf
  24C:  If  *Var[A]  >  00000000 
  25C:  	Goto     0000000A 
  268:  EndIf
  270:  Set  *Var[A]  00000000 
  280:  Call     CreateTargetList 	( 00008002 )
  290:  Call     InitTargetIterator 	( )
  29C:  Label    00000001 
  2A8:  Set  *Flag[00]  00000000 
  2B8:  Call     GetOwnerTarget ( *Var[0] *Var[1] )
  2CC:  Call     GetActorType 	( *Var[0] *Var[1] )
  2E0:  If  *Var[1]  ==  00000047 
  2F0:  	Call     GetActorVar 	( *Var[0] 00000008 *Var[1] )
  308:  	If  *Var[1]  ==  00000001 
  318:  		Set  *Flag[00]  00000001 
  328:  	EndIf
  330:  EndIf
  338:  Call     GetActorHP  	( *Var[0] *Var[2] )
  34C:  Call     GetEnemyMaxHP 	( *Var[0] *Var[3] )
  360:  MulF  *Var[2]  *Fixed[100.0] 
  370:  DivF  *Var[2]  *Var[3] 
  380:  If  *Flag[00]  ==  00000000 
  390:  	If  *Var[2]  <=  00000000 
  3A0:  		Call     RandInt     	( 00000063 *Var[4] )
  3B4:  		Add  *Var[4]  00000001 
  3C4:  		If  *Var[4]  <  00000000 
  3D4:  			Add  *Var[A]  00000001 
  3E4:  			Set  *Var[B]  *Var[0] 
  3F4:  		EndIf
  3FC:  	EndIf
  404:  EndIf
  40C:  Call     ChooseNextTarget 	( .Iter:Next *Var[0] )
  420:  If  *Var[0]  !=  FFFFFFFF 
  430:  	Goto     00000001 
  43C:  EndIf
  444:  If  *Var[A]  >  00000000 
  454:  	Goto     0000000A 
  460:  EndIf
  468:  Set  *Var[A]  00000000 
  478:  Call     CreateTargetList 	( 00008002 )
  488:  Call     InitTargetIterator 	( )
  494:  Label    00000002 
  4A0:  Set  *Flag[00]  00000000 
  4B0:  Call     GetOwnerTarget ( *Var[0] *Var[1] )
  4C4:  Call     GetActorType 	( *Var[0] *Var[1] )
  4D8:  If  *Var[1]  ==  00000047 
  4E8:  	Call     GetActorVar 	( *Var[0] 00000008 *Var[1] )
  500:  	If  *Var[1]  ==  00000001 
  510:  		Set  *Flag[00]  00000001 
  520:  	EndIf
  528:  EndIf
  530:  Call     GetActorHP  	( *Var[0] *Var[2] )
  544:  Call     GetEnemyMaxHP 	( *Var[0] *Var[3] )
  558:  MulF  *Var[2]  *Fixed[100.0] 
  568:  DivF  *Var[2]  *Var[3] 
  578:  If  *Flag[00]  ==  00000000 
  588:  	If  *Var[2]  <=  00000000 
  598:  		Call     RandInt     	( 00000063 *Var[4] )
  5AC:  		Add  *Var[4]  00000001 
  5BC:  		If  *Var[4]  <  00000000 
  5CC:  			Add  *Var[A]  00000001 
  5DC:  			Set  *Var[B]  *Var[0] 
  5EC:  		EndIf
  5F4:  	EndIf
  5FC:  EndIf
  604:  Call     ChooseNextTarget 	( .Iter:Next *Var[0] )
  618:  If  *Var[0]  !=  FFFFFFFF 
  628:  	Goto     00000002 
  634:  EndIf
  63C:  If  *Var[A]  >  00000000 
  64C:  	Goto     0000000A 
  658:  EndIf
  660:  Goto     00000014 
  66C:  Label    0000000A 
  678:  Call     8026A14C ( FFFFFF81 00008002 *Var[0] )
  690:  If  *Var[0]  ==  00000001 
  6A0:  	ExecWait $Script_RunAway 
  6AC:  	Return
  6B4:  EndIf
  6BC:  If  *Var[A]  ==  00000001 
  6CC:  	Call     GetActorVar 	( .Actor:Self 00000004 *Var[0] )
  6E4:  	If  *Var[0]  <  00000000 
  6F4:  		Call     RandInt     	( 000003E8 *Var[0] )
  708:  		If  *Var[0]  <  00000000 
  718:  			ExecWait $Script_HealOne 
  724:  			Return
  72C:  		EndIf
  734:  	Else
  73C:  		Call     GetActorVar 	( .Actor:Self 00000003 *Var[0] )
  754:  		If  *Var[0]  <  00000000 
  764:  			Call     RandInt     	( 000003E8 *Var[0] )
  778:  			If  *Var[0]  <  00000000 
  788:  				ExecWait $Script_HealAll 
  794:  				Return
  79C:  			EndIf
  7A4:  		EndIf
  7AC:  	EndIf
  7B4:  Else
  7BC:  	Call     GetActorVar 	( .Actor:Self 00000003 *Var[0] )
  7D4:  	If  *Var[0]  <  00000000 
  7E4:  		Call     RandInt     	( 000003E8 *Var[0] )
  7F8:  		If  *Var[0]  <  00000000 
  808:  			ExecWait $Script_HealAll 
  814:  			Return
  81C:  		EndIf
  824:  	Else
  82C:  		Call     GetActorVar 	( .Actor:Self 00000004 *Var[0] )
  844:  		If  *Var[0]  <  00000000 
  854:  			SetF  *Var[9]  *Fixed[100.0] 
  864:  			Call     CreateTargetList 	( 00008002 )
  874:  			Call     InitTargetIterator 	( )
  880:  			Label    0000000B 
  88C:  			Set  *Flag[00]  00000000 
  89C:  			Call     GetOwnerTarget ( *Var[0] *Var[1] )
  8B0:  			Call     GetActorType 	( *Var[0] *Var[1] )
  8C4:  			If  *Var[1]  ==  00000047 
  8D4:  				Call     GetActorVar 	( *Var[0] 00000008 *Var[1] )
  8EC:  				If  *Var[1]  ==  00000001 
  8FC:  					Set  *Flag[00]  00000001 
  90C:  				EndIf
  914:  			EndIf
  91C:  			Call     GetActorHP  	( *Var[0] *Var[2] )
  930:  			Call     GetEnemyMaxHP 	( *Var[0] *Var[3] )
  944:  			MulF  *Var[2]  *Fixed[100.0] 
  954:  			DivF  *Var[2]  *Var[3] 
  964:  			If  *Flag[00]  ==  00000000 
  974:  				If  *Var[2]  <=  *Var[9] 
  984:  					SetF  *Var[9]  *Var[2] 
  994:  					Set  *Var[B]  *Var[0] 
  9A4:  				EndIf
  9AC:  			EndIf
  9B4:  			Call     ChooseNextTarget 	( .Iter:Next *Var[0] )
  9C8:  			If  *Var[0]  !=  FFFFFFFF 
  9D8:  				Goto     0000000B 
  9E4:  			EndIf
  9EC:  			Call     RandInt     	( 000003E8 *Var[0] )
  A00:  			If  *Var[0]  <  00000000 
  A10:  				ExecWait $Script_HealOne 
  A1C:  				Return
  A24:  			EndIf
  A2C:  		EndIf
  A34:  	EndIf
  A3C:  EndIf
  A44:  Label    00000014 
  A50:  Set  *Var[A]  00000064 
  A60:  Set  *Var[B]  00000000 
  A70:  Set  *Var[C]  00000000 
  A80:  Set  *Var[D]  00000000 
  A90:  Set  *Var[E]  00000000 
  AA0:  Set  *Var[F]  00000000 
  AB0:  Call     GetActorVar 	( .Actor:Self 0000000A *Var[0] )
  AC8:  If  *Var[0]  ==  00000001 
  AD8:  	Set  *Var[A]  00000064 
  AE8:  	Set  *Var[B]  00000000 
  AF8:  	Set  *Var[C]  00000000 
  B08:  	Set  *Var[D]  00000000 
  B18:  	Set  *Var[E]  00000000 
  B28:  	Set  *Var[F]  00000000 
  B38:  	Goto     0000007B 
  B44:  Else
  B4C:  	ExecWait $Script_80221144 
  B58:  	If  *Var[0]  ==  FFFFFFFF 
  B68:  		Set  *Var[B]  00000000 
  B78:  	EndIf
  B80:  EndIf
  B88:  Call     GetStatusFlags ( .Actor:Self *Var[0] )
  B9C:  If  *Var[0]  !=  00000000 
  BAC:  	Set  *Var[B]  00000000 
  BBC:  EndIf
  BC4:  Call     GetActorVar 	( .Actor:Self 0000000B *Var[0] )
  BDC:  Switch  *Var[0] 
  BE8:  	Case  ==  00000004 
  BF4:  		Call     GetActorVar 	( .Actor:Self 00000005 *Var[1] )
  C0C:  		If  *Var[1]  <  00000000 
  C1C:  			Call     RandInt     	( 00000063 *Var[0] )
  C30:  			Add  *Var[0]  00000001 
  C40:  			If  *Var[0]  <=  00000000 
  C50:  				Set  *Var[A]  00000000 
  C60:  				Set  *Var[B]  00000000 
  C70:  				Set  *Var[C]  00000064 
  C80:  				Set  *Var[D]  00000000 
  C90:  				Set  *Var[E]  00000000 
  CA0:  				Set  *Var[F]  00000000 
  CB0:  			EndIf
  CB8:  		EndIf
  CC0:  	Case  ==  00000005 
  CCC:  		Call     GetActorVar 	( .Actor:Self 00000006 *Var[1] )
  CE4:  		If  *Var[1]  <  00000000 
  CF4:  			Call     RandInt     	( 00000063 *Var[0] )
  D08:  			Add  *Var[0]  00000001 
  D18:  			If  *Var[0]  <=  00000000 
  D28:  				Set  *Var[A]  00000000 
  D38:  				Set  *Var[B]  00000000 
  D48:  				Set  *Var[C]  00000000 
  D58:  				Set  *Var[D]  00000064 
  D68:  				Set  *Var[E]  00000000 
  D78:  				Set  *Var[F]  00000000 
  D88:  			EndIf
  D90:  		EndIf
  D98:  EndSwitch
  DA0:  Call     GetActorVar 	( .Actor:Self 00000005 *Var[0] )
  DB8:  If  *Var[0]  >=  00000000 
  DC8:  	Set  *Var[C]  00000000 
  DD8:  EndIf
  DE0:  Call     GetActorVar 	( .Actor:Self 00000006 *Var[0] )
  DF8:  If  *Var[0]  >=  00000000 
  E08:  	Set  *Var[D]  00000000 
  E18:  EndIf
  E20:  Call     GetActorVar 	( .Actor:Self 00000007 *Var[0] )
  E38:  If  *Var[0]  >=  00000000 
  E48:  	Set  *Var[E]  00000000 
  E58:  EndIf
  E60:  Call     GetActorVar 	( .Actor:Self 00000008 *Var[0] )
  E78:  If  *Var[0]  >=  00000000 
  E88:  	Set  *Var[F]  00000000 
  E98:  EndIf
  EA0:  Label    0000007B 
  EAC:  Set  *Var[9]  00000000 
  EBC:  Add  *Var[9]  *Var[A] 
  ECC:  Add  *Var[9]  *Var[B] 
  EDC:  Add  *Var[9]  *Var[C] 
  EEC:  Add  *Var[9]  *Var[D] 
  EFC:  Add  *Var[9]  *Var[E] 
  F0C:  Add  *Var[9]  *Var[F] 
  F1C:  Sub  *Var[9]  00000001 
  F2C:  Call     RandInt     	( *Var[9] *Var[0] )
  F40:  Add  *Var[0]  00000001 
  F50:  If  *Var[0]  <=  *Var[A] 
  F60:  	ExecWait $Script_ShapeSpell 
  F6C:  	Return
  F74:  EndIf
  F7C:  Add  *Var[A]  *Var[B] 
  F8C:  If  *Var[0]  <=  *Var[A] 
  F9C:  	ExecWait $Script_MakeCopy 
  FA8:  	Return
  FB0:  EndIf
  FB8:  Add  *Var[A]  *Var[C] 
  FC8:  If  *Var[0]  <=  *Var[A] 
  FD8:  	ExecWait $Script_BoostAttack 
  FE4:  	Return
  FEC:  EndIf
  FF4:  Add  *Var[A]  *Var[D] 
 1004:  If  *Var[0]  <=  *Var[A] 
 1014:  	ExecWait $Script_BoostDefense 
 1020:  	Return
 1028:  EndIf
 1030:  Add  *Var[A]  *Var[E] 
 1040:  If  *Var[0]  <=  *Var[A] 
 1050:  	ExecWait $Script_Electrify 
 105C:  	Return
 1064:  EndIf
 106C:  ExecWait $Script_Vanish 
 1078:  Return
 1080:  End

PADDING: 80224BAC to 80224BB0 (0048BC5C to 0048BC60)
00000000 

% Origin: HEURISTIC
#new:Unknown $???_80224BB0
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 

#new:Script $Script_BeforeBattle_80224BD0
    0:  Call     SetSpriteShading 	( FFFFFFFF )
   10:  Call     802C9C70 ( 00000000 00000005 00000001 )
   28:  Call     802C94A0 ( 00000001 $Function_802184C0 00000000 )
   40:  Call     802C90FC ( 00000005 00000001 FFFFFFFF )
   58:  Call     802C9518 ( 00000005 00000080 00000001 )
   70:  Call     802C9C70 ( 00000001 00000010 00000001 )
   88:  Call     802C94A0 ( 00000002 $Function_802184C0 00000000 )
   A0:  Call     802C90FC ( 00000010 00000002 FFFFFFFF )
   B8:  Call     802C9518 ( 00000010 00000080 00000001 )
   D0:  Call     802C9C70 ( 00000002 00000013 00000001 )
   E8:  Call     802C94A0 ( 00000003 $Function_802184C0 00000000 )
  100:  Call     802C90FC ( 00000013 00000003 FFFFFFFF )
  118:  Call     802C9518 ( 00000013 00000080 00000001 )
  130:  Call     802C9C70 ( 00000003 0000001C 00000001 )
  148:  Call     802C94A0 ( 00000004 $Function_802184C0 00000000 )
  160:  Call     802C90FC ( 0000001C 00000004 FFFFFFFF )
  178:  Call     802C9518 ( 0000001C 00000080 00000001 )
  190:  Call     802C9C70 ( 00000004 0000001F 00000001 )
  1A8:  Call     802C94A0 ( 00000005 $Function_802184C0 00000000 )
  1C0:  Call     802C90FC ( 0000001F 00000005 FFFFFFFF )
  1D8:  Call     802C9518 ( 0000001F 00000080 00000001 )
  1F0:  Call     802C9C70 ( 00000005 00000007 00000001 )
  208:  Call     802C94A0 ( 00000006 $Function_802186B8 00000000 )
  220:  Call     802C90FC ( 00000007 00000006 FFFFFFFF )
  238:  Call     802C9518 ( 00000007 00000080 00000001 )
  250:  Call     802C9C70 ( 00000006 00000025 00000001 )
  268:  Call     802C94A0 ( 00000007 $Function_802186B8 00000000 )
  280:  Call     802C90FC ( 00000025 00000007 FFFFFFFF )
  298:  Call     802C9518 ( 00000025 00000080 00000001 )
  2B0:  Call     802C9C70 ( 00000007 00000009 00000001 )
  2C8:  Call     802C94A0 ( 00000008 $Function_802189D0 00000000 )
  2E0:  Call     802C90FC ( 00000009 00000008 FFFFFFFF )
  2F8:  Call     802C9518 ( 00000009 00000080 00000001 )
  310:  Call     802C9C70 ( 00000008 00000019 00000001 )
  328:  Call     802C94A0 ( 00000009 $Function_802189D0 00000000 )
  340:  Call     802C90FC ( 00000019 00000009 FFFFFFFF )
  358:  Call     802C9518 ( 00000019 00000080 00000001 )
  370:  Call     802C9C70 ( 00000009 00000016 00000001 )
  388:  Call     802C94A0 ( 0000000A $Function_80218CEC 00000000 )
  3A0:  Call     802C90FC ( 00000016 0000000A FFFFFFFF )
  3B8:  Call     802C9518 ( 00000016 00000080 00000001 )
  3D0:  Thread
  3D8:  	Call     SetTexPanner 	( 00000004 00000000 )
  3EC:  	Call     SetTexPanner 	( 0000000C 00000000 )
  400:  	Call     SetTexPanner 	( 0000000D 00000000 )
  414:  	Call     SetTexPanner 	( 0000000E 00000000 )
  428:  	Set  *Var[0]  00000000 
  438:  	Set  *Var[1]  00000000 
  448:  	Set  *Var[2]  00000000 
  458:  	Set  *Var[3]  00000000 
  468:  	Loop     
  474:  		Add  *Var[0]  00000050 
  484:  		Add  *Var[1]  FFFFFF6A 
  494:  		If  *Var[0]  >  00008000 
  4A4:  			Add  *Var[0]  FFFF8000 
  4B4:  		EndIf
  4BC:  		If  *Var[1]  <  FFFF8000 
  4CC:  			Add  *Var[1]  00008000 
  4DC:  		EndIf
  4E4:  		Add  *Var[2]  FFFFFFCE 
  4F4:  		Add  *Var[3]  00000064 
  504:  		If  *Var[2]  <  FFFF8000 
  514:  			Add  *Var[2]  00008000 
  524:  		EndIf
  52C:  		If  *Var[3]  >  00008000 
  53C:  			Add  *Var[3]  FFFF8000 
  54C:  		EndIf
  554:  		Call     802C9364 ( 00000000 00000000 *Var[0] *Var[1] )
  570:  		Call     802C9364 ( 00000000 00000001 *Var[2] *Var[3] )
  58C:  		Wait     00000001 
  598:  	EndLoop
  5A0:  EndThread
  5A8:  Thread
  5B0:  	Label    00000002 
  5BC:  	Call     MakeLerp    	( FFFFFFF9 00000007 0000001E 0000000A )
  5D8:  	Label    00000000 
  5E4:  	Call     UpdateLerp  	( )
  5F0:  	Call     TranslateModel ( 00000012 00000000 *Var[0] 00000000 )
  60C:  	Call     TranslateModel ( 00000013 00000000 *Var[0] 00000000 )
  628:  	Call     TranslateModel ( 0000001B 00000000 *Var[0] 00000000 )
  644:  	Call     TranslateModel ( 0000001C 00000000 *Var[0] 00000000 )
  660:  	Call     TranslateModel ( 0000001F 00000000 *Var[0] 00000000 )
  67C:  	Call     TranslateModel ( 0000001E 00000000 *Var[0] 00000000 )
  698:  	Wait     00000001 
  6A4:  	If  *Var[1]  ==  00000001 
  6B4:  		Goto     00000000 
  6C0:  	EndIf
  6C8:  	Call     MakeLerp    	( 00000007 FFFFFFF9 0000001E 0000000A )
  6E4:  	Label    00000001 
  6F0:  	Call     UpdateLerp  	( )
  6FC:  	Call     TranslateModel ( 00000012 00000000 *Var[0] 00000000 )
  718:  	Call     TranslateModel ( 00000013 00000000 *Var[0] 00000000 )
  734:  	Call     TranslateModel ( 0000001B 00000000 *Var[0] 00000000 )
  750:  	Call     TranslateModel ( 0000001C 00000000 *Var[0] 00000000 )
  76C:  	Call     TranslateModel ( 0000001F 00000000 *Var[0] 00000000 )
  788:  	Call     TranslateModel ( 0000001E 00000000 *Var[0] 00000000 )
  7A4:  	Wait     00000001 
  7B0:  	If  *Var[1]  ==  00000001 
  7C0:  		Goto     00000001 
  7CC:  	EndIf
  7D4:  	Goto     00000002 
  7E0:  EndThread
  7E8:  Thread
  7F0:  	Label    00000003 
  7FC:  	Call     MakeLerp    	( 00000007 FFFFFFF9 0000001E 0000000A )
  818:  	Label    00000004 
  824:  	Call     UpdateLerp  	( )
  830:  	Call     TranslateModel ( 00000021 00000000 *Var[0] 00000000 )
  84C:  	Call     TranslateModel ( 00000022 00000000 *Var[0] 00000000 )
  868:  	Call     TranslateModel ( 0000000F 00000000 *Var[0] 00000000 )
  884:  	Call     TranslateModel ( 00000010 00000000 *Var[0] 00000000 )
  8A0:  	Wait     00000001 
  8AC:  	If  *Var[1]  ==  00000001 
  8BC:  		Goto     00000004 
  8C8:  	EndIf
  8D0:  	Call     MakeLerp    	( FFFFFFF9 00000007 0000001E 0000000A )
  8EC:  	Label    00000005 
  8F8:  	Call     UpdateLerp  	( )
  904:  	Call     TranslateModel ( 00000021 00000000 *Var[0] 00000000 )
  920:  	Call     TranslateModel ( 00000022 00000000 *Var[0] 00000000 )
  93C:  	Call     TranslateModel ( 0000000F 00000000 *Var[0] 00000000 )
  958:  	Call     TranslateModel ( 00000010 00000000 *Var[0] 00000000 )
  974:  	Wait     00000001 
  980:  	If  *Var[1]  ==  00000001 
  990:  		Goto     00000005 
  99C:  	EndIf
  9A4:  	Goto     00000003 
  9B0:  EndThread
  9B8:  Return
  9C0:  End

#new:Script $Script_AfterBattle_80225598
    0:  Return
    8:  End

#new:ForegroundModelList $ForegroundModelList_802255A8
00000005 00000000 

#new:Stage $Stage_802255B0
$ASCII_80226010  % hos_tex
$ASCII_80226000  % hos_bt01_shape
$ASCII_80225FF0  % hos_bt01_hit
$Script_BeforeBattle_80224BD0 
$Script_AfterBattle_80225598 
$ASCII_80225FE8  % hos_bg
$ForegroundModelList_802255A8 
00000000 
00000000 
00000000 

PADDING: 802255D8 to 802255E0 (0048C688 to 0048C690)
00000000 00000000 

#new:Script $Script_802255E0
    0:  Set  *Var[A]  *Var[0] 
   10:  Label    00000000 
   1C:  Call     TranslateModel ( *Var[A] 00000000 00000002 00000000 )
   38:  Wait     00000005 
   44:  Call     TranslateModel ( *Var[A] 00000000 00000000 00000000 )
   60:  Wait     00000005 
   6C:  Call     TranslateModel ( *Var[A] 00000000 00000002 00000000 )
   88:  Wait     00000005 
   94:  Call     TranslateModel ( *Var[A] 00000000 00000000 00000000 )
   B0:  Wait     00000005 
   BC:  Call     RandInt     	( 0000001E *Var[0] )
   D0:  Add  *Var[0]  0000001E 
   E0:  Wait     *Var[0] 
   EC:  Goto     00000000 
   F8:  Return
  100:  End

#new:Script $Script_BeforeBattle_802256E8
    0:  Call     SetSpriteShading 	( FFFFFFFF )
   10:  Thread
   18:  	Set  *Var[0]  00000013 
   28:  	Exec     $Script_802255E0 
   34:  	Wait     00000005 
   40:  	Set  *Var[0]  00000014 
   50:  	Exec     $Script_802255E0 
   5C:  	Wait     00000005 
   68:  	Set  *Var[0]  00000015 
   78:  	Exec     $Script_802255E0 
   84:  	Wait     00000005 
   90:  	Set  *Var[0]  00000016 
   A0:  	Exec     $Script_802255E0 
   AC:  	Wait     00000005 
   B8:  	Set  *Var[0]  00000017 
   C8:  	Exec     $Script_802255E0 
   D4:  	Wait     00000005 
   E0:  	Set  *Var[0]  00000018 
   F0:  	Exec     $Script_802255E0 
   FC:  	Wait     00000005 
  108:  	Set  *Var[0]  00000019 
  118:  	Exec     $Script_802255E0 
  124:  	Wait     00000005 
  130:  	Set  *Var[0]  0000001A 
  140:  	Exec     $Script_802255E0 
  14C:  	Wait     00000005 
  158:  	Set  *Var[0]  0000001B 
  168:  	Exec     $Script_802255E0 
  174:  	Wait     00000005 
  180:  	Set  *Var[0]  0000001C 
  190:  	Exec     $Script_802255E0 
  19C:  EndThread
  1A4:  Return
  1AC:  End

#new:Script $Script_AfterBattle_8022589C
    0:  Return
    8:  End

#new:ForegroundModelList $ForegroundModelList_802258AC
00000020 0000001E 00000000 

#new:Stage $Stage_802258B8
$ASCII_80226048  % nok_tex
$ASCII_80226038  % nok_bt02_shape
$ASCII_80226028  % nok_bt02_hit
$Script_BeforeBattle_802256E8 
$Script_AfterBattle_8022589C 
$ASCII_80226020  % nok_bg
$ForegroundModelList_802258AC 
00000000 
00000000 
00000000 

#new:Script $Script_BeforeBattle_802258E0
    0:  Thread
    8:  	Call     SetTexPanner 	( 00000015 00000001 )
   1C:  	Call     SetTexPanner 	( 00000016 00000001 )
   30:  	Set  *Var[0]  00000000 
   40:  	Set  *Var[1]  00000000 
   50:  	Set  *Var[2]  00000000 
   60:  	Set  *Var[3]  00000000 
   70:  	Loop     
   7C:  		Add  *Var[0]  FFFFFFCE 
   8C:  		Add  *Var[1]  0000012C 
   9C:  		Add  *Var[2]  0000005A 
   AC:  		Add  *Var[3]  FFFFFF38 
   BC:  		Call     802C9364 ( 00000001 00000000 *Var[0] *Var[1] )
   D8:  		Call     802C9364 ( 00000001 00000001 *Var[2] *Var[3] )
   F4:  		Wait     00000001 
  100:  	EndLoop
  108:  EndThread
  110:  Thread
  118:  	Set  *Var[A]  00000000 
  128:  	Label    00000002 
  134:  	Call     MakeLerp    	( FFFFFFF9 00000007 00000028 0000000A )
  150:  	Label    00000000 
  15C:  	Call     UpdateLerp  	( )
  168:  	Call     TranslateModel ( 00000011 00000000 *Var[0] 00000000 )
  184:  	Call     TranslateModel ( 00000015 00000000 *Var[0] 00000000 )
  1A0:  	Mul  *Var[0]  00000003 
  1B0:  	Call     RotateModel 	( 00000011 *Var[A] 00000000 00000000 00000001 )
  1D0:  	Add  *Var[A]  FFFFFFFD 
  1E0:  	Call     ClampFloat  	( *Var[A] )
  1F0:  	Wait     00000001 
  1FC:  	If  *Var[1]  ==  00000001 
  20C:  		Goto     00000000 
  218:  	EndIf
  220:  	Call     MakeLerp    	( 00000007 FFFFFFF9 00000028 0000000A )
  23C:  	Label    00000001 
  248:  	Call     UpdateLerp  	( )
  254:  	Call     TranslateModel ( 00000011 00000000 *Var[0] 00000000 )
  270:  	Call     TranslateModel ( 00000015 00000000 *Var[0] 00000000 )
  28C:  	Mul  *Var[0]  00000003 
  29C:  	Call     RotateModel 	( 00000011 *Var[A] 00000000 00000000 00000001 )
  2BC:  	Add  *Var[A]  FFFFFFFD 
  2CC:  	Call     ClampFloat  	( *Var[A] )
  2DC:  	Wait     00000001 
  2E8:  	If  *Var[1]  ==  00000001 
  2F8:  		Goto     00000001 
  304:  	EndIf
  30C:  	Goto     00000002 
  318:  EndThread
  320:  Thread
  328:  	Set  *Var[A]  00000000 
  338:  	Label    00000002 
  344:  	Call     MakeLerp    	( FFFFFFF6 00000004 00000028 0000000A )
  360:  	Label    00000000 
  36C:  	Call     UpdateLerp  	( )
  378:  	Call     TranslateModel ( 00000013 00000000 *Var[0] 00000000 )
  394:  	Call     TranslateModel ( 00000016 00000000 *Var[0] 00000000 )
  3B0:  	Mul  *Var[0]  FFFFFFFD 
  3C0:  	Call     RotateModel 	( 00000013 *Var[A] 00000000 00000000 00000001 )
  3E0:  	Add  *Var[A]  FFFFFFFD 
  3F0:  	Call     ClampFloat  	( *Var[A] )
  400:  	Wait     00000001 
  40C:  	If  *Var[1]  ==  00000001 
  41C:  		Goto     00000000 
  428:  	EndIf
  430:  	Call     MakeLerp    	( 00000004 FFFFFFF6 00000028 0000000A )
  44C:  	Label    00000001 
  458:  	Call     UpdateLerp  	( )
  464:  	Call     TranslateModel ( 00000013 00000000 *Var[0] 00000000 )
  480:  	Call     TranslateModel ( 00000016 00000000 *Var[0] 00000000 )
  49C:  	Mul  *Var[0]  FFFFFFFD 
  4AC:  	Call     RotateModel 	( 00000013 *Var[A] 00000000 00000000 00000001 )
  4CC:  	Add  *Var[A]  FFFFFFFD 
  4DC:  	Call     ClampFloat  	( *Var[A] )
  4EC:  	Wait     00000001 
  4F8:  	If  *Var[1]  ==  00000001 
  508:  		Goto     00000001 
  514:  	EndIf
  51C:  	Goto     00000002 
  528:  EndThread
  530:  Return
  538:  End

#new:Script $Script_AfterBattle_80225E20
    0:  Return
    8:  End

#new:Stage $Stage_80225E30
$ASCII_80226078  % hos_tex
$ASCII_80226068  % hos_bt02_shape
$ASCII_80226058  % hos_bt02_hit
$Script_BeforeBattle_802258E0 
$Script_AfterBattle_80225E20 
$ASCII_80226050  % nok_bg
00000000 
00000000 
00000000 
00000000 

PADDING: 80225E58 to 80225E60 (0048CF08 to 0048CF10)
00000000 00000000 

#new:Formation $Formation_00
$GoombarioTutor1 00000001 0000000A 00000000 00000000 00000000 00000000 

#new:Formation $Formation_01
$Ember 00000001 0000000A 00000000 00000000 00000000 00000000 
$Ember 00000002 00000009 00000000 00000000 00000000 00000000 

#new:Formation $Formation_02
$Ember 00000000 0000000A 00000000 00000000 00000000 00000000 
$Ember 00000001 00000009 00000000 00000000 00000000 00000000 
$Ember 00000002 00000008 00000000 00000000 00000000 00000000 

#new:Formation $Formation_03
$FlyingMagikoopa 00000005 0000000A 00000000 00000000 00000000 00000000 

#new:FormationTable $FormationTable
$SJIS_802260B4 00000001 $Formation_00 $Stage_80225E30 00000000 
$SJIS_802260A8 00000002 $Formation_01 $Stage_802255B0 00000000 
$SJIS_8022609C 00000003 $Formation_02 $Stage_802255B0 00000000 % unused
$SJIS_80226080 00000001 $Formation_03 $Stage_80225E30 00000000 
00000000 00000000 00000000 00000000 00000000 % unused

#new:StageTable $StageTable
$ASCII_802260DC $Stage_802258B8 
$ASCII_802260D4 $Stage_802255B0 
$ASCII_802260CC $Stage_80225E30 
00000000 00000000 

PADDING: 80225FA8 to 80225FB0 (0048D058 to 0048D060)
00000000 00000000 

% Origin: HEURISTIC
#new:ConstDouble $ConstDouble_80225FB0
48.627451d

% Origin: HEURISTIC
#new:ConstDouble $ConstDouble_80225FB8
89.411765d

% Origin: HEURISTIC
#new:ConstDouble $ConstDouble_80225FC0
99.607843d

% Origin: HEURISTIC
#new:ConstDouble $ConstDouble_80225FC8
67.450980d

% Origin: HEURISTIC
#new:ConstDouble $ConstDouble_80225FD0
59.215686d

% Origin: HEURISTIC
#new:ConstDouble $ConstDouble_80225FD8
80.392157d

% Origin: HEURISTIC
#new:ConstDouble $ConstDouble_80225FE0
96.078431d

#new:ASCII $ASCII_80225FE8
hos_bg

#new:ASCII $ASCII_80225FF0
hos_bt01_hit

#new:ASCII $ASCII_80226000
hos_bt01_shape

#new:ASCII $ASCII_80226010
hos_tex

PADDING: 80226018 to 80226020 (0048D0C8 to 0048D0D0)
00000000 00000000 

#new:ASCII $ASCII_80226020
nok_bg

#new:ASCII $ASCII_80226028
nok_bt02_hit

#new:ASCII $ASCII_80226038
nok_bt02_shape

#new:ASCII $ASCII_80226048
nok_tex

#new:ASCII $ASCII_80226050
nok_bg

#new:ASCII $ASCII_80226058
hos_bt02_hit

#new:ASCII $ASCII_80226068
hos_bt02_shape

#new:ASCII $ASCII_80226078
hos_tex

#new:SJIS $SJIS_80226080
% kameku???herupugo?
834A8381 8362834E 81698260 82628377 838B8376 82B2816A 00000000 

#new:SJIS $SJIS_8022609C
% erumosux3
8347838B 83828358 78825200 

#new:SJIS $SJIS_802260A8
% erumosux2
8347838B 83828358 78825100 

#new:SJIS $SJIS_802260B4
% kurio???herupu?
834E838A 83498169 82608262 8377838B 8376816A 00000000 

#new:ASCII $ASCII_802260CC
hos_02

#new:ASCII $ASCII_802260D4
hos_01

#new:ASCII $ASCII_802260DC
hos_00

PADDING: 802260E4 to 802260F0 (0048D194 to 0048D1A0)
00000000 00000000 00000000 

